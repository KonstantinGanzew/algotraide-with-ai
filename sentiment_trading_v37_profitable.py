"""
üöÄ PROFITABLE SENTIMENT –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V3.7
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 20% –≥–æ–¥–æ–≤—ã—Ö (14400 –∑–∞ 2 –≥–æ–¥–∞)
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
import gymnasium as gym
from gymnasium import spaces
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple, Any
from datetime import datetime
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')


class ProfitableConfig:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ –¥–ª—è 20% –≥–æ–¥–æ–≤—ã—Ö
    INITIAL_BALANCE = 10000
    RISK_PER_TRADE = 0.08  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.02
    MAX_POSITION_SIZE = 0.6  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.25
    STOP_LOSS = 0.05  # –û—Å–ª–∞–±–ª–µ–Ω —Å 0.03
    TAKE_PROFIT = 0.15  # –£–≤–µ–ª–∏—á–µ–Ω —Å 0.08
    TRAILING_STOP = 0.03  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    
    # –í–µ—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö - –±–æ–ª—å—à–µ –≤–µ—Å–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É
    TECHNICAL_WEIGHT = 0.7
    SENTIMENT_WEIGHT = 0.15
    MOMENTUM_WEIGHT = 0.1
    VOLATILITY_WEIGHT = 0.05
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    WINDOW_SIZE = 72  # –£–≤–µ–ª–∏—á–µ–Ω–æ –æ–∫–Ω–æ
    TOTAL_TIMESTEPS = 10000  # –ë–æ–ª—å—à–µ –æ–±—É—á–µ–Ω–∏—è
    LEARNING_RATE = 5e-5  # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    SENTIMENT_THRESHOLD = 0.15
    SENTIMENT_MULTIPLIER = 1.3
    
    # –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
    MIN_VOLUME_RATIO = 1.2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
    TREND_CONFIRMATION_PERIODS = 3
    RSI_OVERSOLD = 25
    RSI_OVERBOUGHT = 75
    
    # –§–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
    MIN_SIGNAL_STRENGTH = 0.6
    MAX_DAILY_TRADES = 3


class EnhancedDataLoader:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    
    def __init__(self, data_path: str):
        self.data_path = data_path
    
    def load_bitcoin_data(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö Bitcoin"""
        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.data_path}...")
        df = pd.read_csv(self.data_path)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df['datetime'] = df['timestamp']
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['datetime'].min()} - {df['datetime'].max()}")
        print(f"üìà –¶–µ–Ω—ã: ${df['close'].min():.2f} - ${df['close'].max():.2f}")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(df)}")
        return df
    
    def add_advanced_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        print("üîß –†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # –ë–∞–∑–æ–≤—ã–µ
        df['returns'] = df['close'].pct_change()
        df['log_returns'] = np.log(df['close'] / df['close'].shift(1))
        df['volatility'] = df['returns'].rolling(24).std()
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è MA
        for period in [5, 10, 12, 20, 26, 50, 100, 200]:
            df[f'sma_{period}'] = df['close'].rolling(period).mean()
            df[f'ema_{period}'] = df['close'].ewm(span=period).mean()
        
        # MACD —Å–µ–º–µ–π—Å—Ç–≤–æ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è EMA)
        df['macd_12_26'] = df['ema_12'] - df['ema_26']
        df['macd_signal'] = df['macd_12_26'].ewm(span=9).mean()
        df['macd_histogram'] = df['macd_12_26'] - df['macd_signal']
        
        # RSI —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
        for period in [14, 21, 30]:
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
            rs = gain / loss
            df[f'rsi_{period}'] = 100 - (100 / (1 + rs))
        
        # Bollinger Bands —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
        for period in [20, 50]:
            bb_middle = df['close'].rolling(period).mean()
            bb_std = df['close'].rolling(period).std()
            df[f'bb_upper_{period}'] = bb_middle + (bb_std * 2)
            df[f'bb_lower_{period}'] = bb_middle - (bb_std * 2)
            df[f'bb_width_{period}'] = (df[f'bb_upper_{period}'] - df[f'bb_lower_{period}']) / bb_middle
            df[f'bb_position_{period}'] = (df['close'] - df[f'bb_lower_{period}']) / (df[f'bb_upper_{period}'] - df[f'bb_lower_{period}'])
        
        # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['volume_sma_20'] = df['volume'].rolling(20).mean()
        df['volume_ratio'] = df['volume'] / df['volume_sma_20']
        df['price_volume'] = df['close'] * df['volume']
        df['vwap'] = df['price_volume'].rolling(20).sum() / df['volume'].rolling(20).sum()
        
        # –ú–æ–º–µ–Ω—Ç—É–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for period in [3, 5, 10, 20, 50]:
            df[f'momentum_{period}'] = df['close'] / df['close'].shift(period) - 1
            df[f'roc_{period}'] = (df['close'] - df['close'].shift(period)) / df['close'].shift(period) * 100
        
        # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        for period in [10, 20, 50]:
            df[f'resistance_{period}'] = df['high'].rolling(period).max()
            df[f'support_{period}'] = df['low'].rolling(period).min()
            df[f'price_position_{period}'] = (df['close'] - df[f'support_{period}']) / (df[f'resistance_{period}'] - df[f'support_{period}'])
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        df['atr_14'] = self._calculate_atr(df, 14)
        df['atr_21'] = self._calculate_atr(df, 21)
        
        # Trend strength
        df['trend_strength'] = abs(df['close'] - df['sma_50']) / df['sma_50']
        
        # Market regime indicators
        df['bull_bear_ratio'] = (df['close'] > df['sma_50']).astype(int).rolling(20).mean()
        df['volatility_regime'] = (df['volatility'] > df['volatility'].rolling(50).mean()).astype(int)
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len([col for col in df.columns if col not in ['timestamp', 'datetime', 'open', 'high', 'low', 'close', 'volume']])} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        return df
    
    def _calculate_atr(self, df: pd.DataFrame, period: int) -> pd.Series:
        """–†–∞—Å—á–µ—Ç Average True Range"""
        high_low = df['high'] - df['low']
        high_close = np.abs(df['high'] - df['close'].shift())
        low_close = np.abs(df['low'] - df['close'].shift())
        true_range = np.maximum(high_low, np.maximum(high_close, low_close))
        return true_range.rolling(period).mean()


class SmartSentimentGenerator:
    """–£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏—è–º"""
    
    def generate_smart_sentiment(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        print("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä—ã–Ω–∫–∞
        df['price_change_1h'] = df['close'].pct_change(1)
        df['price_change_4h'] = df['close'].pct_change(4)
        df['price_change_24h'] = df['close'].pct_change(24)
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–Ω–¥
        df['short_vol'] = df['returns'].rolling(12).std()
        df['long_vol'] = df['returns'].rolling(48).std()
        df['vol_ratio'] = df['short_vol'] / df['long_vol']
        
        # –£–º–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
        np.random.seed(42)
        n = len(df)
        
        # –ë–∞–∑–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å momentum
        momentum_signal = df['momentum_20'].fillna(0)
        trend_signal = np.where(df['close'] > df['sma_50'], 0.3, -0.3)
        volume_signal = np.clip((df['volume_ratio'].fillna(1) - 1) * 0.5, -0.3, 0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —à—É–º—ã –∏ —Å–æ–±—ã—Ç–∏—è
        noise = np.random.normal(0, 0.08, n)
        
        # –°–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ä–µ–∂–µ, –Ω–æ —Å–∏–ª—å–Ω–µ–µ
        events = np.random.choice([0, 1], size=n, p=[0.97, 0.03])
        event_strength = np.random.normal(0, 0.6, n) * events
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        for i in range(1, len(event_strength)):
            if events[i-1] == 1:
                event_strength[i] += event_strength[i-1] * 0.7
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
        base_sentiment = (
            momentum_signal * 0.4 +
            trend_signal * 0.3 +
            volume_signal * 0.2 +
            noise * 0.1
        ) + event_strength
        
        base_sentiment = np.clip(base_sentiment, -1, 1)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        df['sentiment_twitter'] = np.clip(base_sentiment + np.random.normal(0, 0.06, n), -1, 1)
        df['sentiment_reddit'] = np.clip(base_sentiment + np.random.normal(0, 0.08, n), -1, 1)
        df['sentiment_news'] = np.clip(base_sentiment + np.random.normal(0, 0.05, n), -1, 1)
        df['sentiment_social_volume'] = np.abs(base_sentiment) * 1200 + np.random.exponential(400, n)
        
        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        df['overall_sentiment'] = (
            df['sentiment_twitter'] * 0.5 +
            df['sentiment_reddit'] * 0.3 +
            df['sentiment_news'] * 0.2
        )
        
        # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        df['sentiment_strength'] = np.abs(df['overall_sentiment'])
        df['sentiment_consistency'] = df['overall_sentiment'].rolling(6).std()
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è {n} —Ç–æ—á–µ–∫")
        return df


class ProfitableFeatureExtractor(BaseFeaturesExtractor):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π Feature Extractor –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self, observation_space: gym.Space, features_dim: int = 512):
        super().__init__(observation_space, features_dim)
        
        self.seq_len = ProfitableConfig.WINDOW_SIZE
        self.input_features = observation_space.shape[1] if observation_space.shape else 100
        
        # –ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.feature_net = nn.Sequential(
            nn.Linear(self.input_features, 256),
            nn.ReLU(),
            nn.Dropout(0.15),
            nn.Linear(256, 128),
            nn.ReLU(),
            nn.Dropout(0.1),
            nn.Linear(128, 64),
            nn.ReLU()
        )
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π LSTM
        self.lstm = nn.LSTM(
            input_size=self.input_features,
            hidden_size=128,
            num_layers=2,
            batch_first=True,
            dropout=0.1 if 2 > 1 else 0.0
        )
        
        # Attention –º–µ—Ö–∞–Ω–∏–∑–º
        self.attention = nn.MultiheadAttention(
            embed_dim=128,
            num_heads=8,
            dropout=0.1,
            batch_first=True
        )
        
        # Fusion network
        self.fusion_net = nn.Sequential(
            nn.Linear(128 + 64, features_dim),
            nn.ReLU(),
            nn.Dropout(0.1),
            nn.Linear(features_dim, features_dim),
            nn.Tanh()
        )
    
    def forward(self, observations: torch.Tensor) -> torch.Tensor:
        batch_size, seq_len, features = observations.shape
        
        # Feature processing –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏
        last_obs = observations[:, -1, :]
        feature_out = self.feature_net(last_obs)
        
        # LSTM –æ–±—Ä–∞–±–æ—Ç–∫–∞
        lstm_out, _ = self.lstm(observations)
        
        # Attention –Ω–∞ LSTM –≤—ã—Ö–æ–¥–µ
        attended_out, _ = self.attention(lstm_out, lstm_out, lstm_out)
        lstm_features = attended_out[:, -1, :]
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        combined = torch.cat([lstm_features, feature_out], dim=1)
        output = self.fusion_net(combined)
        
        return output


class ProfitableTradingEnv(gym.Env):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 20% –≥–æ–¥–æ–≤—ã—Ö"""
    
    def __init__(self, df: pd.DataFrame):
        super().__init__()
        
        self.df = df.reset_index(drop=True)
        self.window_size = ProfitableConfig.WINDOW_SIZE
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        self.feature_columns = [col for col in numeric_columns if col not in 
                               ['timestamp', 'datetime', 'open', 'high', 'low', 'close', 'volume']]
        
        self.action_space = spaces.Discrete(3)  # Hold, Buy, Sell
        
        n_features = len(self.feature_columns)
        self.observation_space = spaces.Box(
            low=-np.inf, high=np.inf,
            shape=(self.window_size, n_features),
            dtype=np.float32
        )
        
        self._prepare_data()
        self._reset_state()
    
    def _prepare_data(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ NaN –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
        feature_data = self.df[self.feature_columns].copy()
        feature_data = feature_data.fillna(method='ffill').fillna(method='bfill').fillna(0)
        feature_data = feature_data.replace([np.inf, -np.inf], 0)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–æ—Å–æ–≤
        scaler = StandardScaler()
        normalized_data = scaler.fit_transform(feature_data)
        
        # –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
        normalized_data = np.clip(normalized_data, -3, 3)
        
        self.normalized_df = pd.DataFrame(normalized_data, columns=self.feature_columns, index=feature_data.index)
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(self.feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {len(self.df)} —Ç–æ—á–µ–∫")
    
    def _reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        self.current_step = self.window_size
        self.balance = ProfitableConfig.INITIAL_BALANCE
        self.btc_amount = 0.0
        self.entry_price = 0.0
        self.entry_step = 0
        self.trailing_stop_price = 0.0
        
        self.total_trades = 0
        self.profitable_trades = 0
        self.daily_trades = 0
        self.last_trade_day = None
        
        self.portfolio_history = [float(ProfitableConfig.INITIAL_BALANCE)]
        self.trades_history = []
        
        self.max_drawdown = 0.0
        self.peak_value = ProfitableConfig.INITIAL_BALANCE
        self.consecutive_losses = 0
        self.max_consecutive_losses = 0
    
    def reset(self, seed=None, options=None):
        self._reset_state()
        return self._get_observation(), {}
    
    def _get_observation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        start_idx = max(0, self.current_step - self.window_size)
        end_idx = self.current_step
        
        obs = self.normalized_df.iloc[start_idx:end_idx].values
        
        if len(obs) < self.window_size:
            padding = np.tile(obs[0] if len(obs) > 0 else np.zeros(len(self.feature_columns)), 
                            (self.window_size - len(obs), 1))
            obs = np.vstack([padding, obs])
        
        return obs.astype(np.float32)
    
    def _get_current_price(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        if self.current_step >= len(self.df):
            return self.df.iloc[-1]['close']
        return self.df.iloc[self.current_step]['close']
    
    def _get_current_datetime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        if self.current_step >= len(self.df):
            return str(self.df.iloc[-1]['datetime'])
        return str(self.df.iloc[self.current_step]['datetime'])
    
    def _calculate_signal_strength(self) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if self.current_step >= len(self.df):
            return 0.0
        
        current_data = self.df.iloc[self.current_step]
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        rsi_signal = 0.0
        if 'rsi_14' in current_data.index:
            rsi = current_data['rsi_14']
            if rsi < ProfitableConfig.RSI_OVERSOLD:
                rsi_signal = (ProfitableConfig.RSI_OVERSOLD - rsi) / ProfitableConfig.RSI_OVERSOLD
            elif rsi > ProfitableConfig.RSI_OVERBOUGHT:
                rsi_signal = -(rsi - ProfitableConfig.RSI_OVERBOUGHT) / (100 - ProfitableConfig.RSI_OVERBOUGHT)
        
        # MACD —Å–∏–≥–Ω–∞–ª
        macd_signal = 0.0
        if 'macd_histogram' in current_data.index:
            macd_hist = current_data['macd_histogram']
            if not pd.isna(macd_hist):
                macd_signal = np.tanh(macd_hist * 10)  # Normalize
        
        # Bollinger Bands —Å–∏–≥–Ω–∞–ª
        bb_signal = 0.0
        if 'bb_position_20' in current_data.index:
            bb_pos = current_data['bb_position_20']
            if not pd.isna(bb_pos):
                if bb_pos < 0.2:
                    bb_signal = 0.3  # Oversold
                elif bb_pos > 0.8:
                    bb_signal = -0.3  # Overbought
        
        # –û–±—ä–µ–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        volume_signal = 0.0
        if 'volume_ratio' in current_data.index:
            vol_ratio = current_data['volume_ratio']
            if not pd.isna(vol_ratio) and vol_ratio > ProfitableConfig.MIN_VOLUME_RATIO:
                volume_signal = min((vol_ratio - 1) * 0.2, 0.3)
        
        # –°–∏–≥–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        sentiment_signal = 0.0
        if 'overall_sentiment' in current_data.index:
            sentiment = current_data['overall_sentiment']
            if not pd.isna(sentiment) and abs(sentiment) > ProfitableConfig.SENTIMENT_THRESHOLD:
                sentiment_signal = sentiment * ProfitableConfig.SENTIMENT_MULTIPLIER * 0.3
        
        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        total_signal = (
            rsi_signal * 0.25 +
            macd_signal * 0.25 +
            bb_signal * 0.2 +
            volume_signal * 0.15 +
            sentiment_signal * 0.15
        )
        
        return np.clip(total_signal, -1, 1)
    
    def _check_daily_trade_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å"""
        current_date = self._get_current_datetime()[:10]  # YYYY-MM-DD
        
        if self.last_trade_day != current_date:
            self.daily_trades = 0
            self.last_trade_day = current_date
        
        return self.daily_trades < ProfitableConfig.MAX_DAILY_TRADES
    
    def _update_trailing_stop(self, current_price: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ trailing stop"""
        if self.btc_amount > 0 and self.entry_price > 0:
            if self.trailing_stop_price == 0:
                self.trailing_stop_price = current_price * (1 - ProfitableConfig.TRAILING_STOP)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç
                new_trailing_stop = current_price * (1 - ProfitableConfig.TRAILING_STOP)
                if new_trailing_stop > self.trailing_stop_price:
                    self.trailing_stop_price = new_trailing_stop
    
    def _check_exit_conditions(self, current_price: float) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        if self.btc_amount <= 0 or self.entry_price <= 0:
            return 'none'
        
        price_change = (current_price - self.entry_price) / self.entry_price
        
        # –°—Ç–æ–ø-–ª–æ—Å—Å
        if price_change <= -ProfitableConfig.STOP_LOSS:
            return 'stop_loss'
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        if price_change >= ProfitableConfig.TAKE_PROFIT:
            return 'take_profit'
        
        # Trailing stop
        if self.trailing_stop_price > 0 and current_price <= self.trailing_stop_price:
            return 'trailing_stop'
        
        return 'none'
    
    def _execute_trade(self, action: int, current_price: float) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        signal_strength = self._calculate_signal_strength()
        trade_result = {'executed': False, 'type': None, 'signal_strength': signal_strength}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º trailing stop
        self._update_trailing_stop(current_price)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
        exit_condition = self._check_exit_conditions(current_price)
        if exit_condition != 'none' and self.btc_amount > 0:
            revenue = self.btc_amount * current_price
            commission = revenue * 0.0015  # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è
            profit = revenue - self.btc_amount * self.entry_price - commission
            
            if profit > 0:
                self.profitable_trades += 1
                self.consecutive_losses = 0
            else:
                self.consecutive_losses += 1
                self.max_consecutive_losses = max(self.max_consecutive_losses, self.consecutive_losses)
            
            self.balance += revenue - commission
            self.btc_amount = 0.0
            self.entry_price = 0.0
            self.trailing_stop_price = 0.0
            self.daily_trades += 1
            
            trade_result.update({
                'executed': True, 'type': f'SELL_{exit_condition.upper()}',
                'profit': profit, 'price': current_price,
                'datetime': self._get_current_datetime()
            })
            self.total_trades += 1
            self.trades_history.append(trade_result)
            
            return trade_result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
        if not self._check_daily_trade_limit():
            return trade_result
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
        if abs(signal_strength) < ProfitableConfig.MIN_SIGNAL_STRENGTH:
            return trade_result
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == 1 and self.balance > 500 and signal_strength > 0:  # Buy
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            base_position_size = ProfitableConfig.RISK_PER_TRADE
            signal_multiplier = 1 + abs(signal_strength) * 0.5
            position_size = min(base_position_size * signal_multiplier, ProfitableConfig.MAX_POSITION_SIZE)
            
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —É–±—ã—Ç–∫–æ–≤
            if self.consecutive_losses > 2:
                position_size *= 0.5
            
            investment = self.balance * position_size
            amount = investment / current_price
            commission = investment * 0.0015
            
            if investment + commission <= self.balance:
                self.btc_amount += amount
                self.balance -= investment + commission
                self.entry_price = current_price
                self.entry_step = self.current_step
                self.trailing_stop_price = 0.0  # –°–±—Ä–æ—Å trailing stop
                self.daily_trades += 1
                
                trade_result.update({
                    'executed': True, 'type': 'BUY',
                    'amount': amount, 'price': current_price,
                    'investment': investment, 'position_size': position_size,
                    'datetime': self._get_current_datetime()
                })
                
        elif action == 2 and self.btc_amount > 0 and signal_strength < -0.3:  # Sell (manual)
            revenue = self.btc_amount * current_price
            commission = revenue * 0.0015
            profit = revenue - self.btc_amount * self.entry_price - commission
            
            if profit > 0:
                self.profitable_trades += 1
                self.consecutive_losses = 0
            else:
                self.consecutive_losses += 1
                self.max_consecutive_losses = max(self.max_consecutive_losses, self.consecutive_losses)
            
            self.balance += revenue - commission
            self.btc_amount = 0.0
            self.entry_price = 0.0
            self.trailing_stop_price = 0.0
            self.daily_trades += 1
            
            trade_result.update({
                'executed': True, 'type': 'SELL_MANUAL',
                'profit': profit, 'price': current_price,
                'datetime': self._get_current_datetime()
            })
        
        if trade_result['executed']:
            self.total_trades += 1
            self.trades_history.append(trade_result)
        
        return trade_result
    
    def _calculate_portfolio_value(self) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        current_price = self._get_current_price()
        return self.balance + self.btc_amount * current_price
    
    def _calculate_reward(self) -> float:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã"""
        current_portfolio = self._calculate_portfolio_value()
        prev_portfolio = self.portfolio_history[-1]
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_change = (current_portfolio - prev_portfolio) / prev_portfolio
        base_reward = portfolio_change * 200  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–±
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
        if current_portfolio > self.peak_value:
            self.peak_value = current_portfolio
        current_drawdown = (self.peak_value - current_portfolio) / self.peak_value
        self.max_drawdown = max(self.max_drawdown, current_drawdown)
        
        # –ë–æ–Ω—É—Å—ã –∏ —à—Ç—Ä–∞—Ñ—ã
        if portfolio_change > 0.01:  # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∏–±—ã–ª—å
            base_reward += 10
        
        if current_drawdown > 0.1:  # –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å–∞–¥–∫—É
            base_reward -= current_drawdown * 200
        
        if self.consecutive_losses > 3:  # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–µ—Ä–∏—é —É–±—ã—Ç–∫–æ–≤
            base_reward -= self.consecutive_losses * 5
        
        # –ë–æ–Ω—É—Å –∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫
        if self.total_trades > 0:
            win_rate = self.profitable_trades / self.total_trades
            if win_rate > 0.6:
                base_reward += 20
            elif win_rate < 0.4:
                base_reward -= 15
        
        return base_reward
    
    def step(self, action: int) -> Tuple[np.ndarray, float, bool, bool, Dict[str, Any]]:
        """–®–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        current_price = self._get_current_price()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        trade_result = self._execute_trade(action, current_price)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_step += 1
        portfolio_value = self._calculate_portfolio_value()
        self.portfolio_history.append(portfolio_value)
        
        # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
        reward = self._calculate_reward()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        done = (
            self.current_step >= len(self.df) - 1 or
            portfolio_value <= ProfitableConfig.INITIAL_BALANCE * 0.3 or
            self.max_drawdown > 0.5 or
            self.consecutive_losses > 8
        )
        
        info = {
            'portfolio_value': portfolio_value,
            'balance': self.balance,
            'btc_amount': self.btc_amount,
            'total_trades': self.total_trades,
            'profitable_trades': self.profitable_trades,
            'max_drawdown': self.max_drawdown,
            'signal_strength': trade_result.get('signal_strength', 0),
            'current_price': current_price,
            'datetime': self._get_current_datetime(),
            'trade_result': trade_result,
            'consecutive_losses': self.consecutive_losses,
            'daily_trades': self.daily_trades
        }
        
        return self._get_observation(), reward, done, False, info


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ PROFITABLE SENTIMENT –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V3.7")
    print("üéØ –¶–ï–õ–¨: 20% –ì–û–î–û–í–´–• (14400 –ó–ê 2 –ì–û–î–ê)")
    print("=" * 75)
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ó–ö–ê –ò –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    data_loader = EnhancedDataLoader("data/BTC_5_2w.csv")
    bitcoin_df = data_loader.load_bitcoin_data()
    
    # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print("\nüîß –≠–¢–ê–ü 2: –†–ê–°–®–ò–†–ï–ù–ù–´–ï –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´")
    print("-" * 50)
    bitcoin_df = data_loader.add_advanced_indicators(bitcoin_df)
    
    # 3. –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    print("\nüß† –≠–¢–ê–ü 3: –£–ú–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ù–ò–ô")
    print("-" * 50)
    sentiment_generator = SmartSentimentGenerator()
    combined_df = sentiment_generator.generate_smart_sentiment(bitcoin_df)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    combined_df = combined_df.fillna(method='ffill').fillna(method='bfill').fillna(0)
    
    print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {len(combined_df)} –∑–∞–ø–∏—Å–µ–π, {len(combined_df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüéÆ –≠–¢–ê–ü 4: –°–û–ó–î–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("-" * 50)
    env = ProfitableTradingEnv(combined_df)
    vec_env = DummyVecEnv([lambda: env])
    print(f"‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ")
    
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    print("\nüß† –≠–¢–ê–ü 5: –°–û–ó–î–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –ú–û–î–ï–õ–ò")
    print("-" * 50)
    
    policy_kwargs = dict(
        features_extractor_class=ProfitableFeatureExtractor,
        features_extractor_kwargs=dict(features_dim=512),
        net_arch=[512, 256, 128],
        activation_fn=torch.nn.ReLU
    )
    
    model = PPO(
        'MlpPolicy',
        vec_env,
        learning_rate=ProfitableConfig.LEARNING_RATE,
        n_steps=2048,
        batch_size=64,
        n_epochs=6,
        gamma=0.995,
        gae_lambda=0.98,
        clip_range=0.15,
        ent_coef=0.005,
        vf_coef=0.5,
        max_grad_norm=0.5,
        policy_kwargs=policy_kwargs,
        verbose=1
    )
    
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
    
    # 6. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print("\nüéì –≠–¢–ê–ü 6: –ò–ù–¢–ï–ù–°–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï")
    print("-" * 50)
    model.learn(total_timesteps=ProfitableConfig.TOTAL_TIMESTEPS)
    print("‚úÖ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
    print("\nüí∞ –≠–¢–ê–ü 7: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò")
    print("-" * 50)
    
    obs, _ = env.reset()
    results = []
    trades_log = []
    
    print("üíº –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é...")
    
    for step in range(min(5000, len(combined_df) - env.window_size - 1)):
        action, _ = model.predict(obs, deterministic=True)
        obs, reward, done, truncated, info = env.step(int(action))
        
        results.append({
            'step': step,
            'datetime': info['datetime'],
            'portfolio_value': info['portfolio_value'],
            'current_price': info['current_price'],
            'balance': info['balance'],
            'btc_amount': info['btc_amount'],
            'total_trades': info['total_trades'],
            'profitable_trades': info['profitable_trades'],
            'max_drawdown': info['max_drawdown'],
            'signal_strength': info['signal_strength'],
            'consecutive_losses': info['consecutive_losses']
        })
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        if info['trade_result']['executed']:
            trades_log.append(info['trade_result'])
            trade_type = info['trade_result']['type']
            price = info['trade_result']['price']
            datetime = info['trade_result']['datetime']
            signal = info['signal_strength']
            print(f"üíé {trade_type} ${price:.2f} —Å–∏–≥–Ω–∞–ª:{signal:.2f} {datetime}")
        
        if done:
            break
    
    # 8. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
    print("\nüìä –≠–¢–ê–ü 8: –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò")
    print("-" * 50)
    
    if results:
        final_result = results[-1]
        
        initial_value = ProfitableConfig.INITIAL_BALANCE
        final_value = final_result['portfolio_value']
        total_return = (final_value - initial_value) / initial_value * 100
        
        # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –Ω–∞ 2 –≥–æ–¥–∞
        days_tested = len(results) / 12  # –ü—Ä–∏–º–µ—Ä–Ω–æ 5-–º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        years_tested = days_tested / 365
        annualized_return = (final_value / initial_value) ** (1 / years_tested) - 1 if years_tested > 0 else 0
        two_year_projection = initial_value * ((1 + annualized_return) ** 2)
        two_year_profit = two_year_projection - initial_value
        
        total_trades = final_result['total_trades']
        profitable_trades = final_result['profitable_trades']
        win_rate = (profitable_trades / max(total_trades, 1)) * 100
        max_drawdown = final_result['max_drawdown'] * 100
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        portfolio_values = [r['portfolio_value'] for r in results]
        returns = [portfolio_values[i] / portfolio_values[i-1] - 1 for i in range(1, len(portfolio_values))]
        volatility = np.std(returns) * np.sqrt(len(returns)) if returns else 0
        sharpe_ratio = (np.mean(returns) / volatility) if volatility > 0 else 0
        
        # Buy & Hold —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        start_price = results[0]['current_price']
        end_price = final_result['current_price']
        bnh_return = (end_price - start_price) / start_price * 100
        
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ò–ë–´–õ–¨–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
        print("=" * 70)
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initial_value:,.2f}")
        print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${final_value:,.2f}")
        print(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_return:+.2f}%")
        print(f"üìà –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {annualized_return*100:+.2f}%")
        print(f"üéØ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞ 2 –≥–æ–¥–∞: ${two_year_projection:,.2f}")
        print(f"üíé –ü—Ä–∏–±—ã–ª—å –∑–∞ 2 –≥–æ–¥–∞: ${two_year_profit:,.2f}")
        print(f"üèÜ –¶–µ–ª—å 14400: {'‚úÖ –î–û–°–¢–ò–ì–ù–£–¢–ê' if two_year_profit >= 14400 else '‚ùå –ù–ï –î–û–°–¢–ò–ì–ù–£–¢–ê'}")
        print(f"üìä Buy & Hold: {bnh_return:+.2f}%")
        print(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades} ({win_rate:.1f}%)")
        print(f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
        print(f"‚ö° –ö–æ—ç—Ñ. –®–∞—Ä–ø–∞: {sharpe_ratio:.3f}")
        
        print("\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print("=" * 50)
        
        if two_year_profit >= 14400 and win_rate > 55 and max_drawdown < 25:
            print("üü¢ –û–¢–õ–ò–ß–ù–û! –¶–µ–ª—å 20% –≥–æ–¥–æ–≤—ã—Ö –î–û–°–¢–ò–ì–ù–£–¢–ê!")
            print(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ 2 –≥–æ–¥–∞: ${two_year_profit:,.2f}")
        elif two_year_profit >= 10000:
            print("üü° –•–û–†–û–®–û! –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        elif total_return > bnh_return:
            print("üî∂ –ü–†–û–ì–†–ï–°–°! –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –ø–∞—Å—Å–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        else:
            print("üî¥ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò!")
        
        print(f"\nüöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ {annualized_return*100:+.2f}% –≥–æ–¥–æ–≤—ã—Ö")
        print("‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 20% –≥–æ–¥–æ–≤—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


if __name__ == "__main__":
    main() 