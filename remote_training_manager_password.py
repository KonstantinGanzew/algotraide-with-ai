"""
üöÄ –ú–ï–ù–ï–î–ñ–ï–† –£–î–ê–õ–ï–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø –° –ü–ê–†–û–õ–¨–ù–û–ô –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GPU —Å–µ—Ä–≤–µ—Ä—É –ø–æ –ø–∞—Ä–æ–ª—é
–°–µ—Ä–≤–µ—Ä: 192.168.88.218 (NVIDIA GPU + CUDA 12.8)
"""

import paramiko
import scp
import os
import json
import time
import getpass
from pathlib import Path
from typing import Optional, Dict, Any, List
import logging
import threading
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class RemoteGPUTrainingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ —Å –ø–∞—Ä–æ–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    
    def __init__(self, 
                 server_ip: str = "192.168.88.218",
                 username: str = "user",
                 password: Optional[str] = None,
                 remote_path: str = "/home/user/gpu_training",
                 port: int = 22):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            server_ip: IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ  
            password: –ü–∞—Ä–æ–ª—å (–µ—Å–ª–∏ None - –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)
            remote_path: –ü—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            port: SSH –ø–æ—Ä—Ç
        """
        self.server_ip = server_ip
        self.username = username
        self.password = password
        self.remote_path = remote_path
        self.port = port
        
        # SSH –∫–ª–∏–µ–Ω—Ç
        self.ssh_client = None
        self.scp_client = None
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.sync_files = [
            "sentiment_trading_v69_remote.py",
            "requirements-gpu.txt",
            "data/BTCUSDT_5m_2y.csv",
            "data/BTCUSDT_1h_2y.csv", 
            "data/BTCUSDT_4h_2y.csv",
            "data/BTCUSDT_1d_2y.csv"
        ]
        
    def _get_password(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)"""
        if self.password:
            return self.password
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_password = os.getenv('REMOTE_SERVER_PASSWORD')
        if env_password:
            return env_password
            
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
        return getpass.getpass(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è {self.username}@{self.server_ip}: ")
    
    def connect(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            self.ssh_client = paramiko.SSHClient()
            self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            password = self._get_password()
            
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.server_ip}...")
            self.ssh_client.connect(
                hostname=self.server_ip,
                port=self.port,
                username=self.username,
                password=password,
                timeout=30,
                look_for_keys=False,  # –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ SSH –∫–ª—é—á–µ–π
                allow_agent=False     # –û—Ç–∫–ª—é—á–∏—Ç—å SSH –∞–≥–µ–Ω—Ç
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ SCP –∫–ª–∏–µ–Ω—Ç–∞
            transport = self.ssh_client.get_transport()
            if transport:
                self.scp_client = scp.SCPClient(transport)
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç SSH")
            
            logger.info("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except paramiko.AuthenticationException:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            return False
        except paramiko.SSHException as e:
            logger.error(f"‚ùå SSH –æ—à–∏–±–∫–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.scp_client:
            self.scp_client.close()
        if self.ssh_client:
            self.ssh_client.close()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    def execute_command(self, command: str, timeout: int = 300) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
        if not self.ssh_client:
            return {'success': False, 'error': 'No SSH connection'}
        
        try:
            logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command}")
            stdin, stdout, stderr = self.ssh_client.exec_command(command, timeout=timeout)
            
            # –ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            stdout_text = stdout.read().decode('utf-8')
            stderr_text = stderr.read().decode('utf-8')
            exit_code = stdout.channel.recv_exit_status()
            
            result = {
                'success': exit_code == 0,
                'exit_code': exit_code,
                'stdout': stdout_text,
                'stderr': stderr_text
            }
            
            if exit_code == 0:
                logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {exit_code})")
                if stderr_text:
                    logger.error(f"–û—à–∏–±–∫–∞: {stderr_text.strip()}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {'success': False, 'error': str(e)}
    
    def check_gpu_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ GPU –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        logger.info("üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU —Å—Ç–∞—Ç—É—Å–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ NVIDIA-SMI
        result = self.execute_command("nvidia-smi --query-gpu=name,memory.total,memory.free,temperature.gpu --format=csv,noheader,nounits")
        
        if result['success']:
            gpu_info = result['stdout'].strip().split('\n')
            gpu_data = []
            
            for i, gpu_line in enumerate(gpu_info):
                if gpu_line.strip():
                    parts = gpu_line.split(', ')
                    if len(parts) >= 4:
                        gpu_data.append({
                            'id': i,
                            'name': parts[0],
                            'memory_total': int(parts[1]),
                            'memory_free': int(parts[2]),
                            'temperature': int(parts[3])
                        })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA –≤–µ—Ä—Å–∏–∏
            cuda_result = self.execute_command("nvcc --version | grep 'release' | awk '{print $6}' | cut -c2-")
            cuda_version = cuda_result['stdout'].strip() if cuda_result['success'] else "Unknown"
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(gpu_data)} GPU(s)")
            logger.info(f"üîß CUDA –≤–µ—Ä—Å–∏—è: {cuda_version}")
            
            return {
                'available': True,
                'cuda_version': cuda_version,
                'gpus': gpu_data
            }
        else:
            logger.warning("‚ö†Ô∏è NVIDIA-SMI –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return {'available': False, 'error': result.get('stderr', 'Unknown error')}
    
    def setup_environment(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã...")
        
        commands = [
            f"mkdir -p {self.remote_path}",
            f"mkdir -p {self.remote_path}/data",
            f"mkdir -p {self.remote_path}/logs",
            f"mkdir -p {self.remote_path}/models",
            f"mkdir -p {self.remote_path}/results"
        ]
        
        for cmd in commands:
            result = self.execute_command(cmd)
            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {cmd}")
                return False
        
        logger.info("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return True
    
    def sync_files(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if not self.scp_client:
            logger.error("‚ùå SCP –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        logger.info("üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...")
        success = True
        
        for file_path in self.sync_files:
            local_path = Path(file_path)
            
            if not local_path.exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                continue
            
            try:
                if 'data/' in file_path:
                    remote_file_path = f"{self.remote_path}/data/{local_path.name}"
                else:
                    remote_file_path = f"{self.remote_path}/{local_path.name}"
                
                logger.info(f"üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {file_path} -> {remote_file_path}")
                self.scp_client.put(str(local_path), remote_file_path)
                logger.info("‚úÖ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {file_path}: {e}")
                success = False
        
        if success:
            logger.info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        return success
    
    def install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        commands = [
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
            "python3 --version",
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã
            f"cd {self.remote_path} && python3 -m venv venv || true",
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
            f"cd {self.remote_path} && source venv/bin/activate && pip install --upgrade pip",
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch —Å CUDA
            f"cd {self.remote_path} && source venv/bin/activate && pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121",
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            f"cd {self.remote_path} && source venv/bin/activate && pip install stable-baselines3>=2.2.1 gymnasium>=0.29.0",
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
            f"cd {self.remote_path} && source venv/bin/activate && pip install numpy pandas scikit-learn matplotlib seaborn tqdm psutil ccxt"
        ]
        
        for i, cmd in enumerate(commands, 1):
            logger.info(f"üîß –®–∞–≥ {i}/{len(commands)}: {cmd.split('&&')[-1].strip()}")
            result = self.execute_command(cmd, timeout=600)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            
            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {i}")
                logger.error(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
                logger.error(f"–û—à–∏–±–∫–∞: {result.get('stderr', 'Unknown error')}")
                return False
                
        logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    def test_gpu_setup(self) -> bool:
        """–¢–µ—Å—Ç GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        test_script = '''
import torch
print("=" * 50)
print("üéÆ –¢–ï–°–¢ GPU –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
print("=" * 50)
print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")

if torch.cuda.is_available():
    print(f"CUDA –≤–µ—Ä—Å–∏—è: {torch.version.cuda}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {torch.cuda.device_count()}")
    
    for i in range(torch.cuda.device_count()):
        props = torch.cuda.get_device_properties(i)
        print(f"GPU {i}: {props.name}")
        print(f"  –ü–∞–º—è—Ç—å: {props.total_memory / 1024**3:.1f} GB")
        print(f"  –ú—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: {props.multi_processor_count}")
    
    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    device = torch.device('cuda:0')
    x = torch.randn(1000, 1000, device=device)
    y = torch.matmul(x, x)
    torch.cuda.synchronize()
    print("‚úÖ GPU —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
else:
    print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        '''
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        with open('temp_gpu_test.py', 'w') as f:
            f.write(test_script)
        
        try:
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            self.scp_client.put('temp_gpu_test.py', f'{self.remote_path}/gpu_test.py')
            
            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
            result = self.execute_command(f"cd {self.remote_path} && source venv/bin/activate && python gpu_test.py")
            
            if result['success']:
                logger.info("‚úÖ GPU —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
                print("\n" + "="*50)
                print("üéÆ –†–ï–ó–£–õ–¨–¢–ê–¢ GPU –¢–ï–°–¢–ê:")
                print("="*50)
                print(result['stdout'])
                return True
            else:
                logger.error("‚ùå GPU —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
                logger.error(result.get('stderr', 'Unknown error'))
                return False
                
        finally:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists('temp_gpu_test.py'):
                os.remove('temp_gpu_test.py')
        
        return False
    
    def start_training(self, script_name: str = "sentiment_trading_v69_remote.py") -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º GPU —Å–µ—Ä–≤–µ—Ä–µ...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ª–æ–≥–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        log_file = f"logs/training_{timestamp}.log"
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–µ
        cmd = (f"cd {self.remote_path} && "
               f"source venv/bin/activate && "
               f"nohup python {script_name} > {log_file} 2>&1 & "
               f"echo $!")
        
        result = self.execute_command(cmd)
        
        if result['success']:
            process_id = result['stdout'].strip()
            logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ (PID: {process_id})")
            logger.info(f"üìã –õ–æ–≥ —Ñ–∞–π–ª: {log_file}")
            
            return {
                'success': True,
                'process_id': process_id,
                'log_file': log_file,
                'timestamp': timestamp
            }
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.get('stderr')}")
            return {
                'success': False,
                'error': result.get('stderr', 'Unknown error')
            }
    
    def monitor_training(self, log_file: str = None) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info("üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è...")
        
        if not log_file:
            # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª
            result = self.execute_command(f"ls -t {self.remote_path}/logs/training_*.log | head -1")
            if result['success'] and result['stdout'].strip():
                log_file = result['stdout'].strip()
            else:
                logger.error("‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        else:
            log_file = f"{self.remote_path}/{log_file}"
        
        try:
            logger.info(f"üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {log_file}")
            logger.info("‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é tail -f
            command = f"tail -f {log_file}"
            stdin, stdout, stderr = self.ssh_client.exec_command(command)
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            for line in iter(stdout.readline, ""):
                print(line.rstrip())
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def get_training_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
            result = self.execute_command("pgrep -f 'python.*sentiment_trading' || echo 'No processes'")
            
            processes = []
            if result['success'] and 'No processes' not in result['stdout']:
                pids = result['stdout'].strip().split('\n')
                processes = [{'pid': pid.strip()} for pid in pids if pid.strip()]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
            log_result = self.execute_command(f"ls -t {self.remote_path}/logs/training_*.log 2>/dev/null | head -1 | xargs tail -10 2>/dev/null || echo 'No logs'")
            latest_logs = log_result['stdout'].strip() if log_result['success'] else "No logs available"
            
            return {
                'processes': processes,
                'latest_logs': latest_logs,
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
            }
            
        except Exception as e:
            return {'error': str(e)}
    
    def download_results(self, local_dir: str = "./remote_results") -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path(local_dir).mkdir(exist_ok=True)
        
        try:
            # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            files_to_download = [
                "model_gpu_*.zip",
                "results_*.png", 
                "stats_*.txt",
                "training.log",
                "logs/training_*.log"
            ]
            
            success = True
            for pattern in files_to_download:
                # –ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                result = self.execute_command(f"find {self.remote_path} -name '{pattern}' -type f 2>/dev/null || true")
                
                if result['success'] and result['stdout'].strip():
                    files = result['stdout'].strip().split('\n')
                    
                    for remote_file in files:
                        if remote_file.strip():
                            local_file = Path(local_dir) / Path(remote_file).name
                            try:
                                logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {remote_file}")
                                self.scp_client.get(remote_file, str(local_file))
                                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {local_file}")
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {remote_file}: {e}")
                                success = False
            
            if success:
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞—á–∞–Ω—ã –≤ {local_dir}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üöÄ –ú–ï–ù–ï–î–ñ–ï–† –£–î–ê–õ–ï–ù–ù–û–ì–û GPU –û–ë–£–ß–ï–ù–ò–Ø (–° –ü–ê–†–û–õ–ï–ú)")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    server_ip = input("üñ•Ô∏è  IP —Å–µ—Ä–≤–µ—Ä–∞ [192.168.88.218]: ").strip() or "192.168.88.218"
    username = input("üë§ Username: ").strip()
    if not username:
        print("‚ùå Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        return
    
    remote_path = input(f"üìÅ –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å [/home/{username}/gpu_training]: ").strip()
    if not remote_path:
        remote_path = f"/home/{username}/gpu_training"
    
    print(f"\nüìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"   üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: {server_ip}")
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    print(f"   üìÅ –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å: {remote_path}")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = RemoteGPUTrainingManager(
        server_ip=server_ip,
        username=username,
        remote_path=remote_path
    )
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not manager.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
        while True:
            print("\nüìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
            print("   1 - –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è")
            print("   2 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GPU —Å—Ç–∞—Ç—É—Å")
            print("   3 - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–µ–¥—É")
            print("   4 - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã")
            print("   5 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            print("   6 - –¢–µ—Å—Ç GPU")
            print("   7 - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
            print("   8 - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è")
            print("   9 - –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è")
            print("   10 - –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            print("   0 - –í—ã—Ö–æ–¥")
            
            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if choice == "1":
                print("\nüöÄ –ü–û–õ–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò –ó–ê–ü–£–°–ö...")
                steps = [
                    ("üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU", lambda: manager.check_gpu_status()),
                    ("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã", manager.setup_environment),
                    ("üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤", manager.sync_files),
                    ("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", manager.install_dependencies),
                    ("üß™ –¢–µ—Å—Ç GPU", manager.test_gpu_setup),
                ]
                
                success = True
                for step_name, step_func in steps:
                    print(f"\n{step_name}...")
                    if not step_func():
                        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                        success = False
                        break
                
                if success:
                    print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è...")
                    result = manager.start_training()
                    if result['success']:
                        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                        print(f"üìã PID: {result['process_id']}")
                        print(f"üìÑ –õ–æ–≥: {result['log_file']}")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
                
            elif choice == "2":
                print("\nüéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU...")
                gpu_status = manager.check_gpu_status()
                print(json.dumps(gpu_status, indent=2, ensure_ascii=False))
                
            elif choice == "3":
                print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã...")
                if manager.setup_environment():
                    print("‚úÖ –°—Ä–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    
            elif choice == "4":
                print("\nüìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...")
                if manager.sync_files():
                    print("‚úÖ –§–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                    
            elif choice == "5":
                print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
                if manager.install_dependencies():
                    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    
            elif choice == "6":
                print("\nüß™ –¢–µ—Å—Ç GPU...")
                if manager.test_gpu_setup():
                    print("‚úÖ GPU —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
                else:
                    print("‚ùå GPU —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
                    
            elif choice == "7":
                print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è...")
                result = manager.start_training()
                if result['success']:
                    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                    print(f"üìã PID: {result['process_id']}")
                    print(f"üìÑ –õ–æ–≥: {result['log_file']}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
                    
            elif choice == "8":
                print("\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...")
                manager.monitor_training()
                
            elif choice == "9":
                print("\nüìã –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è...")
                status = manager.get_training_status()
                print(json.dumps(status, indent=2, ensure_ascii=False))
                
            elif choice == "10":
                print("\nüì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
                if manager.download_results():
                    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞—á–∞–Ω—ã")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                    
            elif choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    finally:
        manager.disconnect()


if __name__ == "__main__":
    main() 