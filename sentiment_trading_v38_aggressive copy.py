"""
üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V3.8 - –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
‚úÖ –£–±—Ä–∞–Ω—ã —Ñ–µ–π–∫–æ–≤—ã–µ sentiment –¥–∞–Ω–Ω—ã–µ
‚úÖ Feature Extractor —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é (nn.Flatten)
‚úÖ –£–ø—Ä–æ—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ - –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –¥–æ 150,000 —à–∞–≥–æ–≤
‚úÖ –°–Ω–∏–∂–µ–Ω—ã —Ä–∏—Å–∫–∏ - 8% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
import gymnasium as gym
from gymnasium import spaces
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple, Any
from datetime import datetime
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')


class SuperActiveConfig:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏"""
    
    # –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–û–ï —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    INITIAL_BALANCE = 10000
    ORDER_SIZE_RATIO = 0.08  # 8% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –æ—Ä–¥–µ—Ä - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ
    MAX_POSITIONS = 3
    STOP_LOSS = 0.02  # 2% —Å—Ç–æ–ø-–ª–æ—Å—Å
    TAKE_PROFIT = 0.04  # 4% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    WINDOW_SIZE = 50
    TOTAL_TIMESTEPS = 150000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
    LEARNING_RATE = 3e-4
    
    # –£–ü–†–û–©–ï–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    MIN_SIGNAL_STRENGTH = 0.15
    ENTROPY_COEF = 0.01


class SimpleDataLoader:
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    
    def __init__(self, data_path: str):
        self.data_path = data_path
    
    def load_and_prepare_data(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ main2.py"""
        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.data_path}...")
        df = pd.read_csv(self.data_path)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df['datetime'] = df['timestamp']
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['datetime'].min()} - {df['datetime'].max()}")
        print(f"üìà –¶–µ–Ω—ã: ${df['close'].min():.2f} - ${df['close'].max():.2f}")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(df)}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –≤ main2.py
        base_cols = ['open', 'high', 'low', 'close', 'volume']
        
        # EMA –∫–∞–∫ –≤ main2.py
        df['ema_fast'] = df['close'].ewm(span=12, adjust=False).mean()
        df['ema_slow'] = df['close'].ewm(span=26, adjust=False).mean()
        
        # RSI –∫–∞–∫ –≤ main2.py
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['returns'] = df['close'].pct_change()
        df['volatility'] = df['returns'].rolling(20).std()
        
        # MACD
        df['macd'] = df['ema_fast'] - df['ema_slow']
        df['macd_signal'] = df['macd'].ewm(span=9).mean()
        
        # Bollinger Bands
        df['bb_middle'] = df['close'].rolling(20).mean()
        bb_std = df['close'].rolling(20).std()
        df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
        df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
        df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'])
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (–º–µ–Ω–µ–µ —Å–ª—É—á–∞–π–Ω—ã–µ)
        df['momentum'] = df['close'] / df['close'].shift(10) - 1
        
        # –£–±–∏—Ä–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ sentiment –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        # rsi_normalized = (df['rsi'] - 50) / 50
        
        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
        # base_sentiment = (df['momentum'].fillna(0) * 0.6 + rsi_normalized.fillna(0) * 0.4)
        # base_sentiment = np.clip(base_sentiment, -1, 1)
        
        # df['sentiment_twitter'] = base_sentiment + np.random.normal(0, 0.02, len(df))
        # df['sentiment_reddit'] = base_sentiment + np.random.normal(0, 0.03, len(df))
        # df['sentiment_news'] = base_sentiment + np.random.normal(0, 0.025, len(df))
        
        # df['overall_sentiment'] = (
        #     df['sentiment_twitter'] * 0.5 +
        #     df['sentiment_reddit'] * 0.3 +
        #     df['sentiment_news'] * 0.2
        # )
        
        # –û—á–∏—Å—Ç–∫–∞ NaN –∫–∞–∫ –≤ main2.py
        df.dropna(inplace=True)
        df.reset_index(drop=True, inplace=True)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∫–∞–∫ –≤ main2.py
        cols_to_normalize = base_cols + ['ema_fast', 'ema_slow', 'rsi', 'macd', 'macd_signal', 
                                        'bb_position', 'volatility']
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
        for col in cols_to_normalize:
            if col in df.columns:
                df[col] = (df[col] - df[col].mean()) / df[col].std()
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        numeric_cols = [col for col in cols_to_normalize + ['returns', 'momentum'] if col in df.columns]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame —Ç–æ–ª—å–∫–æ —Å —á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        df_trading = pd.DataFrame()
        for col in numeric_cols:
            df_trading[col] = df[col]
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(df_trading)} –∑–∞–ø–∏—Å–µ–π, {len(numeric_cols)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        return df_trading


class ProfitableFeatureExtractor(BaseFeaturesExtractor):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π Feature Extractor, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é"""
    
    def __init__(self, observation_space: gym.Space, features_dim: int = 128):
        super().__init__(observation_space, features_dim)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞: window_size * n_features
        if hasattr(observation_space, 'shape') and observation_space.shape is not None:
            n_input_features = observation_space.shape[0] * observation_space.shape[1]
        else:
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ shape –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            n_input_features = 50 * 11  # window_size * –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∏–¥–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        self.net = nn.Sequential(
            nn.Flatten(),  # –†–∞—Å–ø–ª—é—â–∏–≤–∞–µ–º (window_size, n_features) -> (window_size * n_features)
            nn.Linear(n_input_features, 256),
            nn.ReLU(),
            nn.Dropout(0.1),
            nn.Linear(256, 128),
            nn.ReLU(),
            nn.Dropout(0.1),
            nn.Linear(128, features_dim),
            nn.ReLU()
        )
    
    def forward(self, observations: torch.Tensor) -> torch.Tensor:
        # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
        return self.net(observations)


class ProfitableTradingEnv(gym.Env):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–≥—Ä–∞–¥"""
    
    def __init__(self, df: pd.DataFrame, original_df: pd.DataFrame):
        super().__init__()
        
        self.df = df.reset_index(drop=True)  # –ß–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        self.original_df = original_df.reset_index(drop=True)  # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–µ–Ω
        self.window_size = SuperActiveConfig.WINDOW_SIZE
        self.initial_balance = SuperActiveConfig.INITIAL_BALANCE
        
        # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∫–∞–∫ –≤ main2.py
        self.action_space = spaces.Discrete(3)  # Hold, Buy, Sell
        self.observation_space = spaces.Box(
            low=-np.inf, high=np.inf,
            shape=(self.window_size, df.shape[1]),
            dtype=np.float32
        )
        
        self._reset_state()
    
    def _reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ –≤ main2.py"""
        self.balance = self.initial_balance
        self.entry_price = 0
        self.position = 0
        self.position_size = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π (0-3)
        self.current_step = self.window_size
        self.trades = []
        self.last_action = None
        self.order_size_usd = self.initial_balance * SuperActiveConfig.ORDER_SIZE_RATIO
        self.previous_balance = self.initial_balance  # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    
    def reset(self, seed=None, options=None):
        self._reset_state()
        return self._get_observation(), {}
    
    def _get_observation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∫–∞–∫ –≤ main2.py"""
        obs = self.df.iloc[self.current_step - self.window_size:self.current_step].values
        return obs.astype(np.float32)
    
    def _get_current_price(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        return self.original_df.iloc[self.current_step]['close']
    
    def _calculate_signal_strength(self) -> float:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –±–µ–∑ sentiment"""
        current_data = self.df.iloc[self.current_step]
        
        # RSI —Å–∏–≥–Ω–∞–ª
        rsi = current_data['rsi']
        rsi_signal = 0.5 if rsi < -0.5 else (-0.5 if rsi > 0.5 else 0)  # RSI –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω
        
        # EMA –∫—Ä–æ—Å—Å–æ–≤–µ—Ä
        ema_signal = 0.3 if current_data['ema_fast'] > current_data['ema_slow'] else -0.3
        
        # MACD
        macd_signal = 0.2 if current_data['macd'] > current_data['macd_signal'] else -0.2
        
        # Bollinger –ø–æ–∑–∏—Ü–∏—è
        bb_signal = 0.2 if current_data['bb_position'] < 0.2 else (-0.2 if current_data['bb_position'] > 0.8 else 0)
        
        # Momentum
        momentum_signal = np.clip(current_data['momentum'] * 0.3, -0.3, 0.3)
        
        total_signal = rsi_signal + ema_signal + macd_signal + bb_signal + momentum_signal
        return np.clip(total_signal, -1, 1)
    
    def step(self, action: int) -> Tuple[np.ndarray, float, bool, bool, Dict[str, Any]]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–≥—Ä–∞–¥"""
        reward = 0
        done = False
        
        current_price = self._get_current_price()
        signal_strength = self._calculate_signal_strength()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        prev_total_balance = self._get_total_balance()
        
        # === –ü–û–ö–£–ü–ö–ê ===
        if action == 1:
            if self.position_size < SuperActiveConfig.MAX_POSITIONS:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
                if signal_strength > SuperActiveConfig.MIN_SIGNAL_STRENGTH:
                    # –£—Å—Ä–µ–¥–Ω—è–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
                    self.entry_price = (
                        (self.entry_price * self.position_size + current_price)
                        / (self.position_size + 1)
                    ) if self.position_size > 0 else current_price
                    
                    self.position_size += 1
                    self.position = 1
                else:
                    reward -= 0.01  # –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø–ª–æ—Ö–æ–π —Å–∏–≥–Ω–∞–ª
            else:
                reward -= 0.01  # –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–π
        
        # === –ü–†–û–î–ê–ñ–ê ===
        elif action == 2:
            if self.position_size > 0:
                profit_per_coin = current_price - self.entry_price
                profit_total = (
                    profit_per_coin
                    * self.order_size_usd
                    * self.position_size
                    / self.entry_price
                )
                
                self.balance += profit_total
                self.trades.append(profit_total)
                self.position_size = 0
                self.position = 0
                self.entry_price = 0
            else:
                reward -= 0.01  # –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–¥–∞–∂—É –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏
        
        # === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –°–¢–û–ü-–õ–û–°–° –ò –¢–ï–ô–ö-–ü–†–û–§–ò–¢ ===
        if self.position_size > 0 and self.entry_price > 0:
            price_change = (current_price - self.entry_price) / self.entry_price
            if price_change <= -SuperActiveConfig.STOP_LOSS or price_change >= SuperActiveConfig.TAKE_PROFIT:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
                profit_total = (
                    (current_price - self.entry_price)
                    * self.order_size_usd
                    * self.position_size
                    / self.entry_price
                )
                self.balance += profit_total
                self.trades.append(profit_total)
                self.position_size = 0
                self.position = 0
                self.entry_price = 0
        
        # === –û–°–ù–û–í–ù–ê–Ø –ù–ê–ì–†–ê–î–ê: –ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê ===
        current_total_balance = self._get_total_balance()
        balance_change = current_total_balance - prev_total_balance
        reward += balance_change * 0.01  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        
        self.current_step += 1
        
        # === –ó–ê–í–ï–†–®–ï–ù–ò–ï –≠–ü–ò–ó–û–î–ê ===
        if self.current_step >= len(self.df) - 1:
            done = True
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if self.position_size > 0:
                final_profit = (
                    (current_price - self.entry_price)
                    * self.order_size_usd
                    * self.position_size
                    / self.entry_price
                )
                self.balance += final_profit
                self.trades.append(final_profit)
                self.position_size = 0
                self.position = 0
                self.entry_price = 0
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            total_profit = self.balance - self.initial_balance
            reward += total_profit * 0.001  # –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –∏—Ç–æ–≥–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å
        
        info = {
            'balance': self.balance,
            'position_size': self.position_size,
            'entry_price': self.entry_price,
            'current_price': current_price,
            'signal_strength': signal_strength,
            'total_trades': len(self.trades),
            'unrealized_pnl': 0 if self.position_size == 0 else (current_price - self.entry_price) * self.order_size_usd * self.position_size / self.entry_price
        }
        
        return self._get_observation(), reward, done, False, info
    
    def _get_total_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å —É—á–µ—Ç–æ–º –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏"""
        total_balance = self.balance
        if self.position_size > 0 and self.entry_price > 0:
            current_price = self._get_current_price()
            unrealized = (
                (current_price - self.entry_price)
                * self.order_size_usd
                * self.position_size
                / self.entry_price
            )
            total_balance += unrealized
        return total_balance


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V3.8 - –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–´ –í–°–ï –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´")
    print("=" * 75)
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ó–ö–ê –ò –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    data_loader = SimpleDataLoader("data/BTC_5_96w.csv")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª —á—Ç–æ –∏ main2.py
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    original_df = pd.read_csv("data/BTC_5_96w.csv")
    original_df['timestamp'] = pd.to_datetime(original_df['timestamp'], unit='ms')
    
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    df = data_loader.load_and_prepare_data()
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüéÆ –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –°–¢–ê–ë–ò–õ–¨–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("-" * 50)
    env = ProfitableTradingEnv(df, original_df)
    vec_env = DummyVecEnv([lambda: env])
    print(f"‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ. –ë–∞–ª–∞–Ω—Å: ${SuperActiveConfig.INITIAL_BALANCE}")
    print(f"‚úÖ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {SuperActiveConfig.ORDER_SIZE_RATIO*100:.1f}% –∫–∞–ø–∏—Ç–∞–ª–∞")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\nüß† –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –ú–û–î–ï–õ–ò")
    print("-" * 50)
    
    policy_kwargs = dict(
        features_extractor_class=ProfitableFeatureExtractor,
        features_extractor_kwargs=dict(features_dim=128),
        net_arch=[128, 64]
    )
    
    model = PPO(
        'MlpPolicy',
        vec_env,
        learning_rate=SuperActiveConfig.LEARNING_RATE,
        n_steps=2048,
        batch_size=64,
        n_epochs=10,
        gamma=0.99,
        gae_lambda=0.95,
        clip_range=0.2,
        ent_coef=SuperActiveConfig.ENTROPY_COEF,
        vf_coef=0.5,
        max_grad_norm=0.5,
        policy_kwargs=policy_kwargs,
        verbose=1,
        device="cpu"
    )
    
    print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    print("‚úÖ Feature Extractor —Ç–µ–ø–µ—Ä—å –≤–∏–¥–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞ 50 —à–∞–≥–æ–≤")
    
    # 4. –û–±—É—á–µ–Ω–∏–µ
    print("\nüéì –≠–¢–ê–ü 4: –†–ê–°–®–ò–†–ï–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("-" * 50)
    print(f"‚è±Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–∞ {SuperActiveConfig.TOTAL_TIMESTEPS:,} —à–∞–≥–æ–≤...")
    model.learn(total_timesteps=SuperActiveConfig.TOTAL_TIMESTEPS)
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüí∞ –≠–¢–ê–ü 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("-" * 50)
    
    test_env = ProfitableTradingEnv(df, original_df)
    obs, _ = test_env.reset()
    
    balance_history = []
    price_history = []
    action_history = []
    trade_log = []
    
    print("üíº –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π...")
    
    step_count = 0
    while step_count < 5000:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        action, _ = model.predict(obs, deterministic=True)
        obs, reward, done, truncated, info = test_env.step(int(action))
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é
        total_balance = test_env._get_total_balance()
        
        balance_history.append(total_balance)
        price_history.append(test_env._get_current_price())
        action_history.append(int(action))
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫
        if len(test_env.trades) > len(trade_log):
            new_trades = test_env.trades[len(trade_log):]
            for trade in new_trades:
                trade_log.append(trade)
                profit_str = f"+${trade:.2f}" if trade > 0 else f"${trade:.2f}"
                signal_strength = test_env._calculate_signal_strength()
                print(f"üí∏ –°–¥–µ–ª–∫–∞: {profit_str}, –ü–æ–∑–∏—Ü–∏–π: {test_env.position_size}, –°–∏–≥–Ω–∞–ª: {signal_strength:.2f}")
        
        step_count += 1
        if done:
            break
    
    # 6. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –≠–¢–ê–ü 6: –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("-" * 50)
    
    if balance_history:
        initial_balance = SuperActiveConfig.INITIAL_BALANCE
        final_balance = balance_history[-1]
        total_return = (final_balance - initial_balance) / initial_balance * 100
        
        total_trades = len(trade_log)
        profitable_trades = len([t for t in trade_log if t > 0])
        win_rate = (profitable_trades / max(total_trades, 1)) * 100
        
        # –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
        peak = initial_balance
        max_drawdown = 0
        for balance in balance_history:
            if balance > peak:
                peak = balance
            drawdown = (peak - balance) / peak
            max_drawdown = max(max_drawdown, drawdown)
        
        # Buy & Hold —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        start_price = price_history[0]
        end_price = price_history[-1]
        bnh_return = (end_price - start_price) / start_price * 100
        
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
        print("=" * 60)
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_balance:,.2f}")
        print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${final_balance:,.2f}")
        print(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}%")
        print(f"üìä Buy & Hold: {bnh_return:+.2f}%")
        print(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades} ({win_rate:.1f}%)")
        print(f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown*100:.2f}%")
        
        if trade_log:
            avg_profit = np.mean(trade_log)
            best_trade = max(trade_log)
            worst_trade = min(trade_log)
            print(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: ${avg_profit:.2f}")
            print(f"üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${best_trade:.2f}")
            print(f"üòû –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${worst_trade:.2f}")
        
        print("\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–ï")
        print("=" * 50)
        
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ù–ï–°–ï–ù–´:")
        print("  ‚Ä¢ –£–±—Ä–∞–Ω—ã —Ñ–µ–π–∫–æ–≤—ã–µ sentiment –¥–∞–Ω–Ω—ã–µ")
        print("  ‚Ä¢ Feature Extractor –≤–∏–¥–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é")
        print("  ‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥")
        print("  ‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è")
        print("  ‚Ä¢ –°–Ω–∏–∂–µ–Ω—ã —Ä–∏—Å–∫–∏ –Ω–∞ —Å–¥–µ–ª–∫—É")
        
        if total_return > 5 and total_trades > 0:
            print("üü¢ –û–¢–õ–ò–ß–ù–û! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å!")
            print(f"üí∞ –ü—Ä–∏–±—ã–ª—å: ${final_balance - initial_balance:,.2f}")
        elif total_return > 0:
            print("üü° –•–û–†–û–®–û! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∞—è –ø—Ä–∏–±—ã–ª—å")
        elif total_return > -5:
            print("üî∂ –ù–ï–ô–¢–†–ê–õ–¨–ù–û! –ë–ª–∏–∑–∫–æ –∫ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏")
        else:
            print("üî¥ –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ò")
        
        print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}%")
        print("‚ú® –ê–Ω–∞–ª–∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


if __name__ == "__main__":
    main() 