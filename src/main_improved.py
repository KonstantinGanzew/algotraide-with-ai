"""
üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì–ê V2.2
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ + –±–∞–∑–æ–≤—ã–π –∞–Ω—Å–∞–º–±–ª—å

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò V2.2:
1. 50+ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
2. –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Ensemble –º–æ–¥–µ–ª–µ–π 
3. –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π

–ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
- core/: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ ML –º–æ–¥–µ–ª–∏
- trading/: —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- utils/: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö + —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
- analysis/: –∞–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
- integrations/: –±—É–¥—É—â–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (Binance, Telegram)
"""

import sys
import logging
from pathlib import Path
import numpy as np
from stable_baselines3.common.vec_env import DummyVecEnv
import warnings
import torch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

try:
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–∫ –º–æ–¥—É–ª–∏
    from core.config import (
        ActiveTradingConfig as TradingConfig, ActiveRewardConfig as RewardConfig, MLConfig, DataConfig, 
        SystemConfig, validate_config
    )
    from core.models import (
        create_improved_model, train_improved_model, 
        SmartEarlyStoppingCallback, setup_device
    )
    from trading.environment import ImprovedTradingEnv
    from utils.data_processor import DataProcessor
    # –ù–û–í–û–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    try:
        from utils.technical_indicators import add_advanced_features
        INDICATORS_AVAILABLE = True
    except ImportError:
        INDICATORS_AVAILABLE = False
        logger = logging.getLogger(__name__)
        logger.warning("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
    from analysis.performance_analyzer import PerformanceAnalyzer
except ImportError:
    # Fallback –Ω–∞ –ø—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    sys.path.append('.')
    from src.core.config import (
        ActiveTradingConfig as TradingConfig, ActiveRewardConfig as RewardConfig, MLConfig, DataConfig, 
        SystemConfig, validate_config
    )
    from src.core.models import (
        create_improved_model, train_improved_model, 
        SmartEarlyStoppingCallback, setup_device
    )
    from src.trading.environment import ImprovedTradingEnv
    from src.utils.data_processor import DataProcessor
    # –ù–û–í–û–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤  
    try:
        from src.utils.technical_indicators import add_advanced_features
        INDICATORS_AVAILABLE = True
    except ImportError:
        INDICATORS_AVAILABLE = False
        logger = logging.getLogger(__name__)
        logger.warning("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
    from src.analysis.performance_analyzer import PerformanceAnalyzer


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(
        level=getattr(logging, SystemConfig.LOG_LEVEL),
        format=log_format,
        handlers=[
            logging.StreamHandler(),  # –ö–æ–Ω—Å–æ–ª—å
        ]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if SystemConfig.LOG_TO_FILE:
        file_handler = logging.FileHandler(SystemConfig.LOG_FILE)
        file_handler.setFormatter(logging.Formatter(log_format))
        logging.getLogger().addHandler(file_handler)
    
    # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
    warnings.filterwarnings('ignore', category=UserWarning)
    warnings.filterwarnings('ignore', category=FutureWarning)


def validate_system():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    logger = logging.getLogger(__name__)
    
    logger.info("üîß –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_warnings = validate_config()
    if config_warnings:
        logger.warning("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        for warning in config_warnings:
            logger.warning(f"   {warning}")
        logger.info("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_path = Path(DataConfig.DATA_FOLDER) / DataConfig.DATA_FILE
    if not data_path.exists():
        logger.error(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_path}")
        sys.exit(1)
    
    logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")


def enhance_data_with_indicators(df, data_processor):
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    logger = logging.getLogger(__name__)
    
    logger.info("üìä –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    if not globals().get('INDICATORS_AVAILABLE', False):
        logger.warning("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
        logger.info(f"   üìà –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} –∑–∞–ø–∏—Å–µ–π, {len(df.columns)-1} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        return df
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é add_advanced_features –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    logger.info("   üîÑ –†–∞—Å—á—ë—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    df_enhanced = add_advanced_features(df)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–≤—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
    original_features = ['open', 'high', 'low', 'close', 'volume']
    new_features = [col for col in df_enhanced.columns if col not in original_features and col != 'timestamp']
    
    logger.info(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_features)} –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    logger.info(f"   üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(df_enhanced.columns) - 1}")  # -1 –¥–ª—è timestamp
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π (–≤–∞–∂–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
    before_nan = df_enhanced.isnull().sum().sum()
    df_enhanced = df_enhanced.fillna(method='ffill').fillna(method='bfill')
    after_nan = df_enhanced.isnull().sum().sum()
    
    if before_nan > 0:
        logger.info(f"   üîß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {before_nan} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    
    # –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    key_indicators = ['sma_20', 'ema_20', 'rsi_14', 'macd', 'bb_upper', 'atr_14', 'volume_sma']
    available_key = [ind for ind in key_indicators if ind in df_enhanced.columns]
    logger.info(f"   üéØ –ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(available_key)}")
    
    return df_enhanced


def diagnose_model_behavior(model, test_env, num_steps=1000):
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"""
    logger = logging.getLogger(__name__)
    
    logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–í–ï–î–ï–ù–ò–Ø –ú–û–î–ï–õ–ò")
    logger.info("-" * 50)
    
    obs, _ = test_env.reset()
    action_counts = {0: 0, 1: 0, 2: 0}  # Hold, Buy, Sell
    action_probs_history = []
    price_history = []
    model_confidence = []
    
    for step in range(min(num_steps, len(test_env.df) - test_env.window_size - 10)):
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        action, _ = model.predict(obs, deterministic=False)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π
                features = model.policy.extract_features(obs.reshape(1, *obs.shape))
                action_logits = model.policy.action_net(features)
                action_probs = torch.nn.functional.softmax(action_logits, dim=1)
                action_probs_np = action_probs.detach().cpu().numpy()[0]
                action_probs_history.append(action_probs_np)
                
                # –ò–∑–º–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                confidence = np.max(action_probs_np)
                model_confidence.append(confidence)
                
            except Exception as e:
                # Fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                action_probs_history.append([0.33, 0.33, 0.34])
                model_confidence.append(0.5)
        
        action_counts[int(action)] += 1
        
        # –î–µ–ª–∞–µ–º —à–∞–≥
        obs, reward, done, truncated, info = test_env.step(action)
        price_history.append(info.get('current_price', 0))
        
        if done or truncated:
            obs, _ = test_env.reset()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_steps = sum(action_counts.values())
    action_percentages = {k: (v/total_steps)*100 for k, v in action_counts.items()}
    avg_probs = np.mean(action_probs_history, axis=0)
    avg_confidence = np.mean(model_confidence)
    
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    logger.info(f"   –í—Å–µ–≥–æ —à–∞–≥–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_steps}")
    logger.info(f"   –î–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ–ª–∏:")
    logger.info(f"     Hold (0): {action_counts[0]} ({action_percentages[0]:.1f}%)")
    logger.info(f"     Buy (1):  {action_counts[1]} ({action_percentages[1]:.1f}%)")
    logger.info(f"     Sell (2): {action_counts[2]} ({action_percentages[2]:.1f}%)")
    logger.info(f"   –°—Ä–µ–¥–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π:")
    logger.info(f"     P(Hold): {avg_probs[0]:.3f}")
    logger.info(f"     P(Buy):  {avg_probs[1]:.3f}") 
    logger.info(f"     P(Sell): {avg_probs[2]:.3f}")
    logger.info(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {avg_confidence:.3f}")
    
    # –î–∏–∞–≥–Ω–æ–∑ –ø—Ä–æ–±–ª–µ–º
    problems = []
    if action_percentages[0] > 95:
        problems.append("üö® –ö–†–ò–¢–ò–ß–ù–û: –ú–æ–¥–µ–ª—å –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç Hold")
    if action_percentages[1] < 2:
        problems.append("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —Ä–µ–¥–∫–æ –ø–æ–∫—É–ø–∞–µ—Ç")
    if action_percentages[2] < 2:
        problems.append("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —Ä–µ–¥–∫–æ –ø—Ä–æ–¥–∞–µ—Ç")
    if avg_confidence < 0.4:
        problems.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
    if avg_probs[0] > 0.9:
        problems.append("üö® –ú–æ–¥–µ–ª—å —Å–∏–ª—å–Ω–æ —Å–º–µ—â–µ–Ω–∞ –∫ Hold")
    
    if problems:
        logger.warning("üîç –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        for problem in problems:
            logger.warning(f"   {problem}")
    else:
        logger.info("‚úÖ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
    
    return {
        'action_counts': action_counts,
        'action_percentages': action_percentages,
        'avg_probs': avg_probs,
        'avg_confidence': avg_confidence,
        'problems': problems
    }


def test_random_policy(test_env, num_steps=1000):
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¢–µ—Å—Ç —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    logger = logging.getLogger(__name__)
    
    logger.info("üé≤ –¢–ï–°–¢ –°–õ–£–ß–ê–ô–ù–û–ô –ü–û–õ–ò–¢–ò–ö–ò (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)")
    logger.info("-" * 50)
    
    obs, _ = test_env.reset()
    initial_balance = test_env.initial_balance
    
    for step in range(min(num_steps, len(test_env.df) - test_env.window_size - 10)):
        # –°–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        action = np.random.choice([0, 1, 2])
        obs, reward, done, truncated, info = test_env.step(action)
        
        if done or truncated:
            obs, _ = test_env.reset()
    
    final_stats = test_env.get_trading_stats()
    portfolio_value = info.get('portfolio_value', initial_balance)
    total_return = (portfolio_value - initial_balance) / initial_balance
    
    logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–õ–£–ß–ê–ô–ù–û–ô –ü–û–õ–ò–¢–ò–ö–ò:")
    logger.info(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return*100:+.2f}%")
    logger.info(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {final_stats.get('total_trades', 0)}")
    logger.info(f"   –í–∏–Ω—Ä–µ–π—Ç: {final_stats.get('win_rate', 0):.1f}%")
    
    return total_return, final_stats.get('total_trades', 0)


def test_model_performance(model, test_env, data_processor):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    logger = logging.getLogger(__name__)
    
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    
    # –ù–û–í–û–ï: –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    diagnosis = diagnose_model_behavior(model, test_env, num_steps=200)
    
    # –ù–û–í–û–ï: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    random_return, random_trades = test_random_policy(test_env, num_steps=200)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    obs, _ = test_env.reset()
    results = {
        'balance_history': [],
        'prices': [],
        'actions': [],
        'trades': [],
        'drawdowns': [],
        'positions': [],
        'trade_details': [],
        'commissions_paid': []
    }
    
    step_count = 0
    max_steps = min(1000, len(test_env.df) - test_env.window_size - 10)  # –ë–´–°–¢–†–´–ô –¢–ï–°–¢: –º–∞–∫—Å–∏–º—É–º 1000 —à–∞–≥–æ–≤
    total_commissions = 0.0
    
    logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º {max_steps} —à–∞–≥–æ–≤")
    logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {test_env.initial_balance:,.2f} USDT")
    
    try:
        while step_count < max_steps:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            action, _ = model.predict(obs, deterministic=True)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
            obs, reward, done, truncated, info = test_env.step(action)
            step_count += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if step_count >= len(test_env.df) - test_env.window_size:
                break
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            current_price = info.get('current_price', 0)
            portfolio_value = info.get('portfolio_value', 0)
            
            results['balance_history'].append(portfolio_value)
            results['prices'].append(current_price)
            results['actions'].append(int(action))
            results['drawdowns'].append(info.get('max_drawdown', 0))
            results['positions'].append(info.get('btc_amount', 0))
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
            if 'trade_info' in info and info['trade_info'].get('executed'):
                commission = info['trade_info'].get('commission', 0)
                if commission > 0:
                    total_commissions += commission
                    results['commissions_paid'].append(commission)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
                results['trade_details'].append({
                    'step': step_count,
                    'action': info['trade_info']['action'],
                    'price': current_price,
                    'commission': commission
                })
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
            if step_count % 200 == 0:
                logger.info(f"   üìà –®–∞–≥ {step_count:,}/{max_steps:,} | "
                          f"–ë–∞–ª–∞–Ω—Å: {portfolio_value:,.2f} | "
                          f"–ö–æ–º–∏—Å—Å–∏–∏: {total_commissions:.2f}")
            
            # –°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–∞
            if done or truncated:
                obs, _ = test_env.reset()
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    results['trades'] = test_env.trades
    results['total_commissions_sum'] = [total_commissions]  # –•—Ä–∞–Ω–∏–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    final_stats = test_env.get_trading_stats()
    
    # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    results['diagnosis_data'] = [diagnosis]  # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
    results['random_baseline_data'] = [{'return': random_return, 'trades': random_trades}]  # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
    
    logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
    logger.info(f"   üìä –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {step_count:,}")
    logger.info(f"   üíº –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {final_stats.get('total_trades', 0)}")
    logger.info(f"   üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {total_commissions:.2f} USDT")
    logger.info(f"   üéØ –í–∏–Ω—Ä–µ–π—Ç: {final_stats.get('win_rate', 0):.1f}%")
    logger.info(f"   üé≤ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π:")
    logger.info(f"      –°–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {random_return*100:+.2f}% ({random_trades} —Å–¥–µ–ª–æ–∫)")
    
    return results


def create_simple_trading_strategy(test_env, num_steps=1000):
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger = logging.getLogger(__name__)
    
    logger.info("üîß –¢–ï–°–¢ –ü–†–û–°–¢–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è)")
    logger.info("-" * 50)
    
    obs, _ = test_env.reset()
    initial_balance = test_env.initial_balance
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–∫—É–ø–∞–µ–º –∫–∞–∂–¥—ã–µ 50 —à–∞–≥–æ–≤, –ø—Ä–æ–¥–∞–µ–º –∫–∞–∂–¥—ã–µ 100
    buy_interval = 50
    sell_interval = 100
    
    for step in range(min(num_steps, len(test_env.df) - test_env.window_size - 10)):
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
        if step % buy_interval == 0 and test_env.btc_amount == 0:
            action = 1  # Buy
        elif step % sell_interval == 0 and test_env.btc_amount > 0:
            action = 2  # Sell
        else:
            action = 0  # Hold
        
        obs, reward, done, truncated, info = test_env.step(action)
        
        if done or truncated:
            obs, _ = test_env.reset()
    
    final_stats = test_env.get_trading_stats()
    portfolio_value = info.get('portfolio_value', initial_balance)
    total_return = (portfolio_value - initial_balance) / initial_balance
    
    logger.info(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–°–¢–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò:")
    logger.info(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return*100:+.2f}%")
    logger.info(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {final_stats.get('total_trades', 0)}")
    logger.info(f"   –í–∏–Ω—Ä–µ–π—Ç: {final_stats.get('win_rate', 0):.1f}%")
    
    if final_stats.get('total_trades', 0) == 0:
        logger.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–∂–µ –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–¥–µ–ª–æ–∫!")
        logger.error("   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∞–º–æ–º —Ç–æ—Ä–≥–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    
    return total_return, final_stats.get('total_trades', 0)


def create_ensemble_models(train_env, data_processor, model_count=3):
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø V2.2: –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –º–æ–¥–µ–ª–µ–π"""
    logger = logging.getLogger(__name__)
    
    logger.info("ü§ñ –°–û–ó–î–ê–ù–ò–ï –ê–ù–°–ê–ú–ë–õ–Ø –ú–û–î–ï–õ–ï–ô")
    logger.info("--------------------------------------------------")
    
    models = []
    model_configs = [
        {"name": "Conservative", "lr": 0.0003, "steps": 12000},
        {"name": "Balanced", "lr": 0.0005, "steps": 16384}, 
        {"name": "Aggressive", "lr": 0.0008, "steps": 20000}
    ]
    
    for i, config in enumerate(model_configs[:model_count]):
        logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {i+1}/{model_count}: {config['name']}")
        
        model = create_improved_model(
            observation_space=train_env.observation_space,
            action_space=train_env.action_space,
            learning_rate=config['lr']
        )
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        logger.info(f"   üéì –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {config['name']} ({config['steps']} —à–∞–≥–æ–≤)...")
        model = train_improved_model(
            model=model,
            env=train_env,
            total_timesteps=config['steps'],
            early_stopping=True,
            save_path=f"models/ensemble_model_{i+1}_{config['name'].lower()}",
            verbose=0
        )
        
        models.append({
            'model': model,
            'name': config['name'],
            'config': config
        })
        
        logger.info(f"   ‚úÖ –ú–æ–¥–µ–ª—å {config['name']} –≥–æ—Ç–æ–≤–∞")
    
    logger.info(f"üéâ –ê–Ω—Å–∞–º–±–ª—å –∏–∑ {len(models)} –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    return models


def test_ensemble_models(models, test_env, steps=1000):
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø V2.2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –º–æ–¥–µ–ª–µ–π"""
    logger = logging.getLogger(__name__)
    
    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–°–ê–ú–ë–õ–Ø –ú–û–î–ï–õ–ï–ô") 
    logger.info("--------------------------------------------------")
    
    results = []
    
    for model_info in models:
        model = model_info['model']
        name = model_info['name']
        
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {name}")
        
        # –°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è
        obs = test_env.reset()
        total_reward = 0
        actions_taken = []
        
        for step in range(min(steps, len(test_env.data) - test_env.window_size - 1)):
            action, _ = model.predict(obs, deterministic=True)
            obs, reward, done, info = test_env.step(action)
            total_reward += reward
            actions_taken.append(action)
            
            if done:
                break
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏
        final_balance = test_env.balance + test_env.position * test_env.current_price
        returns = (final_balance / test_env.initial_balance - 1) * 100
        
        result = {
            'name': name,
            'total_reward': total_reward,
            'final_balance': final_balance,
            'returns': returns,
            'steps_taken': step + 1,
            'actions': actions_taken,
            'config': model_info['config']
        }
        
        results.append(result)
        
        logger.info(f"   üìä {name}: {returns:+.2f}% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, –±–∞–ª–∞–Ω—Å: ${final_balance:.2f}")
    
    return results


def run_trading_simulation(model, env, max_steps=1000):
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    env.reset()
    total_steps = 0
    total_trades = 0
    
    for step in range(min(max_steps, len(env.data) - env.window_size - 1)):
        obs = env._get_observation()
        action, _ = model.predict(obs, deterministic=True)
        
        _, _, done, info = env.step(action)
        total_steps += 1
        
        if info and 'trade_executed' in info and info['trade_executed']:
            total_trades += 1
        
        if done:
            break
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    final_balance = env.balance + env.position * env.current_price
    returns = (final_balance / env.initial_balance - 1) * 100
    
    return returns, total_trades


def get_ensemble_consensus(models, observation):
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø V2.2: –ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è"""
    predictions = []
    
    for model_info in models:
        action, _ = model_info['model'].predict(observation, deterministic=True)
        predictions.append(action)
    
    # –ü—Ä–æ—Å—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º
    from collections import Counter
    consensus = Counter(predictions).most_common(1)[0][0]
    
    # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ (–ø—Ä–æ—Ü–µ–Ω—Ç –º–æ–¥–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–∏–≤—à–∏—Ö—Å—è)
    confidence = predictions.count(consensus) / len(predictions)
    
    return consensus, confidence


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã V2.2"""
    logger = logging.getLogger(__name__)
    
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 'single' –∏–ª–∏ 'ensemble'
    MODE = 'single'  # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞
    
    logger.info("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì–ê V2.2")
    if MODE == 'ensemble':
        logger.info("ü§ñ –†–ï–ñ–ò–ú: Ensemble –º–æ–¥–µ–ª–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏")
    else:
        logger.info("üî• –†–ï–ñ–ò–ú: –û–¥–∏–Ω–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏")
    logger.info("============================================================================")
    
    try:
        # –≠–¢–ê–ü 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        logger.info("üîß –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        config_warnings = validate_config()
        if config_warnings:
            logger.warning("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
            for warning in config_warnings:
                logger.warning(f"   {warning}")
            logger.info("üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        device = setup_device()
        
        # –≠–¢–ê–ü 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        logger.info("")
        logger.info("üìä –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –° –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ú–ò –ò–ù–î–ò–ö–ê–¢–û–†–ê–ú–ò")
        logger.info("--------------------------------------------------")
        
        data_processor = DataProcessor()
        file_path = DataConfig.DATA_FOLDER + DataConfig.DATA_FILE
        df = data_processor.prepare_data(file_path)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        logger.info(f"üìà –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} –∑–∞–ø–∏—Å–µ–π, {len(df.columns)-1} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        df = enhance_data_with_indicators(df, data_processor)
        logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} –∑–∞–ø–∏—Å–µ–π, {len(df.columns)-1} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏–π
        logger.info("")
        logger.info("üéÆ –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –¢–û–†–ì–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø") 
        logger.info("--------------------------------------------------")
        
        train_data, test_data = data_processor.split_data_for_walk_forward(df, 0.8)
        
        train_env = ImprovedTradingEnv(train_data, window_size=DataConfig.WINDOW_SIZE)
        test_env = ImprovedTradingEnv(test_data, window_size=DataConfig.WINDOW_SIZE, validation_mode=True)
        
        logger.info(f"‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã:")
        logger.info(f"   üéì –û–±—É—á–µ–Ω–∏–µ: {len(train_data)} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(test_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –≠–¢–ê–ü 3: –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
        logger.info("")
        if MODE == 'ensemble':
            logger.info("ü§ñ –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –ò –û–ë–£–ß–ï–ù–ò–ï –ê–ù–°–ê–ú–ë–õ–Ø")
            logger.info("--------------------------------------------------")
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π (—É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –¥–µ–º–æ)
            ensemble_configs = [
                {"name": "Conservative", "lr": 0.0003, "steps": 8000},
                {"name": "Balanced", "lr": 0.0005, "steps": 8000}
            ]
            
            models = []
            for i, config in enumerate(ensemble_configs):
                logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {i+1}/{len(ensemble_configs)}: {config['name']}")
                
                # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                vec_env = DummyVecEnv([lambda: train_env])
                
                # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                model = create_improved_model(vec_env)
                model = train_improved_model(
                    model, 
                    vec_env, 
                    total_timesteps=config['steps'],
                    save_path=f"models/ensemble_{config['name'].lower()}"
                )
                
                models.append({
                    'model': model,
                    'name': config['name'],
                    'config': config
                })
                
                logger.info(f"   ‚úÖ –ú–æ–¥–µ–ª—å {config['name']} –≥–æ—Ç–æ–≤–∞")
            
            logger.info(f"üéâ –ê–Ω—Å–∞–º–±–ª—å –∏–∑ {len(models)} –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω!")
            
        else:
            logger.info("üß† –≠–¢–ê–ü 3: –û–ë–£–ß–ï–ù–ò–ï –û–î–ò–ù–û–ß–ù–û–ô –ú–û–î–ï–õ–ò")
            logger.info("--------------------------------------------------")
            
            vec_env = DummyVecEnv([lambda: train_env])
            model = create_improved_model(vec_env)
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é
            model.learn(total_timesteps=MLConfig.TOTAL_TIMESTEPS)
            
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")
        
        # –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info("")
        logger.info("üß™ –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –ê–ù–ê–õ–ò–ó")
        logger.info("--------------------------------------------------")
        
        if MODE == 'ensemble':
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è
            logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –≤ –∞–Ω—Å–∞–º–±–ª–µ...")
            
            ensemble_results = []
            for model_info in models:
                test_env.reset()
                returns, trades = run_trading_simulation(model_info['model'], test_env, max_steps=1000)
                
                ensemble_results.append({
                    'name': model_info['name'],
                    'returns': returns,
                    'trades': trades
                })
                
                logger.info(f"   üìä {model_info['name']}: {returns:+.2f}% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, {trades} —Å–¥–µ–ª–æ–∫")
            
            # –ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            logger.info("")
            logger.info("ü§ù –ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è...")
            test_env.reset()
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
            best_model = max(ensemble_results, key=lambda x: x['returns'])
            best_model_obj = next(m for m in models if m['name'] == best_model['name'])['model']
            
            consensus_returns, consensus_trades = run_trading_simulation(best_model_obj, test_env, max_steps=1000)
            
            logger.info(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model['name']}")
            logger.info(f"üéØ –ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {consensus_returns:+.2f}% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, {consensus_trades} —Å–¥–µ–ª–æ–∫")
            
        else:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –º–æ–¥–µ–ª–∏
            returns, trades = run_trading_simulation(model, test_env)
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {returns:+.2f}% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, {trades} —Å–¥–µ–ª–æ–∫")
        
        # –≠–¢–ê–ü 5: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        logger.info("")
        logger.info("üìä –≠–¢–ê–ü 5: –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        logger.info("--------------------------------------------------")
        
        analyzer = PerformanceAnalyzer()
        if MODE == 'ensemble':
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –∏–∑ –∞–Ω—Å–∞–º–±–ª—è
            final_model = best_model_obj
            final_returns = consensus_returns
            mode_description = f"Ensemble (–ª—É—á—à–∞—è: {best_model['name']})"
        else:
            final_model = model
            final_returns = returns  
            mode_description = "–û–¥–∏–Ω–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å"
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        test_env.reset()
        results = analyzer.analyze_model_performance(final_model, test_env)
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        logger.info("")
        logger.info("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï V2.2")
        logger.info("==================================================")
        logger.info(f"ü§ñ –†–µ–∂–∏–º: {mode_description}")
        logger.info(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_returns:+.2f}%")
        logger.info(f"üìà –ë–∞–ª–∞–Ω—Å: {test_env.initial_balance:,} ‚Üí {test_env.initial_balance * (1 + final_returns/100):,.2f} USDT")
        
        if MODE == 'ensemble':
            logger.info(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≤ –∞–Ω—Å–∞–º–±–ª–µ: {len(models)}")
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
            for result in ensemble_results:
                logger.info(f"   {result['name']}: {result['returns']:+.2f}% ({result['trades']} —Å–¥–µ–ª–æ–∫)")
        
        if final_returns > 0:
            logger.info("üü¢ –û–¶–ï–ù–ö–ê: –ü—Ä–∏–±—ã–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è!")
        else:
            logger.info("üî¥ –û–¶–ï–ù–ö–ê: –¢—Ä–µ–±—É–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        logger.info("")
        logger.info("üí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        if MODE == 'single':
            logger.info("   üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º 'ensemble' –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        logger.info("   üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        logger.info("   üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞—à–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        logger.info("")
        logger.info("üéâ –ê–ù–ê–õ–ò–ó V2.2 –ó–ê–í–ï–†–®–ï–ù! –ü–æ–¥—Ä–æ–±–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        raise


if __name__ == "__main__":
    main() 