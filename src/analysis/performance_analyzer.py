"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤

–£–õ–£–ß–®–ï–ù–ò–Ø:
1. –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏  
3. –†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑
4. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Dict, Any, List, Optional
import logging
from pathlib import Path

from ..core.config import SystemConfig


class PerformanceAnalyzer:
    """
    –£–õ–£–ß–®–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
    
    def calculate_comprehensive_metrics(self, results: Dict[str, Any], 
                                      initial_balance: float) -> Dict[str, Any]:
        """
        –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        """
        if not results.get('balance_history'):
            self.logger.warning("–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return {}
        
        balance_history = np.array(results['balance_history'])
        final_balance = balance_history[-1]
        trades = results.get('trades', [])
        
        # === –ë–ê–ó–û–í–´–ï –ú–ï–¢–†–ò–ö–ò ===
        total_return = (final_balance - initial_balance) / initial_balance
        max_balance = np.max(balance_history)
        max_drawdown = np.max(results.get('drawdowns', [0]))
        
        # === –¢–û–†–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò ===
        if trades:
            profitable_trades = [t for t in trades if t > 0]
            losing_trades = [t for t in trades if t <= 0]
            
            win_rate = len(profitable_trades) / len(trades) * 100
            avg_profit = np.mean(profitable_trades) if profitable_trades else 0
            avg_loss = np.mean(losing_trades) if losing_trades else 0
            profit_factor = abs(sum(profitable_trades) / sum(losing_trades)) if losing_trades else float('inf')
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∏
            win_streak, loss_streak = self._calculate_streaks(trades)
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            recovery_factor = total_return / max_drawdown if max_drawdown > 0 else float('inf')
        else:
            win_rate = avg_profit = avg_loss = profit_factor = 0
            win_streak = loss_streak = 0
            recovery_factor = 0
        
        # === –†–ò–°–ö –ú–ï–¢–†–ò–ö–ò ===
        returns = np.diff(balance_history) / balance_history[:-1]
        
        if len(returns) > 1:
            # Sharpe Ratio (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 252 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è)
            annual_return = np.mean(returns) * 252
            annual_volatility = np.std(returns) * np.sqrt(252)
            sharpe_ratio = annual_return / annual_volatility if annual_volatility > 0 else 0
            
            # Sortino Ratio (—Ç–æ–ª—å–∫–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
            negative_returns = returns[returns < 0]
            downside_volatility = np.std(negative_returns) * np.sqrt(252) if len(negative_returns) > 0 else 0
            sortino_ratio = annual_return / downside_volatility if downside_volatility > 0 else 0
            
            # Calmar Ratio
            calmar_ratio = annual_return / max_drawdown if max_drawdown > 0 else 0
            
            # Value at Risk (VaR 95%)
            var_95 = np.percentile(returns, 5) * initial_balance
            
            # Maximum Drawdown Duration
            dd_duration = self._calculate_drawdown_duration(balance_history)
        else:
            sharpe_ratio = sortino_ratio = calmar_ratio = var_95 = dd_duration = 0
            annual_return = annual_volatility = 0
        
        # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò ===
        # –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É
        expectancy = np.mean(trades) if trades else 0
        
        # R-–∫–≤–∞–¥—Ä–∞—Ç (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞)
        r_squared = self._calculate_r_squared(balance_history)
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        stability = self._calculate_stability(returns) if len(returns) > 1 else 0
        
        metrics = {
            # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            'total_return': total_return,
            'annual_return': annual_return,
            'final_balance': final_balance,
            'max_balance': max_balance,
            
            # –†–∏—Å–∫
            'max_drawdown': max_drawdown,
            'annual_volatility': annual_volatility,
            'var_95': var_95,
            'drawdown_duration': dd_duration,
            
            # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            'total_trades': len(trades),
            'win_rate': win_rate,
            'avg_profit': avg_profit,
            'avg_loss': avg_loss,
            'profit_factor': profit_factor,
            'expectancy': expectancy,
            'win_streak': win_streak,
            'loss_streak': loss_streak,
            
            # –†–∏—Å–∫-—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            'sharpe_ratio': sharpe_ratio,
            'sortino_ratio': sortino_ratio,
            'calmar_ratio': calmar_ratio,
            'recovery_factor': recovery_factor,
            
            # –ö–∞—á–µ—Å—Ç–≤–æ
            'r_squared': r_squared,
            'stability': stability,
            
            # –ö–æ–º–∏—Å—Å–∏–∏
            'total_commission': results.get('total_commissions', 0)
        }
        
        return metrics
    
    def _calculate_streaks(self, trades: List[float]) -> tuple:
        """–†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–∏–π –ø–æ–±–µ–¥ –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π"""
        if not trades:
            return 0, 0
        
        win_streak = loss_streak = 0
        current_win = current_loss = 0
        
        for trade in trades:
            if trade > 0:
                current_win += 1
                current_loss = 0
                win_streak = max(win_streak, current_win)
            else:
                current_loss += 1
                current_win = 0
                loss_streak = max(loss_streak, current_loss)
        
        return win_streak, loss_streak
    
    def _calculate_drawdown_duration(self, balance_history: np.ndarray) -> int:
        """–†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–∞–¥–∫–∏"""
        peak = np.maximum.accumulate(balance_history)
        drawdown = (peak - balance_history) / peak
        
        duration = 0
        max_duration = 0
        
        for dd in drawdown:
            if dd > 0:
                duration += 1
                max_duration = max(max_duration, duration)
            else:
                duration = 0
        
        return max_duration
    
    def _calculate_r_squared(self, balance_history: np.ndarray) -> float:
        """–†–∞—Å—á–µ—Ç R¬≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞"""
        if len(balance_history) < 2:
            return 0
        
        x = np.arange(len(balance_history))
        correlation_matrix = np.corrcoef(x, balance_history)
        return correlation_matrix[0, 1] ** 2
    
    def _calculate_stability(self, returns: np.ndarray) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
        if len(returns) < 2:
            return 0
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ –æ–±—Ä–∞—Ç–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏
        mean_return = np.mean(returns)
        std_return = np.std(returns)
        
        if abs(mean_return) < 1e-8 or std_return == 0:
            return 0
        
        cv = std_return / abs(mean_return)
        return 1 / (1 + cv)  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
    
    def compare_with_benchmark(self, results: Dict[str, Any], 
                             benchmark_return: float = 0.0) -> Dict[str, Any]:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, HODL —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
        """
        balance_history = np.array(results['balance_history'])
        initial_balance = balance_history[0]
        final_balance = balance_history[-1]
        
        algo_return = (final_balance - initial_balance) / initial_balance
        
        # –ï—Å–ª–∏ –±–µ–Ω—á–º–∞—Ä–∫ –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º HODL
        if benchmark_return == 0.0:
            prices = results.get('prices', [])
            if prices:
                benchmark_return = (prices[-1] - prices[0]) / prices[0]
        
        alpha = algo_return - benchmark_return
        
        return {
            'algorithm_return': algo_return,
            'benchmark_return': benchmark_return,
            'alpha': alpha,
            'outperformed': alpha > 0
        }
    
    def create_comprehensive_report(self, results: Dict[str, Any], 
                                  initial_balance: float) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        """
        metrics = self.calculate_comprehensive_metrics(results, initial_balance)
        benchmark = self.compare_with_benchmark(results)
        
        report = f"""
üöÄ –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì –°–ò–°–¢–ï–ú–´
{'='*80}

üìà –î–û–•–û–î–ù–û–°–¢–¨:
   –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:      {metrics['final_balance']:,.2f} USDT
   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:     {metrics['total_return']:+.2%}
   –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:   {metrics['annual_return']:+.2%}
   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:  {metrics['max_balance']:,.2f} USDT

‚ö†Ô∏è  –†–ò–°–ö:
   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞:      {metrics['max_drawdown']:.2%}
   –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:      {metrics['annual_volatility']:.2%}
   VaR (95%):                  {metrics['var_95']:,.2f} USDT
   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–∞–¥–∫–∏: {metrics['drawdown_duration']} –ø–µ—Ä–∏–æ–¥–æ–≤

üíº –¢–û–†–ì–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:
   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:         {metrics['total_trades']}
   –í–∏–Ω—Ä–µ–π—Ç:              {metrics['win_rate']:.1f}%
   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å:      {metrics['avg_profit']:+.2f} USDT
   –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫:       {metrics['avg_loss']:+.2f} USDT
   –§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏:       {metrics['profit_factor']:.2f}
   –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å:    {metrics['expectancy']:+.2f} USDT
   –ú–∞–∫—Å. —Å–µ—Ä–∏—è –ø–æ–±–µ–¥:    {metrics['win_streak']}
   –ú–∞–∫—Å. —Å–µ—Ä–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {metrics['loss_streak']}

üìä –†–ò–°–ö-–°–ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞:    {metrics['sharpe_ratio']:.3f}
   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ:  {metrics['sortino_ratio']:.3f}
   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª–º–∞—Ä–∞:  {metrics['calmar_ratio']:.3f}
   –§–∞–∫—Ç–æ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {metrics['recovery_factor']:.2f}

üéØ –ö–ê–ß–ï–°–¢–í–û –°–¢–†–ê–¢–ï–ì–ò–ò:
   R¬≤:                   {metrics['r_squared']:.3f}
   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:         {metrics['stability']:.3f}

üí∞ –ò–ó–î–ï–†–ñ–ö–ò:
   –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏:       {metrics['total_commission']:.2f} USDT

üîç –°–†–ê–í–ù–ï–ù–ò–ï –° –ë–ï–ù–ß–ú–ê–†–ö–û–ú:
   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {benchmark['algorithm_return']:+.2%}
   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –±–µ–Ω—á–º–∞—Ä–∫–∞: {benchmark['benchmark_return']:+.2%}
   –ê–ª—å—Ñ–∞:                {benchmark['alpha']:+.2%}
   –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ:        {'‚úÖ –î–ê' if benchmark['outperformed'] else '‚ùå –ù–ï–¢'}

üö® –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
        if metrics['sharpe_ratio'] > 1.0:
            report += "   Sharpe Ratio:     ‚úÖ –û–¢–õ–ò–ß–ù–´–ô (>1.0)\n"
        elif metrics['sharpe_ratio'] > 0.5:
            report += "   Sharpe Ratio:     ‚ö†Ô∏è  –•–û–†–û–®–ò–ô (0.5-1.0)\n"
        else:
            report += "   Sharpe Ratio:     ‚ùå –°–õ–ê–ë–´–ô (<0.5)\n"
        
        if metrics['max_drawdown'] < 0.1:
            report += "   –ü—Ä–æ—Å–∞–¥–∫–∞:         ‚úÖ –ù–ò–ó–ö–ê–Ø (<10%)\n"
        elif metrics['max_drawdown'] < 0.2:
            report += "   –ü—Ä–æ—Å–∞–¥–∫–∞:         ‚ö†Ô∏è  –£–ú–ï–†–ï–ù–ù–ê–Ø (10-20%)\n"
        else:
            report += "   –ü—Ä–æ—Å–∞–¥–∫–∞:         ‚ùå –í–´–°–û–ö–ê–Ø (>20%)\n"
        
        if metrics['win_rate'] > 60:
            report += "   –í–∏–Ω—Ä–µ–π—Ç:          ‚úÖ –í–´–°–û–ö–ò–ô (>60%)\n"
        elif metrics['win_rate'] > 40:
            report += "   –í–∏–Ω—Ä–µ–π—Ç:          ‚ö†Ô∏è  –°–†–ï–î–ù–ò–ô (40-60%)\n"
        else:
            report += "   –í–∏–Ω—Ä–µ–π—Ç:          ‚ùå –ù–ò–ó–ö–ò–ô (<40%)\n"
        
        return report
    
    def create_advanced_visualization(self, results: Dict[str, Any], 
                                    analysis: Dict[str, Any],
                                    save_path: str = "trading_analysis.png"):
        """
        –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        if not results.get('balance_history'):
            self.logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig = plt.figure(figsize=SystemConfig.FIGURE_SIZE)
        gs = fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)
        
        # 1. –ì—Ä–∞—Ñ–∏–∫ —ç–∫–≤–∏—Ç–∏ –∫—Ä–∏–≤–æ–π
        ax1 = fig.add_subplot(gs[0, :2])
        balance_history = results['balance_history']
        ax1.plot(balance_history, linewidth=2, color='blue', label='–ë–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è')
        ax1.axhline(y=balance_history[0], color='gray', linestyle='--', alpha=0.7, label='–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å')
        ax1.set_title("–≠–∫–≤–∏—Ç–∏ –∫—Ä–∏–≤–∞—è", fontsize=14, fontweight='bold')
        ax1.set_ylabel("–ë–∞–ª–∞–Ω—Å (USDT)")
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        final_balance = balance_history[-1]
        initial_balance = balance_history[0]
        total_return = (final_balance - initial_balance) / initial_balance
        ax1.annotate(f'–ò—Ç–æ–≥–æ–≤—ã–π –¥–æ—Ö–æ–¥: {total_return:+.2%}', 
                    xy=(len(balance_history)-1, final_balance),
                    xytext=(len(balance_history)*0.7, final_balance*1.1),
                    arrowprops=dict(arrowstyle='->', color='red'),
                    fontsize=10, fontweight='bold')
        
        # 2. –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ –ø–æ–∑–∏—Ü–∏–π
        ax2 = fig.add_subplot(gs[1, :2])
        if 'prices' in results and 'positions' in results:
            prices = results['prices']
            positions = results['positions']
            
            ax2.plot(prices, color='orange', alpha=0.7, label='–¶–µ–Ω–∞ BTC')
            ax2_twin = ax2.twinx()
            ax2_twin.plot(positions, color='green', alpha=0.7, label='–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏')
            ax2_twin.fill_between(range(len(positions)), positions, alpha=0.3, color='green')
            
            ax2.set_title("–¶–µ–Ω–∞ BTC –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏", fontsize=14, fontweight='bold')
            ax2.set_ylabel("–¶–µ–Ω–∞ BTC (USDT)", color='orange')
            ax2_twin.set_ylabel("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (BTC)", color='green')
            ax2.legend(loc='upper left')
            ax2_twin.legend(loc='upper right')
            ax2.grid(True, alpha=0.3)
        
        # 3. –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–∞–¥–∫–∏
        ax3 = fig.add_subplot(gs[2, :2])
        if 'drawdowns' in results:
            drawdowns = np.array(results['drawdowns']) * 100  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            ax3.fill_between(range(len(drawdowns)), drawdowns, color='red', alpha=0.7)
            ax3.set_title("–ü—Ä–æ—Å–∞–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è", fontsize=14, fontweight='bold')
            ax3.set_ylabel("–ü—Ä–æ—Å–∞–¥–∫–∞ (%)")
            ax3.set_xlabel("–í—Ä–µ–º—è")
            ax3.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
            max_dd = np.max(drawdowns)
            ax3.axhline(y=max_dd, color='darkred', linestyle='--', linewidth=2)
            ax3.text(len(drawdowns)*0.1, max_dd*1.1, f'–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_dd:.1f}%', 
                    fontweight='bold', color='darkred')
        
        # 4. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–±—ã–ª–µ–π/—É–±—ã—Ç–∫–æ–≤
        ax4 = fig.add_subplot(gs[0, 2])
        if 'trades' in results and results['trades']:
            trades = results['trades']
            num_bins = max(1, min(30, len(trades)//2)) if len(trades) > 2 else len(trades) 
            ax4.hist(trades, bins=max(1, num_bins), alpha=0.7, color='purple', edgecolor='black')
            ax4.axvline(x=0, color='red', linestyle='--', linewidth=2)
            ax4.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L", fontsize=12, fontweight='bold')
            ax4.set_xlabel("–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫")
            ax4.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫")
            ax4.grid(True, alpha=0.3)
        
        # 5. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        ax5 = fig.add_subplot(gs[1, 2])
        if analysis.get('total_trades', 0) > 0:
            win_rate = analysis.get('win_rate', 0)
            loss_rate = 100 - win_rate
            
            sizes = [win_rate, loss_rate]
            labels = [f'–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ\n{win_rate:.1f}%', f'–£–±—ã—Ç–æ—á–Ω—ã–µ\n{loss_rate:.1f}%']
            colors = ['lightgreen', 'lightcoral']
            
            ax5.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
            ax5.set_title("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫", fontsize=12, fontweight='bold')
        
        # 6. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        ax6 = fig.add_subplot(gs[2, 2])
        ax6.axis('off')
        
        metrics_text = f"""–ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:

Sharpe Ratio: {analysis.get('sharpe_ratio', 0):.3f}
–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {analysis.get('max_drawdown', 0):.1%}
–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏: {analysis.get('profit_factor', 0):.2f}
–í–∏–Ω—Ä–µ–π—Ç: {analysis.get('win_rate', 0):.1f}%
–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {analysis.get('total_trades', 0)}

–û—Ü–µ–Ω–∫–∞: {'üü¢ –•–û–†–û–®–û' if analysis.get('sharpe_ratio', 0) > 0.5 else 'üî¥ –ü–õ–û–•–û'}
"""
        
        ax6.text(0.1, 0.9, metrics_text, transform=ax6.transAxes, fontsize=11,
                verticalalignment='top', fontfamily='monospace',
                bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgray", alpha=0.8))
        
        # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        fig.suptitle("üìä –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì –°–ò–°–¢–ï–ú–´", 
                    fontsize=16, fontweight='bold', y=0.98)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.savefig(save_path, dpi=SystemConfig.PLOT_DPI, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        
        if SystemConfig.SAVE_PLOTS:
            self.logger.info(f"üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
        
        plt.close()  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
    
    def generate_full_analysis(self, results: Dict[str, Any], 
                             initial_balance: float) -> Dict[str, Any]:
        """
        –ü–û–õ–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å –æ—Ç—á–µ—Ç–æ–º –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        """
        self.logger.info("üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = self.calculate_comprehensive_metrics(results, initial_balance)
        benchmark = self.compare_with_benchmark(results)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        full_analysis = {**metrics, **benchmark}
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = self.create_comprehensive_report(results, initial_balance)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        self.create_advanced_visualization(results, full_analysis)
        
        full_analysis['text_report'] = report
        
        self.logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return full_analysis


# –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def analyze_results(results: Dict[str, Any], initial_balance: float) -> Dict[str, Any]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    analyzer = PerformanceAnalyzer()
    return analyzer.calculate_comprehensive_metrics(results, initial_balance)


def visualize_results(results: Dict[str, Any], analysis: Dict[str, Any]):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    analyzer = PerformanceAnalyzer()
    analyzer.create_advanced_visualization(results, analysis) 