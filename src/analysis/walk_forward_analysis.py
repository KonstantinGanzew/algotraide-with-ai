"""
üìà WALK-FORWARD –ê–ù–ê–õ–ò–ó
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∞–ª–≥–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–∞—Ö
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional, Callable, Any
import logging
from datetime import datetime, timedelta
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
from dataclasses import dataclass
# sharpe_ratio –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ sklearn, –±—É–¥–µ–º –≤—ã—á–∏—Å–ª—è—Ç—å –≤—Ä—É—á–Ω—É—é
import warnings

logger = logging.getLogger(__name__)


@dataclass
class WalkForwardResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç walk-forward —Ç–µ—Å—Ç–∞"""
    period_start: datetime
    period_end: datetime
    returns: List[float]
    total_return: float
    volatility: float
    sharpe_ratio: float
    max_drawdown: float
    win_rate: float
    total_trades: int
    avg_trade_return: float
    model_stats: Dict[str, Any]


class WalkForwardValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è walk-forward –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–≥–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
    
    def __init__(self, train_window_months: int = 12, test_window_months: int = 3, 
                 step_months: int = 1, min_trades: int = 10):
        """
        Args:
            train_window_months: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö
            test_window_months: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö  
            step_months: –®–∞–≥ —Å–¥–≤–∏–≥–∞ –æ–∫–Ω–∞ –≤ –º–µ—Å—è—Ü–∞—Ö
            min_trades: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        """
        self.train_window_months = train_window_months
        self.test_window_months = test_window_months
        self.step_months = step_months
        self.min_trades = min_trades
        
        self.results = []
        self.cumulative_returns = []
        self.model_performance_history = []
    
    def split_data_by_date(self, df: pd.DataFrame, timestamp_col: str = 'timestamp') -> List[Tuple[pd.DataFrame, pd.DataFrame]]:
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º –¥–ª—è walk-forward –∞–Ω–∞–ª–∏–∑–∞"""
        
        logger.info("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ walk-forward —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime
        if df[timestamp_col].dtype != 'datetime64[ns]':
            df[timestamp_col] = pd.to_datetime(df[timestamp_col], unit='ms')
        
        df = df.sort_values(timestamp_col).reset_index(drop=True)
        
        start_date = df[timestamp_col].min()
        end_date = df[timestamp_col].max()
        
        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {start_date.date()} - {end_date.date()}")
        logger.info(f"üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: train={self.train_window_months}–º, test={self.test_window_months}–º, step={self.step_months}–º")
        
        splits = []
        current_date = start_date + pd.DateOffset(months=self.train_window_months)
        
        while current_date + pd.DateOffset(months=self.test_window_months) <= end_date:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–æ–Ω
            train_start = current_date - pd.DateOffset(months=self.train_window_months)
            train_end = current_date
            test_start = current_date
            test_end = current_date + pd.DateOffset(months=self.test_window_months)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            train_mask = (df[timestamp_col] >= train_start) & (df[timestamp_col] < train_end)
            test_mask = (df[timestamp_col] >= test_start) & (df[timestamp_col] < test_end)
            
            train_data = df[train_mask].copy()
            test_data = df[test_mask].copy()
            
            if len(train_data) > 0 and len(test_data) > 0:
                splits.append((train_data, test_data))
                logger.info(f"üìà –ü–µ—Ä–∏–æ–¥ {len(splits)}: train={len(train_data)} –∑–∞–ø–∏—Å–µ–π, test={len(test_data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ
            current_date += pd.DateOffset(months=self.step_months)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(splits)} walk-forward —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π")
        return splits
    
    def run_walk_forward_test(self, df: pd.DataFrame, model_factory: Callable, 
                            environment_factory: Callable = None, 
                            trading_params: Dict = None) -> List[WalkForwardResult]:
        """
        –ó–∞–ø—É—Å–∫ walk-forward —Ç–µ—Å—Ç–∞
        
        Args:
            df: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            model_factory: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (train_data, **kwargs) -> model
            environment_factory: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è (optional)
            trading_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        
        logger.info("üöÄ –ó–ê–ü–£–°–ö WALK-FORWARD –ê–ù–ê–õ–ò–ó–ê")
        logger.info("=" * 50)
        
        if trading_params is None:
            trading_params = {
                'initial_balance': 10000,
                'commission': 0.001,
                'max_position_size': 0.95
            }
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        data_splits = self.split_data_by_date(df)
        
        if not data_splits:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return []
        
        self.results = []
        cumulative_balance = trading_params['initial_balance']
        
        for i, (train_data, test_data) in enumerate(data_splits):
            logger.info(f"\nüìä –ü–ï–†–ò–û–î {i+1}/{len(data_splits)}")
            logger.info("-" * 30)
            
            period_start = test_data['timestamp'].min()
            period_end = test_data['timestamp'].max()
            
            logger.info(f"üìÖ –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥: {period_start.date()} - {period_end.date()}")
            logger.info(f"üìà –û–±—É—á–µ–Ω–∏–µ: {len(train_data)} –∑–∞–ø–∏—Å–µ–π, –¢–µ—Å—Ç: {len(test_data)} –∑–∞–ø–∏—Å–µ–π")
            
            try:
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                logger.info("üéì –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                model = model_factory(train_data)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
                logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                period_result = self._test_period(
                    model, test_data, period_start, period_end, 
                    trading_params, environment_factory
                )
                
                if period_result and period_result.total_trades >= self.min_trades:
                    self.results.append(period_result)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å
                    cumulative_balance *= (1 + period_result.total_return)
                    self.cumulative_returns.append(cumulative_balance)
                    
                    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–∏–æ–¥–∞:")
                    logger.info(f"   üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {period_result.total_return:+.2%}")
                    logger.info(f"   üìä Sharpe: {period_result.sharpe_ratio:.3f}")
                    logger.info(f"   ‚ö†Ô∏è  –ü—Ä–æ—Å–∞–¥–∫–∞: {period_result.max_drawdown:.1%}")
                    logger.info(f"   üéØ –í–∏–Ω—Ä–µ–π—Ç: {period_result.win_rate:.1%}")
                    logger.info(f"   üîÑ –°–¥–µ–ª–æ–∫: {period_result.total_trades}")
                    logger.info(f"   üíº –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å: {cumulative_balance:,.2f}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–æ–∫ ({period_result.total_trades if period_result else 0} < {self.min_trades})")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ {i+1}: {e}")
                continue
        
        logger.info(f"\nüéØ –ò–¢–û–ì–ò WALK-FORWARD –ê–ù–ê–õ–ò–ó–ê")
        logger.info("=" * 50)
        logger.info(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: {len(self.results)}")
        
        if self.results:
            total_return = (cumulative_balance / trading_params['initial_balance']) - 1
            avg_period_return = np.mean([r.total_return for r in self.results])
            win_rate = np.mean([r.total_return > 0 for r in self.results])
            
            logger.info(f"üí∞ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2%}")
            logger.info(f"üìà –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞: {avg_period_return:+.2%}")
            logger.info(f"üéØ –í–∏–Ω—Ä–µ–π—Ç –ø–µ—Ä–∏–æ–¥–æ–≤: {win_rate:.1%}")
            logger.info(f"üíº –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {cumulative_balance:,.2f}")
        
        return self.results
    
    def _test_period(self, model: Any, test_data: pd.DataFrame, 
                    period_start: datetime, period_end: datetime,
                    trading_params: Dict, environment_factory: Callable = None) -> Optional[WalkForwardResult]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–¥–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ"""
        
        try:
            if environment_factory:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                env = environment_factory(test_data, **trading_params)
                return self._test_with_environment(model, env, period_start, period_end)
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
                return self._test_with_signals(model, test_data, period_start, period_end, trading_params)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞: {e}")
            return None
    
    def _test_with_environment(self, model: Any, env: Any, 
                              period_start: datetime, period_end: datetime) -> WalkForwardResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–æ—Ä–≥–æ–≤—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º"""
        
        obs, _ = env.reset()
        returns = []
        balance_history = [env.initial_balance]
        
        done = False
        while not done:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏
                if hasattr(model, 'predict'):
                    action, _ = model.predict(obs, deterministic=True)
                else:
                    # –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π
                    action = 0  # Hold
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
                obs, reward, done, truncated, info = env.step(action)
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                portfolio_value = info.get('portfolio_value', env.initial_balance)
                balance_history.append(portfolio_value)
                
                if len(balance_history) > 1:
                    period_return = (balance_history[-1] - balance_history[-2]) / balance_history[-2]
                    returns.append(period_return)
                
                if done or truncated:
                    break
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ: {e}")
                break
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_return = (balance_history[-1] - balance_history[0]) / balance_history[0]
        volatility = np.std(returns) * np.sqrt(288) if returns else 0  # –î–ª—è 5-–º–∏–Ω –¥–∞–Ω–Ω—ã—Ö
        sharpe = (np.mean(returns) / np.std(returns)) * np.sqrt(288) if returns and np.std(returns) > 0 else 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        peak = balance_history[0]
        max_dd = 0
        for balance in balance_history:
            if balance > peak:
                peak = balance
            dd = (peak - balance) / peak
            if dd > max_dd:
                max_dd = dd
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
        trades = getattr(env, 'trades', [])
        win_rate = np.mean([trade.get('profit', 0) > 0 for trade in trades]) if trades else 0
        avg_trade_return = np.mean([trade.get('profit', 0) for trade in trades]) if trades else 0
        
        return WalkForwardResult(
            period_start=period_start,
            period_end=period_end,
            returns=returns,
            total_return=total_return,
            volatility=volatility,
            sharpe_ratio=sharpe,
            max_drawdown=max_dd,
            win_rate=win_rate,
            total_trades=len(trades),
            avg_trade_return=avg_trade_return,
            model_stats={}
        )
    
    def _test_with_signals(self, model: Any, test_data: pd.DataFrame, 
                          period_start: datetime, period_end: datetime,
                          trading_params: Dict) -> WalkForwardResult:
        """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º"""
        
        balance = trading_params['initial_balance']
        position = 0  # 0 = no position, 1 = long
        trades = []
        returns = []
        balance_history = [balance]
        
        commission = trading_params.get('commission', 0.001)
        max_position_size = trading_params.get('max_position_size', 0.95)
        
        for i in range(len(test_data) - 1):
            current_row = test_data.iloc[i]
            next_row = test_data.iloc[i + 1]
            
            current_price = current_row['close']
            next_price = next_row['close']
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç –º–æ–¥–µ–ª–∏
                if hasattr(model, 'predict'):
                    # –î–ª—è ML –º–æ–¥–µ–ª–µ–π
                    signal = model.predict(test_data.iloc[i:i+1])
                    action = 1 if signal > 0.01 else (2 if signal < -0.01 else 0)
                else:
                    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
                    action = 0
                
                # –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
                if action == 1 and position == 0:  # Buy signal
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    position_size = balance * max_position_size
                    shares = position_size / (current_price * (1 + commission))
                    cost = shares * current_price * (1 + commission)
                    
                    if cost <= balance:
                        balance -= cost
                        position = shares
                        trades.append({
                            'type': 'buy',
                            'price': current_price,
                            'shares': shares,
                            'timestamp': current_row['timestamp']
                        })
                
                elif action == 2 and position > 0:  # Sell signal
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    revenue = position * current_price * (1 - commission)
                    balance += revenue
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å —Å–¥–µ–ª–∫–∏
                    if trades and trades[-1]['type'] == 'buy':
                        buy_cost = trades[-1]['shares'] * trades[-1]['price'] * (1 + commission)
                        trade_profit = revenue - buy_cost
                        trades.append({
                            'type': 'sell',
                            'price': current_price,
                            'shares': position,
                            'profit': trade_profit,
                            'timestamp': current_row['timestamp']
                        })
                    
                    position = 0
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
                portfolio_value = balance + (position * next_price if position > 0 else 0)
                balance_history.append(portfolio_value)
                
                # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                if len(balance_history) > 1:
                    period_return = (balance_history[-1] - balance_history[-2]) / balance_history[-2]
                    returns.append(period_return)
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ: {e}")
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞
        if position > 0:
            final_price = test_data.iloc[-1]['close']
            revenue = position * final_price * (1 - commission)
            balance += revenue
            
            if trades and trades[-1]['type'] == 'buy':
                buy_cost = trades[-1]['shares'] * trades[-1]['price'] * (1 + commission)
                trade_profit = revenue - buy_cost
                trades.append({
                    'type': 'sell',
                    'price': final_price,
                    'shares': position,
                    'profit': trade_profit,
                    'timestamp': test_data.iloc[-1]['timestamp']
                })
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        final_balance = balance_history[-1] if balance_history else trading_params['initial_balance']
        total_return = (final_balance - trading_params['initial_balance']) / trading_params['initial_balance']
        
        volatility = np.std(returns) * np.sqrt(288) if returns else 0
        sharpe = (np.mean(returns) / np.std(returns)) * np.sqrt(288) if returns and np.std(returns) > 0 else 0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        peak = trading_params['initial_balance']
        max_dd = 0
        for balance_val in balance_history:
            if balance_val > peak:
                peak = balance_val
            dd = (peak - balance_val) / peak
            if dd > max_dd:
                max_dd = dd
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫
        completed_trades = [t for t in trades if 'profit' in t]
        win_rate = np.mean([t['profit'] > 0 for t in completed_trades]) if completed_trades else 0
        avg_trade_return = np.mean([t['profit'] for t in completed_trades]) if completed_trades else 0
        
        return WalkForwardResult(
            period_start=period_start,
            period_end=period_end,
            returns=returns,
            total_return=total_return,
            volatility=volatility,
            sharpe_ratio=sharpe,
            max_drawdown=max_dd,
            win_rate=win_rate,
            total_trades=len(completed_trades),
            avg_trade_return=avg_trade_return,
            model_stats={}
        )
    
    def generate_report(self, save_path: str = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ walk-forward –∞–Ω–∞–ª–∏–∑—É"""
        
        if not self.results:
            logger.error("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            return {}
        
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è walk-forward –æ—Ç—á–µ—Ç–∞...")
        
        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        returns = [r.total_return for r in self.results]
        sharpe_ratios = [r.sharpe_ratio for r in self.results]
        max_drawdowns = [r.max_drawdown for r in self.results]
        win_rates = [r.win_rate for r in self.results]
        
        report = {
            'total_periods': len(self.results),
            'avg_return': np.mean(returns),
            'median_return': np.median(returns),
            'return_std': np.std(returns),
            'best_period': max(returns),
            'worst_period': min(returns),
            'positive_periods': sum(1 for r in returns if r > 0),
            'win_rate_periods': np.mean([r > 0 for r in returns]),
            
            'avg_sharpe': np.mean(sharpe_ratios),
            'median_sharpe': np.median(sharpe_ratios),
            'best_sharpe': max(sharpe_ratios),
            'worst_sharpe': min(sharpe_ratios),
            
            'avg_max_drawdown': np.mean(max_drawdowns),
            'worst_max_drawdown': max(max_drawdowns),
            
            'avg_win_rate': np.mean(win_rates),
            'total_trades': sum(r.total_trades for r in self.results),
            
            'cumulative_return': (self.cumulative_returns[-1] / self.cumulative_returns[0] - 1) if self.cumulative_returns else 0,
            'periods_data': self.results
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        if save_path:
            self._create_visualizations(report, save_path)
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        logger.info("üìà –°–í–û–î–ö–ê WALK-FORWARD –ê–ù–ê–õ–ò–ó–ê:")
        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥–æ–≤: {report['total_periods']}")
        logger.info(f"üí∞ –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {report['avg_return']:+.2%}")
        logger.info(f"üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {report['cumulative_return']:+.2%}")
        logger.info(f"üéØ –í–∏–Ω—Ä–µ–π—Ç –ø–µ—Ä–∏–æ–¥–æ–≤: {report['win_rate_periods']:.1%}")
        logger.info(f"üìä –°—Ä–µ–¥–Ω–∏–π Sharpe: {report['avg_sharpe']:.3f}")
        logger.info(f"‚ö†Ô∏è  –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Å–∞–¥–∫–∞: {report['avg_max_drawdown']:.1%}")
        
        return report
    
    def _create_visualizations(self, report: Dict, save_path: str) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ walk-forward –∞–Ω–∞–ª–∏–∑–∞"""
        
        save_path = Path(save_path)
        save_path.mkdir(exist_ok=True)
        
        plt.style.use('default')
        
        # 1. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        
        if self.cumulative_returns:
            ax1.plot(self.cumulative_returns, linewidth=2, color='blue')
            ax1.set_title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è', fontsize=14, fontweight='bold')
            ax1.set_ylabel('–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è')
            ax1.grid(True, alpha=0.3)
        
        # 2. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        returns = [r.total_return * 100 for r in self.results]
        colors = ['green' if r > 0 else 'red' for r in returns]
        ax2.bar(range(len(returns)), returns, color=colors, alpha=0.7)
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.5)
        ax2.set_title('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º (%)', fontsize=14, fontweight='bold')
        ax2.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax2.set_xlabel('–ü–µ—Ä–∏–æ–¥')
        ax2.grid(True, alpha=0.3)
        
        # 3. Sharpe ratio –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        sharpe_ratios = [r.sharpe_ratio for r in self.results]
        ax3.plot(sharpe_ratios, marker='o', linewidth=2, markersize=4)
        ax3.axhline(y=1.0, color='red', linestyle='--', alpha=0.7, label='Sharpe = 1.0')
        ax3.set_title('Sharpe Ratio –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º', fontsize=14, fontweight='bold')
        ax3.set_ylabel('Sharpe Ratio')
        ax3.set_xlabel('–ü–µ—Ä–∏–æ–¥')
        ax3.legend()
        ax3.grid(True, alpha=0.3)
        
        # 4. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        drawdowns = [r.max_drawdown * 100 for r in self.results]
        ax4.bar(range(len(drawdowns)), drawdowns, color='red', alpha=0.7)
        ax4.set_title('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º (%)', fontsize=14, fontweight='bold')
        ax4.set_ylabel('–ü—Ä–æ—Å–∞–¥–∫–∞ (%)')
        ax4.set_xlabel('–ü–µ—Ä–∏–æ–¥')
        ax4.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(save_path / 'walk_forward_analysis.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        # 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
        
        ax1.hist(returns, bins=20, alpha=0.7, color='blue', edgecolor='black')
        ax1.axvline(x=np.mean(returns), color='red', linestyle='--', label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(returns):.2f}%')
        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥–æ–≤', fontsize=14, fontweight='bold')
        ax1.set_xlabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax1.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # Box plot –º–µ—Ç—Ä–∏–∫
        metrics_data = [returns, sharpe_ratios, [d*100 for d in drawdowns]]
        ax2.boxplot(metrics_data, labels=['–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', 'Sharpe Ratio', '–ü—Ä–æ—Å–∞–¥–∫–∞ (%)'])
        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫', fontsize=14, fontweight='bold')
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(save_path / 'walk_forward_distributions.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        logger.info(f"üíæ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {save_path}")


def run_walk_forward_analysis(df: pd.DataFrame, model_factory: Callable, 
                            train_months: int = 12, test_months: int = 3, 
                            step_months: int = 1) -> WalkForwardValidator:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ walk-forward –∞–Ω–∞–ª–∏–∑–∞"""
    
    validator = WalkForwardValidator(
        train_window_months=train_months,
        test_window_months=test_months,
        step_months=step_months
    )
    
    results = validator.run_walk_forward_test(df, model_factory)
    
    if results:
        report = validator.generate_report('walk_forward_results')
        logger.info("‚úÖ Walk-forward –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    return validator


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    print("üìà Walk-Forward –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: from src.analysis.walk_forward_analysis import run_walk_forward_analysis") 