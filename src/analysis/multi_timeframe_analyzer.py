"""
üï∞Ô∏è –ú–ù–û–ì–û–ú–ê–°–®–¢–ê–ë–ù–´–ô –ê–ù–ê–õ–ò–ó
–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional, Any
import logging
from datetime import datetime, timedelta
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
from dataclasses import dataclass
import warnings

logger = logging.getLogger(__name__)


@dataclass
class TimeframeSignal:
    """–°–∏–≥–Ω–∞–ª —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    timeframe: str
    signal_strength: float  # -1 to 1
    confidence: float  # 0 to 1
    trend_direction: str  # 'up', 'down', 'sideways'
    volatility_level: str  # 'low', 'medium', 'high'
    volume_confirmation: bool
    support_resistance_distance: float


class MultiTimeframeAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
    
    def __init__(self, base_timeframe: str = '5m'):
        """
        Args:
            base_timeframe: –ë–∞–∑–æ–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö (5m, 15m, 1h, etc.)
        """
        self.base_timeframe = base_timeframe
        self.timeframe_multipliers = {
            '5m': 1,
            '15m': 3,
            '30m': 6,
            '1h': 12,
            '4h': 48,
            '1d': 288,
            '1w': 2016
        }
        
        self.timeframe_weights = {
            '5m': 0.1,   # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —à—É–º
            '15m': 0.15,
            '30m': 0.2,
            '1h': 0.25,  # –û—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            '4h': 0.2,   # –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–Ω–¥
            '1d': 0.15   # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
        }
        
        self.signals_history = []
        self.current_market_state = {}
    
    def resample_to_timeframe(self, df: pd.DataFrame, target_timeframe: str) -> pd.DataFrame:
        """–ü–µ—Ä–µ—Å—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º"""
        
        if 'timestamp' not in df.columns:
            logger.error("‚ùå –ö–æ–ª–æ–Ω–∫–∞ timestamp –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return df
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime
        df_copy = df.copy()
        if df_copy['timestamp'].dtype != 'datetime64[ns]':
            df_copy['timestamp'] = pd.to_datetime(df_copy['timestamp'], unit='ms')
        
        df_copy = df_copy.set_index('timestamp')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        agg_rules = {
            'open': 'first',
            'high': 'max',
            'low': 'min',
            'close': 'last',
            'volume': 'sum'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        for col in df_copy.columns:
            if col not in agg_rules:
                if any(indicator in col.lower() for indicator in ['rsi', 'cci', 'williams', 'stoch', 'adx']):
                    agg_rules[col] = 'last'  # –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                elif any(indicator in col.lower() for indicator in ['sma', 'ema', 'ma', 'bb', 'kc']):
                    agg_rules[col] = 'last'  # –°—Ä–µ–¥–Ω–∏–µ - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                elif any(indicator in col.lower() for indicator in ['volume', 'obv', 'ad']):
                    agg_rules[col] = 'sum'   # –û–±—ä–µ–º–Ω—ã–µ - —Å—É–º–º–∞
                else:
                    agg_rules[col] = 'last'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –†–µ—Å—ç–º–ø–ª–∏—Ä—É–µ–º
        timeframe_map = {
            '5m': '5min',
            '15m': '15min',
            '30m': '30min',
            '1h': '1h',
            '4h': '4h',
            '1d': '1d',
            '1w': '1w'
        }
        
        pandas_tf = timeframe_map.get(target_timeframe, '1h')
        resampled = df_copy.resample(pandas_tf).agg(agg_rules)
        
        # –£–¥–∞–ª—è–µ–º NaN —Å—Ç—Ä–æ–∫–∏
        resampled = resampled.dropna()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp –∫–∞–∫ –∫–æ–ª–æ–Ω–∫—É
        resampled = resampled.reset_index()
        resampled['timestamp'] = resampled['timestamp'].astype(int) // 10**6  # –û–±—Ä–∞—Ç–Ω–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        
        logger.info(f"üìä –†–µ—Å—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ {target_timeframe}: {len(df)} -> {len(resampled)} –∑–∞–ø–∏—Å–µ–π")
        
        return resampled
    
    def analyze_timeframe_trend(self, df: pd.DataFrame, timeframe: str) -> TimeframeSignal:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ"""
        
        if len(df) < 50:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {timeframe}")
            return TimeframeSignal(
                timeframe=timeframe,
                signal_strength=0,
                confidence=0,
                trend_direction='sideways',
                volatility_level='medium',
                volume_confirmation=False,
                support_resistance_distance=0
            )
        
        try:
            close = df['close']
            high = df['high']
            low = df['low']
            volume = df['volume']
            
            # === –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê ===
            
            # –°—Ä–µ–¥–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            ema_short = close.ewm(span=10).mean()
            ema_long = close.ewm(span=50).mean()
            
            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            current_price = close.iloc[-1]
            short_ma = ema_short.iloc[-1]
            long_ma = ema_long.iloc[-1]
            
            # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            if short_ma > long_ma:
                trend_direction = 'up'
                trend_strength = min((short_ma - long_ma) / long_ma * 100, 1.0)
            elif short_ma < long_ma:
                trend_direction = 'down'
                trend_strength = min((long_ma - short_ma) / long_ma * 100, 1.0)
            else:
                trend_direction = 'sideways'
                trend_strength = 0
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–º —Ü–µ–Ω—ã
            price_above_short = current_price > short_ma
            price_above_long = current_price > long_ma
            
            if trend_direction == 'up' and price_above_short and price_above_long:
                signal_strength = trend_strength
            elif trend_direction == 'down' and not price_above_short and not price_above_long:
                signal_strength = -trend_strength
            else:
                signal_strength = trend_strength * 0.5  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–∏
            
            # === –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ ===
            
            # ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            tr1 = high - low
            tr2 = np.abs(high - close.shift(1))
            tr3 = np.abs(low - close.shift(1))
            true_range = np.maximum(tr1, np.maximum(tr2, tr3))
            atr = true_range.rolling(14).mean().iloc[-1]
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            atr_sma = true_range.rolling(50).mean().iloc[-1]
            if atr > atr_sma * 1.5:
                volatility_level = 'high'
            elif atr < atr_sma * 0.7:
                volatility_level = 'low'
            else:
                volatility_level = 'medium'
            
            # === –û–ë–™–ï–ú–ù–´–ô –ê–ù–ê–õ–ò–ó ===
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º
            volume_sma = volume.rolling(20).mean()
            current_volume = volume.iloc[-1]
            avg_volume = volume_sma.iloc[-1]
            
            volume_confirmation = current_volume > avg_volume * 1.2
            
            # === –ü–û–î–î–ï–†–ñ–ö–ê/–°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–ï ===
            
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            lookback = min(20, len(df) // 4)
            recent_highs = high.tail(lookback)
            recent_lows = low.tail(lookback)
            
            resistance_level = recent_highs.quantile(0.8)
            support_level = recent_lows.quantile(0.2)
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
            dist_to_resistance = (resistance_level - current_price) / current_price
            dist_to_support = (current_price - support_level) / current_price
            
            support_resistance_distance = min(abs(dist_to_resistance), abs(dist_to_support))
            
            # === –£–í–ï–†–ï–ù–ù–û–°–¢–¨ ===
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            confidence_factors = []
            
            # 1. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å MA
            if (trend_direction == 'up' and price_above_short and price_above_long) or \
               (trend_direction == 'down' and not price_above_short and not price_above_long):
                confidence_factors.append(0.3)
            
            # 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º
            if volume_confirmation:
                confidence_factors.append(0.2)
            
            # 3. –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –±–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if volatility_level == 'low':
                confidence_factors.append(0.2)
            elif volatility_level == 'medium':
                confidence_factors.append(0.1)
            
            # 4. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç S/R —É—Ä–æ–≤–Ω–µ–π
            if support_resistance_distance > 0.02:  # –î–∞–ª–µ–∫–æ –æ—Ç —É—Ä–æ–≤–Ω–µ–π
                confidence_factors.append(0.2)
            
            # 5. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–∞
            trend_length = 0
            for i in range(2, min(10, len(ema_short))):
                if trend_direction == 'up' and ema_short.iloc[-i] < ema_long.iloc[-i]:
                    break
                elif trend_direction == 'down' and ema_short.iloc[-i] > ema_long.iloc[-i]:
                    break
                trend_length += 1
            
            if trend_length >= 5:
                confidence_factors.append(0.1)
            
            confidence = min(sum(confidence_factors), 1.0)
            
            return TimeframeSignal(
                timeframe=timeframe,
                signal_strength=signal_strength,
                confidence=confidence,
                trend_direction=trend_direction,
                volatility_level=volatility_level,
                volume_confirmation=volume_confirmation,
                support_resistance_distance=support_resistance_distance
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {timeframe}: {e}")
            return TimeframeSignal(
                timeframe=timeframe,
                signal_strength=0,
                confidence=0,
                trend_direction='sideways',
                volatility_level='medium',
                volume_confirmation=False,
                support_resistance_distance=0
            )
    
    def analyze_multiple_timeframes(self, df: pd.DataFrame, 
                                  timeframes: List[str] = None) -> Dict[str, TimeframeSignal]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
        
        if timeframes is None:
            timeframes = ['15m', '1h', '4h', '1d']
        
        logger.info(f"üï∞Ô∏è –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ {len(timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö...")
        
        signals = {}
        
        for tf in timeframes:
            try:
                # –†–µ—Å—ç–º–ø–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                if tf == self.base_timeframe:
                    tf_data = df.copy()
                else:
                    tf_data = self.resample_to_timeframe(df, tf)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º
                if len(tf_data) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    signal = self.analyze_timeframe_trend(tf_data, tf)
                    signals[tf] = signal
                    
                    logger.info(f"üìä {tf}: {signal.trend_direction} "
                              f"(—Å–∏–ª–∞: {signal.signal_strength:+.3f}, "
                              f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.3f})")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {tf}")
            
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {tf}: {e}")
        
        self.current_market_state = signals
        return signals
    
    def generate_consensus_signal(self, signals: Dict[str, TimeframeSignal] = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        
        if signals is None:
            signals = self.current_market_state
        
        if not signals:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞")
            return {
                'action': 0,  # Hold
                'confidence': 0,
                'consensus_strength': 0,
                'dominant_timeframe': None,
                'risk_level': 'high'
            }
        
        logger.info("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞...")
        
        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        weighted_signals = []
        total_weight = 0
        
        for tf, signal in signals.items():
            weight = self.timeframe_weights.get(tf, 0.1)
            weighted_strength = signal.signal_strength * signal.confidence * weight
            weighted_signals.append(weighted_strength)
            total_weight += weight
        
        # –ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–∞—è —Å–∏–ª–∞
        consensus_strength = sum(weighted_signals) / total_weight if total_weight > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        action = 0  # Hold –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if consensus_strength > 0.1:
            action = 1  # Buy
        elif consensus_strength < -0.1:
            action = 2  # Sell
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        agreement_signals = []
        for signal in signals.values():
            if consensus_strength > 0.1 and signal.signal_strength > 0:
                agreement_signals.append(signal.confidence)
            elif consensus_strength < -0.1 and signal.signal_strength < 0:
                agreement_signals.append(signal.confidence)
            elif abs(consensus_strength) <= 0.1 and abs(signal.signal_strength) <= 0.1:
                agreement_signals.append(signal.confidence)
        
        consensus_confidence = np.mean(agreement_signals) if agreement_signals else 0
        
        # –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
        dominant_tf = None
        max_weighted_signal = 0
        
        for tf, signal in signals.items():
            weight = self.timeframe_weights.get(tf, 0.1)
            weighted_signal = abs(signal.signal_strength * signal.confidence * weight)
            if weighted_signal > max_weighted_signal:
                max_weighted_signal = weighted_signal
                dominant_tf = tf
        
        # –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        risk_factors = []
        
        # 1. –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        high_vol_timeframes = [tf for tf, sig in signals.items() if sig.volatility_level == 'high']
        if len(high_vol_timeframes) >= len(signals) // 2:
            risk_factors.append('high_volatility')
        
        # 2. –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        if consensus_confidence < 0.5:
            risk_factors.append('low_confidence')
        
        # 3. –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        positive_signals = sum(1 for sig in signals.values() if sig.signal_strength > 0.1)
        negative_signals = sum(1 for sig in signals.values() if sig.signal_strength < -0.1)
        if min(positive_signals, negative_signals) > 0:
            risk_factors.append('contradictory_signals')
        
        # 4. –ë–ª–∏–∑–æ—Å—Ç—å –∫ S/R —É—Ä–æ–≤–Ω—è–º
        close_to_sr = [tf for tf, sig in signals.items() if sig.support_resistance_distance < 0.01]
        if len(close_to_sr) >= len(signals) // 2:
            risk_factors.append('near_support_resistance')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        if len(risk_factors) >= 3:
            risk_level = 'high'
        elif len(risk_factors) >= 1:
            risk_level = 'medium'
        else:
            risk_level = 'low'
        
        result = {
            'action': action,
            'confidence': consensus_confidence,
            'consensus_strength': consensus_strength,
            'dominant_timeframe': dominant_tf,
            'risk_level': risk_level,
            'risk_factors': risk_factors,
            'timeframe_agreement': len(agreement_signals) / len(signals) if signals else 0,
            'detailed_signals': signals
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        action_names = ['Hold', 'Buy', 'Sell']
        logger.info(f"üéØ –ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª:")
        logger.info(f"   –î–µ–π—Å—Ç–≤–∏–µ: {action_names[action]} (—Å–∏–ª–∞: {consensus_strength:+.3f})")
        logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {consensus_confidence:.3f}")
        logger.info(f"   –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –¢–§: {dominant_tf}")
        logger.info(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}")
        logger.info(f"   –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {result['timeframe_agreement']:.1%}")
        
        return result
    
    def create_market_state_dashboard(self, signals: Dict[str, TimeframeSignal] = None, 
                                    save_path: str = None) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        
        if signals is None:
            signals = self.current_market_state
        
        if not signals:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞")
            return
        
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –º–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        
        # 1. –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        timeframes = list(signals.keys())
        strengths = [signals[tf].signal_strength for tf in timeframes]
        confidences = [signals[tf].confidence for tf in timeframes]
        
        colors = ['green' if s > 0 else 'red' if s < 0 else 'gray' for s in strengths]
        bars = ax1.barh(timeframes, strengths, color=colors, alpha=0.7)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ —Ä–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫
        for i, (tf, strength, conf) in enumerate(zip(timeframes, strengths, confidences)):
            ax1.scatter(strength, i, s=conf*500, color='black', alpha=0.5)
        
        ax1.axvline(x=0, color='black', linestyle='-', alpha=0.5)
        ax1.set_xlabel('–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞')
        ax1.set_title('–°–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º\n(—Ä–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ = —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)', fontweight='bold')
        ax1.grid(True, alpha=0.3)
        
        # 2. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        trend_counts = {'up': 0, 'down': 0, 'sideways': 0}
        for signal in signals.values():
            trend_counts[signal.trend_direction] += 1
        
        ax2.pie(trend_counts.values(), labels=trend_counts.keys(), autopct='%1.1f%%',
                colors=['green', 'red', 'gray'])
        ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤', fontweight='bold')
        
        # 3. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        volatility_data = {}
        for tf, signal in signals.items():
            if signal.volatility_level not in volatility_data:
                volatility_data[signal.volatility_level] = []
            volatility_data[signal.volatility_level].append(tf)
        
        vol_levels = ['low', 'medium', 'high']
        vol_colors = ['green', 'yellow', 'red']
        vol_counts = [len(volatility_data.get(level, [])) for level in vol_levels]
        
        ax3.bar(vol_levels, vol_counts, color=vol_colors, alpha=0.7)
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤')
        ax3.set_title('–£—Ä–æ–≤–Ω–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏', fontweight='bold')
        ax3.grid(True, alpha=0.3)
        
        # 4. –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        consensus_data = []
        labels = []
        
        for tf, signal in signals.items():
            weight = self.timeframe_weights.get(tf, 0.1)
            weighted_signal = signal.signal_strength * signal.confidence * weight
            consensus_data.append([weighted_signal])
            labels.append(f"{tf}")
        
        if consensus_data:
            im = ax4.imshow(consensus_data, cmap='RdYlGn', aspect='auto', vmin=-1, vmax=1)
            ax4.set_yticks(range(len(labels)))
            ax4.set_yticklabels(labels)
            ax4.set_xticks([0])
            ax4.set_xticklabels(['–í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª'])
            ax4.set_title('–ö–æ–Ω—Å–µ–Ω—Å—É—Å-–º–∞—Ç—Ä–∏—Ü–∞', fontweight='bold')
            
            # –î–æ–±–∞–≤–ª—è–µ–º colorbar
            plt.colorbar(im, ax=ax4, label='–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞')
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            logger.info(f"üíæ –î–∞—à–±–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
        else:
            plt.savefig('multi_timeframe_dashboard.png', dpi=300, bbox_inches='tight')
            logger.info("üíæ –î–∞—à–±–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: multi_timeframe_dashboard.png")
        
        plt.close()
    
    def get_market_regime(self, signals: Dict[str, TimeframeSignal] = None) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        if signals is None:
            signals = self.current_market_state
        
        if not signals:
            return {'regime': 'unknown', 'confidence': 'low'}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–∞—Ö
        short_term_trends = []  # 5m, 15m, 30m
        medium_term_trends = []  # 1h, 4h
        long_term_trends = []   # 1d, 1w
        
        for tf, signal in signals.items():
            if tf in ['5m', '15m', '30m']:
                short_term_trends.append(signal.trend_direction)
            elif tf in ['1h', '4h']:
                medium_term_trends.append(signal.trend_direction)
            elif tf in ['1d', '1w']:
                long_term_trends.append(signal.trend_direction)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º—ã
        def get_dominant_trend(trends):
            if not trends:
                return 'unknown'
            trend_counts = {'up': 0, 'down': 0, 'sideways': 0}
            for trend in trends:
                trend_counts[trend] += 1
            return max(trend_counts.items(), key=lambda x: x[1])[0]
        
        short_regime = get_dominant_trend(short_term_trends)
        medium_regime = get_dominant_trend(medium_term_trends)
        long_regime = get_dominant_trend(long_term_trends)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–µ–∂–∏–º
        if long_regime == 'up' and medium_regime == 'up':
            if short_regime == 'up':
                regime = 'strong_bull_trend'
            elif short_regime == 'down':
                regime = 'bull_trend_with_pullback'
            else:
                regime = 'bull_trend_consolidation'
        
        elif long_regime == 'down' and medium_regime == 'down':
            if short_regime == 'down':
                regime = 'strong_bear_trend'
            elif short_regime == 'up':
                regime = 'bear_trend_with_bounce'
            else:
                regime = 'bear_trend_consolidation'
        
        elif long_regime == 'sideways' or medium_regime == 'sideways':
            if short_regime in ['up', 'down']:
                regime = 'range_bound_with_breakout_attempt'
            else:
                regime = 'range_bound_consolidation'
        
        else:
            regime = 'mixed_signals'
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∂–∏–º–µ
        total_signals = len([s for s in signals.values() if s.confidence > 0.3])
        high_confidence_signals = len([s for s in signals.values() if s.confidence > 0.7])
        
        if high_confidence_signals >= total_signals * 0.7:
            confidence = 'high'
        elif high_confidence_signals >= total_signals * 0.4:
            confidence = 'medium'
        else:
            confidence = 'low'
        
        return {
            'regime': regime,
            'confidence': confidence,
            'short_term': short_regime,
            'medium_term': medium_regime,
            'long_term': long_regime
        }


def analyze_multi_timeframe_market(df: pd.DataFrame, 
                                 timeframes: List[str] = None) -> Dict[str, Any]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    analyzer = MultiTimeframeAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    signals = analyzer.analyze_multiple_timeframes(df, timeframes)
    
    if not signals:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã")
        return {}
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    consensus = analyzer.generate_consensus_signal(signals)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
    market_regime = analyzer.get_market_regime(signals)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    analyzer.create_market_state_dashboard(signals, 'multi_timeframe_analysis.png')
    
    return {
        'signals': signals,
        'consensus': consensus,
        'market_regime': market_regime,
        'analyzer': analyzer
    }


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    print("üï∞Ô∏è –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: from src.analysis.multi_timeframe_analyzer import analyze_multi_timeframe_market") 