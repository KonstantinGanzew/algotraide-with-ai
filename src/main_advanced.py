"""
üöÄ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì–ê V3.0
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π: ensemble –º–æ–¥–µ–ª–∏, walk-forward –∞–Ω–∞–ª–∏–∑, 
–º–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚úÖ 7+ –ª–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (789K+ –∑–∞–ø–∏—Å–µ–π)
‚úÖ 50+ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
‚úÖ Ensemble ML + RL –º–æ–¥–µ–ª–∏
‚úÖ Walk-forward –≤–∞–ª–∏–¥–∞—Ü–∏—è
‚úÖ –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (5m-1d)
‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å —Å–∏–≥–Ω–∞–ª—ã
‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
"""

import sys
import logging
from pathlib import Path
import numpy as np
import pandas as pd
from datetime import datetime
import warnings
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

try:
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    from core.config import (
        ActiveTradingConfig as TradingConfig, 
        ActiveRewardConfig as RewardConfig, 
        MLConfig, DataConfig, SystemConfig, validate_config
    )
    from core.models import (
        create_improved_model, train_improved_model, 
        SmartEarlyStoppingCallback, setup_device
    )
    from trading.environment import ImprovedTradingEnv
    from utils.data_processor import DataProcessor
    from analysis.performance_analyzer import PerformanceAnalyzer
    
    # –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏
    from utils.data_loader import HistoricalDataLoader
    from utils.technical_indicators import add_advanced_features
    from core.ensemble_models import create_ensemble_system, HybridEnsemble
    from analysis.walk_forward_analysis import run_walk_forward_analysis, WalkForwardValidator
    from analysis.multi_timeframe_analyzer import analyze_multi_timeframe_market, MultiTimeframeAnalyzer
    
except ImportError as e:
    logger = logging.getLogger(__name__)
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

from stable_baselines3.common.vec_env import DummyVecEnv


def setup_advanced_logging():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(
        level=getattr(logging, SystemConfig.LOG_LEVEL),
        format=log_format,
        handlers=[
            logging.StreamHandler(),
        ]
    )
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_logger = logging.getLogger('RESULTS')
    results_logger.setLevel(logging.INFO)
    
    if SystemConfig.LOG_TO_FILE:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path('logs')
        log_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª–æ–≤—ã–µ –ª–æ–≥–≥–µ—Ä—ã
        main_handler = logging.FileHandler(log_dir / f'advanced_trading_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
        main_handler.setFormatter(logging.Formatter(log_format))
        logging.getLogger().addHandler(main_handler)
        
        results_handler = logging.FileHandler(log_dir / f'results_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
        results_handler.setFormatter(logging.Formatter(log_format))
        results_logger.addHandler(results_handler)
    
    # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warnings.filterwarnings('ignore', category=UserWarning)
    warnings.filterwarnings('ignore', category=FutureWarning)


def prepare_advanced_data(use_extended_dataset: bool = True) -> pd.DataFrame:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    logger = logging.getLogger(__name__)
    
    logger.info("üìä –ü–û–î–ì–û–¢–û–í–ö–ê –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê")
    logger.info("=" * 50)
    
    if use_extended_dataset:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        extended_file = Path('data/BTC_5m_6years_extended.csv')
        
        if extended_file.exists():
            logger.info(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {extended_file}")
            df = pd.read_csv(extended_file)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        else:
            logger.info("üì• –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
            loader = HistoricalDataLoader()
            df = loader.create_extended_dataset()
            
            if df.empty:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
                df = pd.read_csv(DataConfig.DATA_FOLDER + DataConfig.DATA_FILE)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
        df = pd.read_csv(DataConfig.DATA_FOLDER + DataConfig.DATA_FILE)
    
    logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df):,} –∑–∞–ø–∏—Å–µ–π")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    logger.info("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    start_time = time.time()
    
    df = add_advanced_features(df)
    
    indicator_time = time.time() - start_time
    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(df.columns) - 6} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞ {indicator_time:.1f}—Å")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_processor = DataProcessor()
    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    df['future_return'] = df['close'].pct_change(5).shift(-5).fillna(0)
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    quality_report = {
        'total_records': len(df),
        'features_count': len(df.columns) - 6,  # –ò—Å–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ OHLCV –∫–æ–ª–æ–Ω–∫–∏
        'price_statistics': {
            'min_price': df['close'].min(),
            'max_price': df['close'].max()
        }
    }
    logger.info(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:")
    logger.info(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {quality_report['total_records']:,}")
    logger.info(f"   üîß –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {quality_report['features_count']}")
    logger.info(f"   üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${quality_report['price_statistics']['min_price']:.2f} - ${quality_report['price_statistics']['max_price']:.2f}")
    
    return df


def create_advanced_environments(df: pd.DataFrame) -> tuple:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    
    logger.info("üéÆ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–´–• –¢–û–†–ì–û–í–´–• –û–ö–†–£–ñ–ï–ù–ò–ô")
    logger.info("-" * 50)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
    data_processor = DataProcessor()
    train_df, test_df = data_processor.split_data_for_walk_forward(df, 0.8)
    
    logger.info(f"üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
    logger.info(f"   üéì –û–±—É—á–µ–Ω–∏–µ: {len(train_df):,} –∑–∞–ø–∏—Å–µ–π")
    logger.info(f"   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {len(test_df):,} –∑–∞–ø–∏—Å–µ–π")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    train_env = ImprovedTradingEnv(
        train_df,
        window_size=DataConfig.WINDOW_SIZE,
        initial_balance=SystemConfig.INITIAL_BALANCE,
        validation_mode=False
    )
    
    test_env = ImprovedTradingEnv(
        test_df,
        window_size=DataConfig.WINDOW_SIZE,
        initial_balance=SystemConfig.INITIAL_BALANCE,
        validation_mode=True
    )
    
    # –°–æ–∑–¥–∞–µ–º ensemble –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    ensemble_envs = []
    
    # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    conservative_env = ImprovedTradingEnv(
        train_df,
        window_size=DataConfig.WINDOW_SIZE,
        initial_balance=SystemConfig.INITIAL_BALANCE,
        validation_mode=False
    )
    conservative_env.max_position_size = 0.5  # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    ensemble_envs.append(conservative_env)
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    aggressive_env = ImprovedTradingEnv(
        train_df,
        window_size=DataConfig.WINDOW_SIZE,
        initial_balance=SystemConfig.INITIAL_BALANCE,
        validation_mode=False
    )
    aggressive_env.max_position_size = 0.95  # –ë–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    ensemble_envs.append(aggressive_env)
    
    # –û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
    scalping_env = ImprovedTradingEnv(
        train_df,
        window_size=DataConfig.WINDOW_SIZE // 2,  # –ú–µ–Ω—å—à–µ–µ –æ–∫–Ω–æ
        initial_balance=SystemConfig.INITIAL_BALANCE,
        validation_mode=False
    )
    ensemble_envs.append(scalping_env)
    
    # –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –¥–ª—è stable-baselines3
    train_env_vec = DummyVecEnv([lambda: train_env])
    ensemble_envs_vec = [DummyVecEnv([lambda env=env: env]) for env in ensemble_envs]
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–π:")
    logger.info(f"   üéØ –û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—É—á–∞—é—â–µ–µ: 1")
    logger.info(f"   üß™ –¢–µ—Å—Ç–æ–≤–æ–µ: 1") 
    logger.info(f"   ü§ñ Ensemble: {len(ensemble_envs)}")
    
    return train_env_vec, test_env, ensemble_envs_vec, train_df, test_df


def train_advanced_ensemble_system(train_data: pd.DataFrame, ensemble_envs: list) -> HybridEnsemble:
    """–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π ensemble —Å–∏—Å—Ç–µ–º—ã"""
    logger = logging.getLogger(__name__)
    
    logger.info("üß† –û–ë–£–ß–ï–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–û–ô ENSEMBLE –°–ò–°–¢–ï–ú–´")
    logger.info("=" * 50)
    
    start_time = time.time()
    
    # –°–æ–∑–¥–∞–µ–º ensemble —Å–∏—Å—Ç–µ–º—É
    hybrid_ensemble = create_ensemble_system(train_data, ensemble_envs)
    
    training_time = time.time() - start_time
    logger.info(f"‚úÖ Ensemble —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∞ –∑–∞ {training_time:.1f}—Å")
    
    return hybrid_ensemble


def run_multi_timeframe_analysis(df: pd.DataFrame) -> dict:
    """–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    logger = logging.getLogger(__name__)
    
    logger.info("üï∞Ô∏è –ú–ù–û–ì–û–ú–ê–°–®–¢–ê–ë–ù–´–ô –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê")
    logger.info("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞
    recent_data = df.tail(5000).copy()  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ ~17 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
    
    timeframes = ['15m', '1h', '4h', '1d']
    
    start_time = time.time()
    analysis_result = analyze_multi_timeframe_market(recent_data, timeframes)
    analysis_time = time.time() - start_time
    
    if analysis_result:
        consensus = analysis_result.get('consensus', {})
        market_regime = analysis_result.get('market_regime', {})
        
        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–∑–∞ {analysis_time:.1f}—Å):")
        logger.info(f"   üìä –ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {['Hold', 'Buy', 'Sell'][consensus.get('action', 0)]}")
        logger.info(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {consensus.get('confidence', 0):.1%}")
        logger.info(f"   üèõÔ∏è –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: {market_regime.get('regime', 'unknown')}")
        logger.info(f"   üìà –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥: {market_regime.get('long_term', 'unknown')}")
        
    return analysis_result


def run_walk_forward_validation(df: pd.DataFrame, ensemble_system: HybridEnsemble) -> dict:
    """–ó–∞–ø—É—Å–∫ walk-forward –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    logger = logging.getLogger(__name__)
    
    logger.info("üìà WALK-FORWARD –í–ê–õ–ò–î–ê–¶–ò–Ø")
    logger.info("=" * 50)
    
    def model_factory(train_data):
        """–§–∞–±—Ä–∏–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è walk-forward —Ç–µ—Å—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—É—é –≤–µ—Ä—Å–∏—é ensemble –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            mini_ensemble = HybridEnsemble()
            mini_ensemble.ml_ensemble.train_base_models(train_data)
            mini_ensemble.is_trained = True
            return mini_ensemble
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return None
    
    def environment_factory(test_data, **kwargs):
        """–§–∞–±—Ä–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–π –¥–ª—è walk-forward —Ç–µ—Å—Ç–∞"""
        return ImprovedTradingEnv(
            test_data,
            window_size=DataConfig.WINDOW_SIZE,
            initial_balance=kwargs.get('initial_balance', SystemConfig.INITIAL_BALANCE),
            validation_mode=True
        )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    validator = WalkForwardValidator(
        train_window_months=6,  # 6 –º–µ—Å—è—Ü–µ–≤ –æ–±—É—á–µ–Ω–∏—è
        test_window_months=1,   # 1 –º–µ—Å—è—Ü —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        step_months=1,          # –®–∞–≥ 1 –º–µ—Å—è—Ü
        min_trades=5            # –ú–∏–Ω–∏–º—É–º 5 —Å–¥–µ–ª–æ–∫
    )
    
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º walk-forward –∞–Ω–∞–ª–∏–∑
    results = validator.run_walk_forward_test(
        df, 
        model_factory, 
        environment_factory,
        {'initial_balance': SystemConfig.INITIAL_BALANCE, 'commission': 0.001}
    )
    
    validation_time = time.time() - start_time
    
    if results:
        report = validator.generate_report('walk_forward_results')
        
        logger.info(f"üìä Walk-Forward —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∑–∞ {validation_time:.1f}—Å):")
        logger.info(f"   üìà –ü–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {report['total_periods']}")
        logger.info(f"   üí∞ –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {report['avg_return']:+.2%}")
        logger.info(f"   üéØ –í–∏–Ω—Ä–µ–π—Ç –ø–µ—Ä–∏–æ–¥–æ–≤: {report['win_rate_periods']:.1%}")
        logger.info(f"   üìä –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {report['cumulative_return']:+.2%}")
        
        return report
    
    logger.warning("‚ö†Ô∏è Walk-Forward –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    return {}


def run_comprehensive_backtesting(ensemble_system: HybridEnsemble, test_env, 
                                 multi_tf_analysis: dict, data_processor: DataProcessor) -> dict:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
    logger = logging.getLogger(__name__)
    results_logger = logging.getLogger('RESULTS')
    
    logger.info("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´")
    logger.info("=" * 50)
    
    obs, _ = test_env.reset()
    results = {
        'balance_history': [],
        'prices': [],
        'actions': [],
        'trades': [],
        'ensemble_signals': [],
        'multi_tf_signals': [],
        'market_regimes': [],
        'risk_levels': []
    }
    
    step_count = 0
    max_steps = min(2000, len(test_env.df) - test_env.window_size - 10)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    tf_analyzer = multi_tf_analysis.get('analyzer')
    
    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {max_steps} —à–∞–≥–æ–≤")
    
    while step_count < max_steps:
        try:
            # === –ü–û–õ–£–ß–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í ===
            
            # 1. Ensemble —Å–∏–≥–Ω–∞–ª
            current_data = test_env.df.iloc[test_env.current_step-10:test_env.current_step+1]
            
            if len(current_data) > 5 and ensemble_system.is_trained:
                ensemble_action = ensemble_system.predict_hybrid_action(obs, current_data)
            else:
                ensemble_action = 0  # Hold
            
            # 2. –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π —Å–∏–≥–Ω–∞–ª (–∫–∞–∂–¥—ã–µ 10 —à–∞–≥–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏)
            if step_count % 10 == 0 and tf_analyzer:
                recent_data = test_env.df.iloc[max(0, test_env.current_step-200):test_env.current_step+1]
                if len(recent_data) > 50:
                    tf_signals = tf_analyzer.analyze_multiple_timeframes(recent_data, ['15m', '1h'])
                    tf_consensus = tf_analyzer.generate_consensus_signal(tf_signals)
                    tf_action = tf_consensus.get('action', 0)
                    market_regime = tf_analyzer.get_market_regime(tf_signals)
                else:
                    tf_action = 0
                    tf_consensus = {'action': 0, 'confidence': 0, 'risk_level': 'medium'}
                    market_regime = {'regime': 'unknown'}
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
                tf_action = results['multi_tf_signals'][-1] if results['multi_tf_signals'] else 0
                tf_consensus = {'risk_level': 'medium'}
                market_regime = {'regime': 'unknown'}
            
            # === –ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–Ø ===
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ensemble)
            if ensemble_action != 0:
                final_action = ensemble_action
            elif tf_action != 0:
                final_action = tf_action
            else:
                final_action = 0  # Hold
            
            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
            risk_level = tf_consensus.get('risk_level', 'medium')
            if risk_level == 'high' and final_action != 0:
                # –í —É—Å–ª–æ–≤–∏—è—Ö –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                if np.random.random() < 0.3:  # 30% —à–∞–Ω—Å –æ—Ç–º–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
                    final_action = 0
            
            # === –í–´–ü–û–õ–ù–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø ===
            
            obs, reward, done, truncated, info = test_env.step(final_action)
            step_count += 1
            
            # === –°–ë–û–† –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
            
            portfolio_value = info.get('portfolio_value', test_env.initial_balance)
            current_price = info.get('current_price', 0)
            
            results['balance_history'].append(portfolio_value)
            results['prices'].append(current_price)
            results['actions'].append(final_action)
            results['ensemble_signals'].append(ensemble_action)
            results['multi_tf_signals'].append(tf_action)
            results['market_regimes'].append(market_regime.get('regime', 'unknown'))
            results['risk_levels'].append(risk_level)
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–¥–µ–ª–∫–∏
            if 'trade_info' in info and info['trade_info'].get('executed'):
                trade_info = info['trade_info'].copy()
                trade_info['step'] = step_count
                trade_info['market_regime'] = market_regime.get('regime', 'unknown')
                trade_info['risk_level'] = risk_level
                results['trades'].append(trade_info)
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã
            if step_count % 500 == 0:
                current_return = (portfolio_value - test_env.initial_balance) / test_env.initial_balance
                logger.info(f"   üìä –®–∞–≥ {step_count:,}/{max_steps:,} | "
                          f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {current_return:+.2%} | "
                          f"–†–µ–∂–∏–º: {market_regime.get('regime', 'unknown')}")
            
            if done or truncated:
                obs, _ = test_env.reset()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step_count}: {e}")
            break
    
    # === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    
    final_balance = results['balance_history'][-1] if results['balance_history'] else test_env.initial_balance
    total_return = (final_balance - test_env.initial_balance) / test_env.initial_balance
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
    ensemble_trades = sum(1 for action in results['ensemble_signals'] if action != 0)
    tf_trades = sum(1 for action in results['multi_tf_signals'] if action != 0)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    regime_counts = {}
    for regime in results['market_regimes']:
        regime_counts[regime] = regime_counts.get(regime, 0) + 1
    
    dominant_regime = max(regime_counts.items(), key=lambda x: x[1])[0] if regime_counts else 'unknown'
    
    results_logger.info("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    results_logger.info(f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2%}")
    results_logger.info(f"üíº –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {final_balance:,.2f} USDT")
    results_logger.info(f"ü§ñ Ensemble —Å–∏–≥–Ω–∞–ª–æ–≤: {ensemble_trades}")
    results_logger.info(f"üï∞Ô∏è –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {tf_trades}")
    results_logger.info(f"üèõÔ∏è –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º: {dominant_regime}")
    results_logger.info(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(results['trades'])}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results.update({
        'final_balance': final_balance,
        'total_return': total_return,
        'ensemble_signals_count': ensemble_trades,
        'tf_signals_count': tf_trades,
        'dominant_regime': dominant_regime,
        'regime_distribution': regime_counts
    })
    
    return results


def generate_comprehensive_report(test_results: dict, walk_forward_results: dict, 
                                multi_tf_analysis: dict) -> dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    logger = logging.getLogger(__name__)
    results_logger = logging.getLogger('RESULTS')
    
    logger.info("üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –û–¢–ß–ï–¢–ê")
    logger.info("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyzer = PerformanceAnalyzer()
    detailed_analysis = analyzer.generate_full_analysis(test_results, SystemConfig.INITIAL_BALANCE)
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    comprehensive_report = {
        'timestamp': datetime.now().isoformat(),
        'system_version': '3.0_Advanced',
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        'performance': {
            'total_return': test_results.get('total_return', 0),
            'final_balance': test_results.get('final_balance', SystemConfig.INITIAL_BALANCE),
            'sharpe_ratio': detailed_analysis.get('sharpe_ratio', 0),
            'max_drawdown': detailed_analysis.get('max_drawdown', 0),
            'win_rate': detailed_analysis.get('win_rate', 0),
            'total_trades': len(test_results.get('trades', []))
        },
        
        # Walk-forward –º–µ—Ç—Ä–∏–∫–∏
        'walk_forward': {
            'periods_tested': walk_forward_results.get('total_periods', 0),
            'avg_period_return': walk_forward_results.get('avg_return', 0),
            'period_win_rate': walk_forward_results.get('win_rate_periods', 0),
            'cumulative_return': walk_forward_results.get('cumulative_return', 0)
        },
        
        # –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        'multi_timeframe': {
            'consensus_action': multi_tf_analysis.get('consensus', {}).get('action', 0),
            'consensus_confidence': multi_tf_analysis.get('consensus', {}).get('confidence', 0),
            'market_regime': multi_tf_analysis.get('market_regime', {}).get('regime', 'unknown'),
            'dominant_regime': test_results.get('dominant_regime', 'unknown')
        },
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        'system_info': {
            'ensemble_signals': test_results.get('ensemble_signals_count', 0),
            'tf_signals': test_results.get('tf_signals_count', 0),
            'data_records': len(test_results.get('balance_history', [])),
            'regime_distribution': test_results.get('regime_distribution', {})
        }
    }
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    results_logger.info("\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì–ê V3.0")
    results_logger.info("=" * 80)
    
    results_logger.info("üìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
    results_logger.info(f"   üí∞ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {comprehensive_report['performance']['total_return']:+.2%}")
    results_logger.info(f"   üíº –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {comprehensive_report['performance']['final_balance']:,.2f} USDT")
    results_logger.info(f"   üìä Sharpe Ratio: {comprehensive_report['performance']['sharpe_ratio']:.3f}")
    results_logger.info(f"   ‚ö†Ô∏è  –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {comprehensive_report['performance']['max_drawdown']:.1%}")
    results_logger.info(f"   üéØ –í–∏–Ω—Ä–µ–π—Ç: {comprehensive_report['performance']['win_rate']:.1%}")
    results_logger.info(f"   üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {comprehensive_report['performance']['total_trades']}")
    
    if comprehensive_report['walk_forward']['periods_tested'] > 0:
        results_logger.info("\nüìà WALK-FORWARD –í–ê–õ–ò–î–ê–¶–ò–Ø:")
        results_logger.info(f"   üìä –ü–µ—Ä–∏–æ–¥–æ–≤: {comprehensive_report['walk_forward']['periods_tested']}")
        results_logger.info(f"   üí∞ –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {comprehensive_report['walk_forward']['avg_period_return']:+.2%}")
        results_logger.info(f"   üéØ –í–∏–Ω—Ä–µ–π—Ç –ø–µ—Ä–∏–æ–¥–æ–≤: {comprehensive_report['walk_forward']['period_win_rate']:.1%}")
        results_logger.info(f"   üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {comprehensive_report['walk_forward']['cumulative_return']:+.2%}")
    
    results_logger.info("\nüï∞Ô∏è –ú–ù–û–ì–û–ú–ê–°–®–¢–ê–ë–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    action_names = ['Hold', 'Buy', 'Sell']
    results_logger.info(f"   üéØ –ö–æ–Ω—Å–µ–Ω—Å—É—Å: {action_names[comprehensive_report['multi_timeframe']['consensus_action']]}")
    results_logger.info(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {comprehensive_report['multi_timeframe']['consensus_confidence']:.1%}")
    results_logger.info(f"   üèõÔ∏è –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: {comprehensive_report['multi_timeframe']['market_regime']}")
    
    results_logger.info("\nü§ñ –°–ò–°–¢–ï–ú–ê:")
    results_logger.info(f"   üß† Ensemble —Å–∏–≥–Ω–∞–ª–æ–≤: {comprehensive_report['system_info']['ensemble_signals']}")
    results_logger.info(f"   üï∞Ô∏è –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {comprehensive_report['system_info']['tf_signals']}")
    results_logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {comprehensive_report['system_info']['data_records']:,}")
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏—Å—Ç–µ–º—ã
    score = 0
    if comprehensive_report['performance']['total_return'] > 0:
        score += 20
    if comprehensive_report['performance']['sharpe_ratio'] > 0.5:
        score += 20
    if comprehensive_report['performance']['max_drawdown'] < 0.2:
        score += 20
    if comprehensive_report['walk_forward']['period_win_rate'] > 0.5:
        score += 20
    if comprehensive_report['multi_timeframe']['consensus_confidence'] > 0.5:
        score += 20
    
    results_logger.info(f"\nüèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´: {score}/100")
    
    if score >= 80:
        results_logger.info("üü¢ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    elif score >= 60:
        results_logger.info("üü° –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
    elif score >= 40:
        results_logger.info("üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    else:
        results_logger.info("üî¥ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    
    return comprehensive_report


def main():
    """
    üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì–ê
    """
    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    setup_advanced_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì–ê V3.0")
    logger.info("=" * 80)
    logger.info("‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    logger.info("   üìä 7+ –ª–µ—Ç –¥–∞–Ω–Ω—ã—Ö (789K+ –∑–∞–ø–∏—Å–µ–π)")
    logger.info("   üîß 50+ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤") 
    logger.info("   üß† Ensemble ML + RL –º–æ–¥–µ–ª–∏")
    logger.info("   üìà Walk-forward –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    logger.info("   üï∞Ô∏è –ú–Ω–æ–≥–æ–º–∞—Å—à—Ç–∞–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    logger.info("   üèõÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤")
    logger.info("=" * 80)
    
    total_start_time = time.time()
    
    try:
        # === –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• ===
        logger.info("\nüìä –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê")
        df = prepare_advanced_data(use_extended_dataset=True)
        
        # === –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–ô ===
        logger.info("\nüéÆ –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–´–• –û–ö–†–£–ñ–ï–ù–ò–ô")
        train_env_vec, test_env, ensemble_envs, train_df, test_df = create_advanced_environments(df)
        
        # === –≠–¢–ê–ü 3: –û–ë–£–ß–ï–ù–ò–ï ENSEMBLE –°–ò–°–¢–ï–ú–´ ===
        logger.info("\nüß† –≠–¢–ê–ü 3: –û–ë–£–ß–ï–ù–ò–ï ENSEMBLE –°–ò–°–¢–ï–ú–´")
        ensemble_system = train_advanced_ensemble_system(train_df, ensemble_envs)
        
        # === –≠–¢–ê–ü 4: –ú–ù–û–ì–û–ú–ê–°–®–¢–ê–ë–ù–´–ô –ê–ù–ê–õ–ò–ó ===
        logger.info("\nüï∞Ô∏è –≠–¢–ê–ü 4: –ú–ù–û–ì–û–ú–ê–°–®–¢–ê–ë–ù–´–ô –ê–ù–ê–õ–ò–ó")
        multi_tf_analysis = run_multi_timeframe_analysis(df)
        
        # === –≠–¢–ê–ü 5: WALK-FORWARD –í–ê–õ–ò–î–ê–¶–ò–Ø ===
        logger.info("\nüìà –≠–¢–ê–ü 5: WALK-FORWARD –í–ê–õ–ò–î–ê–¶–ò–Ø")
        walk_forward_results = run_walk_forward_validation(df, ensemble_system)
        
        # === –≠–¢–ê–ü 6: –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===
        logger.info("\nüß™ –≠–¢–ê–ü 6: –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        data_processor = DataProcessor()
        test_results = run_comprehensive_backtesting(
            ensemble_system, test_env, multi_tf_analysis, data_processor
        )
        
        # === –≠–¢–ê–ü 7: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê ===
        logger.info("\nüìä –≠–¢–ê–ü 7: –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        comprehensive_report = generate_comprehensive_report(
            test_results, walk_forward_results, multi_tf_analysis
        )
        
        # === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===
        total_time = time.time() - total_start_time
        
        logger.info(f"\nüéâ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f}—Å")
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤: walk_forward_results/, multi_timeframe_analysis.png, trading_analysis.png")
        logger.info(f"üíæ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: logs/")
        
        return {
            'ensemble_system': ensemble_system,
            'test_results': test_results,
            'walk_forward_results': walk_forward_results,
            'multi_tf_analysis': multi_tf_analysis,
            'comprehensive_report': comprehensive_report
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None


if __name__ == "__main__":
    main() 