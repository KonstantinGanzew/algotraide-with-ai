"""
üß† ENSEMBLE –ú–û–î–ï–õ–ò –î–õ–Ø –ê–õ–ì–û–¢–†–ï–ô–î–ò–ù–ì–ê
–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import numpy as np
import pandas as pd
from typing import List, Dict, Optional, Tuple, Any
import logging
from pathlib import Path
import pickle
import torch
import torch.nn as nn
from sklearn.ensemble import RandomForestRegressor, VotingRegressor
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, mean_absolute_error
from stable_baselines3 import PPO, A2C, SAC
from stable_baselines3.common.vec_env import DummyVecEnv
import warnings

logger = logging.getLogger(__name__)


class EnsemblePredictor:
    """Ensemble –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, models_config: Dict[str, Dict] = None):
        self.models = {}
        self.weights = {}
        self.performance_history = {}
        self.is_trained = False
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if models_config is None:
            self.models_config = {
                'random_forest': {'n_estimators': 100, 'max_depth': 10, 'random_state': 42},
                'ridge': {'alpha': 1.0},
                'svr': {'kernel': 'rbf', 'C': 1.0, 'gamma': 'scale'},
                'linear': {}
            }
        else:
            self.models_config = models_config
    
    def _prepare_features(self, data: pd.DataFrame, target_col: str = 'future_return') -> Tuple[np.ndarray, np.ndarray]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        exclude_cols = ['timestamp', 'open', 'high', 'low', 'close', 'volume', target_col]
        feature_cols = [col for col in data.columns if col not in exclude_cols]
        
        X = data[feature_cols].fillna(0).values
        y = data[target_col].fillna(0).values if target_col in data.columns else None
        
        return X, y, feature_cols
    
    def train_base_models(self, train_data: pd.DataFrame, target_col: str = 'future_return') -> Dict[str, float]:
        """–û–±—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        logger.info("üéØ –û–±—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π ensemble...")
        
        X_train, y_train, self.feature_names = self._prepare_features(train_data, target_col)
        
        if y_train is None:
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é - –±—É–¥—É—â–∏–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
            y_train = train_data['close'].pct_change(5).shift(-5).fillna(0).values
        
        performance = {}
        
        # Random Forest
        try:
            self.models['random_forest'] = RandomForestRegressor(**self.models_config['random_forest'])
            self.models['random_forest'].fit(X_train, y_train)
            rf_pred = self.models['random_forest'].predict(X_train)
            performance['random_forest'] = mean_squared_error(y_train, rf_pred)
            logger.info(f"‚úÖ Random Forest MSE: {performance['random_forest']:.6f}")
        except Exception as e:
            logger.error(f"‚ùå Random Forest error: {e}")
        
        # Ridge Regression
        try:
            self.models['ridge'] = Ridge(**self.models_config['ridge'])
            self.models['ridge'].fit(X_train, y_train)
            ridge_pred = self.models['ridge'].predict(X_train)
            performance['ridge'] = mean_squared_error(y_train, ridge_pred)
            logger.info(f"‚úÖ Ridge MSE: {performance['ridge']:.6f}")
        except Exception as e:
            logger.error(f"‚ùå Ridge error: {e}")
        
        # Support Vector Regression
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–≤—ã–±–æ—Ä–∫—É –¥–ª—è SVR (–æ–Ω –º–µ–¥–ª–µ–Ω–Ω—ã–π)
            sample_size = min(10000, len(X_train))
            indices = np.random.choice(len(X_train), sample_size, replace=False)
            
            self.models['svr'] = SVR(**self.models_config['svr'])
            self.models['svr'].fit(X_train[indices], y_train[indices])
            svr_pred = self.models['svr'].predict(X_train[indices])
            performance['svr'] = mean_squared_error(y_train[indices], svr_pred)
            logger.info(f"‚úÖ SVR MSE: {performance['svr']:.6f}")
        except Exception as e:
            logger.error(f"‚ùå SVR error: {e}")
        
        # Linear Regression
        try:
            self.models['linear'] = LinearRegression(**self.models_config['linear'])
            self.models['linear'].fit(X_train, y_train)
            linear_pred = self.models['linear'].predict(X_train)
            performance['linear'] = mean_squared_error(y_train, linear_pred)
            logger.info(f"‚úÖ Linear MSE: {performance['linear']:.6f}")
        except Exception as e:
            logger.error(f"‚ùå Linear error: {e}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._calculate_weights(performance)
        self.is_trained = True
        
        return performance
    
    def _calculate_weights(self, performance: Dict[str, float]) -> None:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not performance:
            return
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MSE (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
        inverse_mse = {name: 1.0 / (mse + 1e-8) for name, mse in performance.items()}
        total_weight = sum(inverse_mse.values())
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        self.weights = {name: weight / total_weight for name, weight in inverse_mse.items()}
        
        logger.info("üìä –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π:")
        for name, weight in self.weights.items():
            logger.info(f"   {name}: {weight:.3f}")
    
    def predict(self, data: pd.DataFrame) -> np.ndarray:
        """Prediction using ensemble"""
        if not self.is_trained:
            logger.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!")
            return np.zeros(len(data))
        
        X, _, _ = self._prepare_features(data)
        predictions = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        for name, model in self.models.items():
            try:
                predictions[name] = model.predict(X)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {name}: {e}")
                predictions[name] = np.zeros(len(X))
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        ensemble_pred = np.zeros(len(X))
        for name, pred in predictions.items():
            weight = self.weights.get(name, 0)
            ensemble_pred += weight * pred
        
        return ensemble_pred
    
    def save_models(self, save_path: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ensemble –º–æ–¥–µ–ª–µ–π"""
        save_path = Path(save_path)
        save_path.mkdir(exist_ok=True)
        
        ensemble_data = {
            'models': self.models,
            'weights': self.weights,
            'feature_names': getattr(self, 'feature_names', []),
            'is_trained': self.is_trained
        }
        
        with open(save_path / 'ensemble_models.pkl', 'wb') as f:
            pickle.dump(ensemble_data, f)
        
        logger.info(f"üíæ Ensemble –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {save_path}")
    
    def load_models(self, load_path: str) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ ensemble –º–æ–¥–µ–ª–µ–π"""
        load_path = Path(load_path) / 'ensemble_models.pkl'
        
        if not load_path.exists():
            logger.error(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {load_path}")
            return
        
        with open(load_path, 'rb') as f:
            ensemble_data = pickle.load(f)
        
        self.models = ensemble_data['models']
        self.weights = ensemble_data['weights']
        self.feature_names = ensemble_data.get('feature_names', [])
        self.is_trained = ensemble_data['is_trained']
        
        logger.info(f"üì• Ensemble –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {load_path}")


class MultiAgentEnsemble:
    """Ensemble –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö RL –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, agent_configs: List[Dict] = None):
        self.agents = {}
        self.agent_weights = {}
        self.training_envs = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if agent_configs is None:
            self.agent_configs = [
                {'algorithm': 'PPO', 'policy': 'MlpPolicy', 'learning_rate': 3e-4},
                {'algorithm': 'PPO', 'policy': 'MlpPolicy', 'learning_rate': 1e-4},
                {'algorithm': 'A2C', 'policy': 'MlpPolicy', 'learning_rate': 3e-4},
            ]
        else:
            self.agent_configs = agent_configs
    
    def train_agents(self, environments: List[Any], total_timesteps: int = 10000) -> Dict[str, float]:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("ü§ñ –û–±—É—á–µ–Ω–∏–µ multi-agent ensemble...")
        
        performance = {}
        
        for i, (env, config) in enumerate(zip(environments, self.agent_configs)):
            agent_name = f"{config['algorithm']}_agent_{i}"
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                if config['algorithm'] == 'PPO':
                    agent = PPO(
                        config['policy'], 
                        env, 
                        learning_rate=config['learning_rate'],
                        verbose=0
                    )
                elif config['algorithm'] == 'A2C':
                    agent = A2C(
                        config['policy'], 
                        env, 
                        learning_rate=config['learning_rate'],
                        verbose=0
                    )
                elif config['algorithm'] == 'SAC':
                    agent = SAC(
                        config['policy'], 
                        env, 
                        learning_rate=config['learning_rate'],
                        verbose=0
                    )
                else:
                    logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {config['algorithm']}")
                    continue
                
                # –û–±—É—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                logger.info(f"üéì –û–±—É—á–µ–Ω–∏–µ {agent_name}...")
                agent.learn(total_timesteps=total_timesteps // len(self.agent_configs))
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                obs, _ = env.reset()
                total_reward = 0
                steps = 0
                
                for _ in range(100):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 100 —à–∞–≥–∞—Ö
                    action, _ = agent.predict(obs, deterministic=True)
                    obs, reward, done, truncated, _ = env.step(action)
                    total_reward += reward
                    steps += 1
                    
                    if done or truncated:
                        obs, _ = env.reset()
                
                avg_reward = total_reward / steps if steps > 0 else 0
                performance[agent_name] = avg_reward
                
                self.agents[agent_name] = agent
                logger.info(f"‚úÖ {agent_name} - —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {avg_reward:.4f}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {agent_name}: {e}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
        self._calculate_agent_weights(performance)
        
        return performance
    
    def _calculate_agent_weights(self, performance: Dict[str, float]) -> None:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤"""
        if not performance:
            return
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã (–≤—ã—à–µ = –ª—É—á—à–µ)
        min_reward = min(performance.values())
        if min_reward < 0:
            # –°–¥–≤–∏–≥–∞–µ–º –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
            shifted_rewards = {name: reward - min_reward + 1 for name, reward in performance.items()}
        else:
            shifted_rewards = performance
        
        total_weight = sum(shifted_rewards.values())
        
        if total_weight > 0:
            self.agent_weights = {name: weight / total_weight for name, weight in shifted_rewards.items()}
        else:
            # –†–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –µ—Å–ª–∏ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–ª–æ—Ö–∏–µ
            self.agent_weights = {name: 1.0 / len(performance) for name in performance.keys()}
        
        logger.info("ü§ñ –í–µ—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤:")
        for name, weight in self.agent_weights.items():
            logger.info(f"   {name}: {weight:.3f}")
    
    def predict_ensemble_action(self, observation: np.ndarray, method: str = 'weighted_vote') -> int:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ensemble –∞–≥–µ–Ω—Ç–æ–≤"""
        if not self.agents:
            logger.error("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤!")
            return 0  # Hold by default
        
        actions = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        for name, agent in self.agents.items():
            try:
                action, _ = agent.predict(observation, deterministic=True)
                actions[name] = int(action)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {name}: {e}")
                actions[name] = 0
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        if method == 'weighted_vote':
            # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            action_scores = {0: 0, 1: 0, 2: 0}  # Hold, Buy, Sell
            
            for name, action in actions.items():
                weight = self.agent_weights.get(name, 0)
                action_scores[action] += weight
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
            return max(action_scores.items(), key=lambda x: x[1])[0]
        
        elif method == 'majority_vote':
            # –ü—Ä–æ—Å—Ç–æ–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ
            from collections import Counter
            vote_counts = Counter(actions.values())
            return vote_counts.most_common(1)[0][0]
        
        elif method == 'best_agent':
            # –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–π –∞–≥–µ–Ω—Ç
            if self.agent_weights:
                best_agent = max(self.agent_weights.items(), key=lambda x: x[1])[0]
                return actions.get(best_agent, 0)
        
        return 0  # Default to Hold


class HybridEnsemble:
    """–ì–∏–±—Ä–∏–¥–Ω–∞—è ensemble —Å–∏—Å—Ç–µ–º–∞, –∫–æ–º–±–∏–Ω–∏—Ä—É—é—â–∞—è ML –∏ RL –º–æ–¥–µ–ª–∏"""
    
    def __init__(self):
        self.ml_ensemble = EnsemblePredictor()
        self.rl_ensemble = MultiAgentEnsemble()
        self.hybrid_weights = {'ml': 0.3, 'rl': 0.7}  # –ë–æ–ª—å—à–µ –≤–µ—Å–∞ RL
        self.is_trained = False
    
    def train_hybrid_system(self, train_data: pd.DataFrame, rl_environments: List[Any], 
                          timesteps: int = 10000) -> Dict[str, Any]:
        """–û–±—É—á–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîó –û–±—É—á–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π ensemble —Å–∏—Å—Ç–µ–º—ã...")
        
        results = {}
        
        # –û–±—É—á–∞–µ–º ML –º–æ–¥–µ–ª–∏
        logger.info("üìä –≠—Ç–∞–ø 1: –û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π...")
        ml_performance = self.ml_ensemble.train_base_models(train_data)
        results['ml_performance'] = ml_performance
        
        # –û–±—É—á–∞–µ–º RL –∞–≥–µ–Ω—Ç–æ–≤
        logger.info("ü§ñ –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ RL –∞–≥–µ–Ω—Ç–æ–≤...")
        rl_performance = self.rl_ensemble.train_agents(rl_environments, timesteps)
        results['rl_performance'] = rl_performance
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
        self._adjust_hybrid_weights(ml_performance, rl_performance)
        results['hybrid_weights'] = self.hybrid_weights
        
        self.is_trained = True
        logger.info("‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∞!")
        
        return results
    
    def _adjust_hybrid_weights(self, ml_performance: Dict[str, float], rl_performance: Dict[str, float]) -> None:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –º–µ–∂–¥—É ML –∏ RL"""
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ML (–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MSE)
        ml_avg = np.mean([1.0 / (mse + 1e-8) for mse in ml_performance.values()]) if ml_performance else 0
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å RL
        rl_avg = np.mean(list(rl_performance.values())) if rl_performance else 0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        if ml_avg + rl_avg > 0:
            total = ml_avg + rl_avg
            self.hybrid_weights['ml'] = ml_avg / total
            self.hybrid_weights['rl'] = rl_avg / total
        
        logger.info(f"üîó –ì–∏–±—Ä–∏–¥–Ω—ã–µ –≤–µ—Å–∞: ML={self.hybrid_weights['ml']:.3f}, RL={self.hybrid_weights['rl']:.3f}")
    
    def predict_hybrid_action(self, observation: np.ndarray, market_data: pd.DataFrame) -> int:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if not self.is_trained:
            logger.error("‚ùå –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –æ–±—É—á–µ–Ω–∞!")
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç ML
        ml_prediction = 0
        if len(market_data) > 0:
            try:
                ml_signal = self.ml_ensemble.predict(market_data.tail(1))
                if len(ml_signal) > 0:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –≤ –¥–µ–π—Å—Ç–≤–∏–µ
                    if ml_signal[0] > 0.01:  # –ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ
                        ml_prediction = 1
                    elif ml_signal[0] < -0.01:  # –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ
                        ml_prediction = 2
                    else:
                        ml_prediction = 0  # Hold
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è ML prediction error: {e}")
                ml_prediction = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç RL
        rl_prediction = self.rl_ensemble.predict_ensemble_action(observation)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        ml_weight = self.hybrid_weights['ml']
        rl_weight = self.hybrid_weights['rl']
        
        # –ü—Ä–æ—Å—Ç–æ–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        if ml_weight > rl_weight and ml_prediction != 0:
            return ml_prediction
        else:
            return rl_prediction
    
    def save_hybrid_system(self, save_path: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        save_path = Path(save_path)
        save_path.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ML –º–æ–¥–µ–ª–∏
        self.ml_ensemble.save_models(save_path / 'ml_models')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            'hybrid_weights': self.hybrid_weights,
            'is_trained': self.is_trained
        }
        
        with open(save_path / 'hybrid_config.pkl', 'wb') as f:
            pickle.dump(config, f)
        
        logger.info(f"üíæ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {save_path}")


def create_ensemble_system(train_data: pd.DataFrame, rl_environments: List[Any] = None) -> HybridEnsemble:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ensemble —Å–∏—Å—Ç–µ–º—ã"""
    
    logger.info("üéØ –°–æ–∑–¥–∞–Ω–∏–µ ensemble —Å–∏—Å—Ç–µ–º—ã...")
    
    hybrid = HybridEnsemble()
    
    if rl_environments is None:
        logger.info("‚ö†Ô∏è RL –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ML ensemble")
        hybrid.ml_ensemble.train_base_models(train_data)
        hybrid.hybrid_weights = {'ml': 1.0, 'rl': 0.0}
    else:
        hybrid.train_hybrid_system(train_data, rl_environments, timesteps=5000)
    
    return hybrid


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    print("üß† Ensemble –º–æ–¥—É–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: from src.core.ensemble_models import create_ensemble_system") 