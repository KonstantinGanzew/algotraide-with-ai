"""
üöÄ –ó–ê–ì–†–£–ó–ß–ò–ö –î–ê–ù–ù–´–• –° BINANCE - –ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú
–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance API –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: 5m, 1h, 4h, 1d
"""

import pandas as pd
import numpy as np
import ccxt
import time
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class BinanceMultiTimeframeLoader:
    """
    –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å Binance –¥–ª—è –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–Ω–∞–ª–∏–∑–∞
    """
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    TIMEFRAMES = {
        '5m': '5m',
        '1h': '1h', 
        '4h': '4h',
        '1d': '1d'
    }
    
    # –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    REQUEST_LIMITS = {
        '5m': 1000,  # –ú–∞–∫—Å 1000 —Å–≤–µ—á–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å
        '1h': 1000,
        '4h': 1000, 
        '1d': 1000
    }
    
    def __init__(self, data_folder: str = "data"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        
        Args:
            data_folder: –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        self.data_folder = Path(data_folder)
        self.data_folder.mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance exchange
        try:
            self.exchange = ccxt.binance({
                'apiKey': '',  # –ü—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç API –∫–ª—é—á–µ–π
                'secret': '',
                'sandbox': False,
                'rateLimit': 1200,  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º—Å)
                'enableRateLimit': True,
            })
            logger.info("‚úÖ Binance exchange –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binance: {e}")
            raise e
    
    def calculate_timeframe_period(self, timeframe: str) -> tuple:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 2 –≥–æ–¥–∞
        
        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º ('5m', '1h', '4h', '1d')
            
        Returns:
            tuple: (start_timestamp, end_timestamp)
        """
        end_date = datetime.now()
        start_date = end_date - timedelta(days=730)  # 2 –≥–æ–¥–∞
        
        start_ts = int(start_date.timestamp() * 1000)
        end_ts = int(end_date.timestamp() * 1000)
        
        return start_ts, end_ts
    
    def fetch_ohlcv_batch(self, symbol: str, timeframe: str, start_ts: int, limit: int) -> List:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π –ø–æ—Ä—Ü–∏–∏ OHLCV –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC/USDT')
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            start_ts: –ù–∞—á–∞–ª—å–Ω—ã–π timestamp
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            
        Returns:
            List: OHLCV –¥–∞–Ω–Ω—ã–µ
        """
        try:
            data = self.exchange.fetch_ohlcv(
                symbol=symbol,
                timeframe=timeframe,
                since=start_ts,
                limit=limit
            )
            return data
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol} {timeframe}: {e}")
            return []
    
    def download_timeframe_data(self, symbol: str, timeframe: str) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ 
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            pd.DataFrame: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ {symbol} {timeframe} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞...")
        
        start_ts, end_ts = self.calculate_timeframe_period(timeframe)
        limit = self.REQUEST_LIMITS[timeframe]
        
        all_data = []
        current_ts = start_ts
        request_count = 0
        
        while current_ts < end_ts:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
            batch_data = self.fetch_ohlcv_batch(symbol, timeframe, current_ts, limit)
            
            if not batch_data:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {timeframe} —Å timestamp {current_ts}")
                break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
            all_data.extend(batch_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            last_candle_time = batch_data[-1][0]
            current_ts = last_candle_time + self.get_timeframe_ms(timeframe)
            
            request_count += 1
            
            # –õ–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if request_count % 10 == 0:
                logger.info(f"üìà {timeframe}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_data)} —Å–≤–µ—á–µ–π (–∑–∞–ø—Ä–æ—Å–æ–≤: {request_count})")
            
            # –°–æ–±–ª—é–¥–∞–µ–º rate limits
            time.sleep(0.1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏ end_ts
            if last_candle_time >= end_ts:
                break
        
        if not all_data:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {timeframe}")
            return pd.DataFrame()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
        df = pd.DataFrame(all_data)
        df.columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        df = df.drop_duplicates(subset=['timestamp']).sort_values('timestamp')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
        df = df[(df['timestamp'] >= start_ts) & (df['timestamp'] <= end_ts)]
        
        logger.info(f"‚úÖ {symbol} {timeframe}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {pd.to_datetime(df['timestamp'].min(), unit='ms')} - {pd.to_datetime(df['timestamp'].max(), unit='ms')}")
        
        return df
    
    def get_timeframe_ms(self, timeframe: str) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            int: –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        """
        timeframe_ms = {
            '1m': 60 * 1000,
            '5m': 5 * 60 * 1000,
            '15m': 15 * 60 * 1000,
            '1h': 60 * 60 * 1000,
            '4h': 4 * 60 * 60 * 1000,
            '1d': 24 * 60 * 60 * 1000
        }
        return timeframe_ms.get(timeframe, 60 * 1000)
    
    def save_data(self, df: pd.DataFrame, filename: str) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
        
        Args:
            df: DataFrame –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞
        """
        if df.empty:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ: {filename}")
            return
            
        filepath = self.data_folder / filename
        df.to_csv(filepath, index=False)
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename} ({len(df)} –∑–∞–ø–∏—Å–µ–π, {filepath.stat().st_size / 1024 / 1024:.1f} MB)")
    
    def validate_data(self, df: pd.DataFrame, timeframe: str) -> Dict:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            df: DataFrame –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if df.empty:
            return {'status': 'empty', 'errors': ['–ü—É—Å—Ç–æ–π –¥–∞—Ç–∞—Å–µ—Ç']}
        
        errors = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {missing_columns}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ OHLC –ª–æ–≥–∏–∫–∏
        ohlc_errors = (
            (df['high'] < df['low']) |
            (df['close'] > df['high']) |
            (df['close'] < df['low']) |
            (df['open'] > df['high']) |
            (df['open'] < df['low'])
        ).sum()
        
        if ohlc_errors > 0:
            warnings.append(f"OHLC –æ—à–∏–±–∫–∏: {ohlc_errors} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        negative_prices = (df[['open', 'high', 'low', 'close']] <= 0).sum().sum()
        if negative_prices > 0:
            errors.append(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã: {negative_prices}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
        expected_interval_ms = self.get_timeframe_ms(timeframe)
        time_diffs = df['timestamp'].diff().dropna()
        irregular_intervals = (time_diffs != expected_interval_ms).sum()
        
        if irregular_intervals > len(df) * 0.1:  # –ë–æ–ª–µ–µ 10% –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            warnings.append(f"–ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: {irregular_intervals} –∏–∑ {len(df)}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_records': len(df),
            'date_range': {
                'start': pd.to_datetime(df['timestamp'].min(), unit='ms').strftime('%Y-%m-%d %H:%M:%S'),
                'end': pd.to_datetime(df['timestamp'].max(), unit='ms').strftime('%Y-%m-%d %H:%M:%S')
            },
            'missing_values': df.isnull().sum().to_dict(),
            'price_range': {
                'min_price': df['low'].min(),
                'max_price': df['high'].max(),
                'avg_price': df['close'].mean()
            },
            'volume_stats': {
                'total_volume': df['volume'].sum(),
                'avg_volume': df['volume'].mean(),
                'zero_volume_count': (df['volume'] == 0).sum()
            }
        }
        
        return {
            'status': 'ok' if not errors else 'error',
            'errors': errors,
            'warnings': warnings,
            'stats': stats
        }
    
    def download_all_timeframes(self, symbol: str = 'BTC/USDT') -> Dict[str, pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        """
        logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú –î–ê–ù–ù–´–•")
        logger.info("=" * 60)
        logger.info(f"üéØ –°–∏–º–≤–æ–ª: {symbol}")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞") 
        logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {list(self.TIMEFRAMES.keys())}")
        logger.info("=" * 60)
        
        results = {}
        
        for timeframe in self.TIMEFRAMES.keys():
            try:
                logger.info(f"\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ {timeframe}...")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df = self.download_timeframe_data(symbol, timeframe)
                
                if not df.empty:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                    validation = self.validate_data(df, timeframe)
                    
                    if validation['status'] == 'ok':
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                        symbol_clean = symbol.replace('/', '')
                        filename = f"{symbol_clean}_{timeframe}_2y.csv"
                        self.save_data(df, filename)
                        
                        results[timeframe] = df
                        
                        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        stats = validation['stats']
                        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {timeframe}:")
                        logger.info(f"   üìà –ó–∞–ø–∏—Å–µ–π: {stats['total_records']:,}")
                        logger.info(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {stats['date_range']['start']} - {stats['date_range']['end']}")
                        logger.info(f"   üí∞ –¶–µ–Ω—ã: ${stats['price_range']['min_price']:.2f} - ${stats['price_range']['max_price']:.2f}")
                        logger.info(f"   üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${stats['price_range']['avg_price']:.2f}")
                        
                        if validation['warnings']:
                            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {validation['warnings']}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {timeframe}: {validation['errors']}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {timeframe}")
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {timeframe}: {e}")
                continue
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
            time.sleep(1)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("\n" + "=" * 60)
        logger.info("üìã –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò")
        logger.info("=" * 60)
        
        for timeframe, df in results.items():
            size_mb = len(df) * df.memory_usage(deep=True).sum() / 1024 / 1024
            logger.info(f"‚úÖ {timeframe:>3}: {len(df):>7,} –∑–∞–ø–∏—Å–µ–π ({size_mb:.1f} MB)")
        
        logger.info(f"üìÅ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
        logger.info("üéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        
        return results


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    """
    print("üöÄ BINANCE –ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú –ó–ê–ì–†–£–ó–ß–ò–ö")
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö BTC/USDT –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞")
    print("‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: 5m, 1h, 4h, 1d")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
        loader = BinanceMultiTimeframeLoader()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        results = loader.download_all_timeframes('BTC/USDT')
        
        if results:
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(results)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
            print("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É 'data/'")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    
    return True


if __name__ == "__main__":
    # –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    requirements_path = Path("requirements.txt")
    if requirements_path.exists():
        with open(requirements_path, 'r') as f:
            content = f.read()
        
        if 'ccxt' not in content:
            with open(requirements_path, 'a') as f:
                f.write('\n# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞–º–∏\nccxt>=4.0.0\n')
            print("üìù –î–æ–±–∞–≤–ª–µ–Ω ccxt –≤ requirements.txt")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    success = main()
    
    if success:
        print("\nüéØ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print("   - –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ –≤ –ø–∞–ø–∫–µ data/")
        print("   - –§–æ—Ä–º–∞—Ç: timestamp,open,high,low,close,volume")
        print("   - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö") 