#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ main.py
"""

print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")

try:
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞...")
    from main import Config, setup_device, check_gpu_requirements
    print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    print(f"   - WINDOW_SIZE: {Config.WINDOW_SIZE}")
    print(f"   - INITIAL_BALANCE: {Config.INITIAL_BALANCE}")
    print(f"   - DATA_FILE: {Config.DATA_FILE}")
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OK")
    
    # –¢–µ—Å—Ç GPU —Ñ—É–Ω–∫—Ü–∏–π
    print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU —Ñ—É–Ω–∫—Ü–∏–π...")
    gpu_info = check_gpu_requirements()
    print(f"   - PyTorch –≤–µ—Ä—Å–∏—è: {gpu_info['torch_version']}")
    print(f"   - CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {gpu_info['cuda_available']}")
    print(f"   - GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {gpu_info['device_count']}")
    
    device = setup_device()
    print(f"   - –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    print("‚úÖ GPU —Ñ—É–Ω–∫—Ü–∏–∏ OK")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    from main import load_and_prepare_data
    import os
    
    data_path = "data/BTC_5_96w.csv"
    if os.path.exists(data_path):
        df = load_and_prepare_data(data_path)
        print(f"   - –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
        print(f"   - –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö OK")
    else:
        print(f"‚ö†Ô∏è  –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_path}")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc() 