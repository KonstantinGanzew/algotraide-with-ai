"""
üöÄ SENTIMENT –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V3.5 - ACTIVE TRADING EDITION
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
import gymnasium as gym
from gymnasium import spaces
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple, Any
from datetime import datetime
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')


class ActiveTradingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
    INITIAL_BALANCE = 10000
    RISK_PER_TRADE = 0.1  # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∏—Å–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    MAX_POSITION_SIZE = 0.8  # –ë–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    STOP_LOSS = 0.05  # 5% —Å—Ç–æ–ø-–ª–æ—Å—Å
    TAKE_PROFIT = 0.1  # 10% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
    MIN_SIGNAL_THRESHOLD = 0.05  # –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ —Å–∏–≥–Ω–∞–ª–∞
    FORCE_TRADE_INTERVAL = 50   # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∫–∞–∂–¥—ã–µ 50 —à–∞–≥–æ–≤
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    WINDOW_SIZE = 24  # –£–º–µ–Ω—å—à–µ–Ω–æ –æ–∫–Ω–æ
    TOTAL_TIMESTEPS = 8000
    LEARNING_RATE = 3e-4  # –£–≤–µ–ª–∏—á–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
    
    # –°—Ç–∏–º—É–ª—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    TRADING_BONUS = 5.0    # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
    INACTIVITY_PENALTY = -2.0  # –®—Ç—Ä–∞—Ñ –∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ


class SimpleTechnicalAnalyzer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
    
    def add_simple_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        print("üîß –†–∞—Å—á–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['returns'] = df['close'].pct_change()
        df['price_change'] = df['close'].diff()
        df['volatility'] = df['returns'].rolling(10).std()
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        df['sma_5'] = df['close'].rolling(5).mean()
        df['sma_10'] = df['close'].rolling(10).mean()
        df['sma_20'] = df['close'].rolling(20).mean()
        
        # –°–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        df['sma_signal'] = np.where(df['sma_5'] > df['sma_10'], 1, -1)
        df['trend_signal'] = np.where(df['close'] > df['sma_20'], 1, -1)
        
        # RSI —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=10).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=10).mean()
        rs = gain / (loss + 1e-8)  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        df['rsi'] = 100 - (100 / (1 + rs))
        df['rsi_signal'] = np.where(df['rsi'] < 30, 1, np.where(df['rsi'] > 70, -1, 0))
        
        # Momentum
        df['momentum'] = df['close'] / df['close'].shift(5) - 1
        df['momentum_signal'] = np.where(df['momentum'] > 0.02, 1, np.where(df['momentum'] < -0.02, -1, 0))
        
        # Volume analysis
        df['volume_ma'] = df['volume'].rolling(10).mean()
        df['volume_signal'] = np.where(df['volume'] > df['volume_ma'] * 1.5, 1, 0)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
        df['technical_score'] = (
            df['sma_signal'] * 0.3 +
            df['trend_signal'] * 0.3 +
            df['rsi_signal'] * 0.2 +
            df['momentum_signal'] * 0.2
        )
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 15 —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        return df


class ActiveSentimentGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
    
    def generate_active_sentiment(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        print("üì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π...")
        
        n_points = len(df)
        np.random.seed(42)
        
        # –ë–∞–∑–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –±–æ–ª—å—à–µ–π –∞–º–ø–ª–∏—Ç—É–¥–æ–π
        base_sentiment = np.random.normal(0, 0.4, n_points)
        
        # –ë–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–æ–±—ã—Ç–∏—è
        events = np.random.choice([0, 1], size=n_points, p=[0.9, 0.1])
        event_impact = np.random.normal(0, 0.8, n_points) * events
        
        # –¢—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã
        price_momentum = df['close'].pct_change(periods=5).fillna(0)
        sentiment_from_price = price_momentum * 5  # –£—Å–∏–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º
        total_sentiment = base_sentiment + event_impact + sentiment_from_price
        total_sentiment = np.clip(total_sentiment, -1, 1)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        df['sentiment_twitter'] = total_sentiment + np.random.normal(0, 0.1, n_points)
        df['sentiment_reddit'] = total_sentiment + np.random.normal(0, 0.15, n_points)
        df['sentiment_news'] = total_sentiment + np.random.normal(0, 0.1, n_points)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        for col in ['sentiment_twitter', 'sentiment_reddit', 'sentiment_news']:
            df[col] = np.clip(df[col], -1, 1)
        
        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        df['overall_sentiment'] = (
            df['sentiment_twitter'] * 0.4 +
            df['sentiment_reddit'] * 0.3 +
            df['sentiment_news'] * 0.3
        )
        
        # –°–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        df['sentiment_signal'] = np.where(
            df['overall_sentiment'] > ActiveTradingConfig.MIN_SIGNAL_THRESHOLD, 1,
            np.where(df['overall_sentiment'] < -ActiveTradingConfig.MIN_SIGNAL_THRESHOLD, -1, 0)
        )
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è {n_points} —Ç–æ—á–µ–∫")
        return df


class ActiveFeatureExtractor(BaseFeaturesExtractor):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Feature Extractor –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self, observation_space: gym.Space, features_dim: int = 128):
        super().__init__(observation_space, features_dim)
        
        if observation_space.shape is not None:
            self.seq_len = observation_space.shape[0]
            self.input_features = observation_space.shape[1]
        else:
            self.seq_len = ActiveTradingConfig.WINDOW_SIZE
            self.input_features = 20
        
        # –ü—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        self.net = nn.Sequential(
            nn.Linear(self.input_features, 64),
            nn.ReLU(),
            nn.Dropout(0.2),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, features_dim),
            nn.ReLU()
        )
    
    def forward(self, observations: torch.Tensor) -> torch.Tensor:
        batch_size, seq_len, features = observations.shape
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        last_obs = observations[:, -1, :]
        output = self.net(last_obs)
        
        return output


class ActiveTradingEnv(gym.Env):
    """–ê–∫—Ç–∏–≤–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    
    def __init__(self, df: pd.DataFrame):
        super().__init__()
        
        self.df = df.reset_index(drop=True)
        self.window_size = ActiveTradingConfig.WINDOW_SIZE
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        self.feature_columns = [col for col in numeric_columns if col not in 
                               ['open', 'high', 'low', 'close', 'volume']]
        
        self.action_space = spaces.Discrete(3)  # Hold, Buy, Sell
        
        n_features = len(self.feature_columns)
        self.observation_space = spaces.Box(
            low=-np.inf, high=np.inf,
            shape=(self.window_size, n_features),
            dtype=np.float32
        )
        
        self._prepare_data()
        self._reset_state()
    
    def _prepare_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        feature_data = self.df[self.feature_columns].fillna(0)
        feature_data = feature_data.replace([np.inf, -np.inf], 0)
        
        # Z-score –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        normalized_data = (feature_data - feature_data.mean()) / (feature_data.std() + 1e-8)
        normalized_data = np.clip(normalized_data, -3, 3)
        
        self.normalized_df = pd.DataFrame(normalized_data, columns=self.feature_columns)
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(self.feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    def _reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.current_step = self.window_size
        self.balance = ActiveTradingConfig.INITIAL_BALANCE
        self.btc_amount = 0.0
        self.entry_price = 0.0
        self.last_trade_step = 0
        
        self.total_trades = 0
        self.profitable_trades = 0
        self.portfolio_history = [float(ActiveTradingConfig.INITIAL_BALANCE)]
        self.trades_history = []
        
        # –î–ª—è —Å—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.steps_without_trade = 0
        self.max_drawdown = 0.0
        self.peak_value = ActiveTradingConfig.INITIAL_BALANCE
    
    def reset(self, seed=None, options=None):
        self._reset_state()
        return self._get_observation(), {}
    
    def _get_observation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        start_idx = max(0, self.current_step - self.window_size)
        end_idx = self.current_step
        
        obs = self.normalized_df.iloc[start_idx:end_idx].values
        
        if len(obs) < self.window_size:
            padding = np.tile(obs[0], (self.window_size - len(obs), 1))
            obs = np.vstack([padding, obs])
        
        return obs.astype(np.float32)
    
    def _get_current_price(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        if self.current_step >= len(self.df):
            return self.df.iloc[-1]['close']
        return self.df.iloc[self.current_step]['close']
    
    def _get_current_datetime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        if self.current_step >= len(self.df):
            return str(self.df.iloc[-1]['datetime'])
        return str(self.df.iloc[self.current_step]['datetime'])
    
    def _should_force_trade(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return self.steps_without_trade >= ActiveTradingConfig.FORCE_TRADE_INTERVAL
    
    def _get_trading_signals(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if self.current_step >= len(self.df):
            return {'technical': 0, 'sentiment': 0, 'combined': 0}
        
        current_data = self.df.iloc[self.current_step]
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
        technical_signal = current_data.get('technical_score', 0)
        
        # –°–∏–≥–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        sentiment_signal = current_data.get('overall_sentiment', 0)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        combined_signal = technical_signal * 0.6 + sentiment_signal * 0.4
        
        return {
            'technical': technical_signal,
            'sentiment': sentiment_signal,
            'combined': combined_signal
        }
    
    def _execute_active_trade(self, action: int, current_price: float) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        signals = self._get_trading_signals()
        force_trade = self._should_force_trade()
        
        trade_result = {'executed': False, 'type': None, 'signals': signals}
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
        if force_trade and self.balance > 100 and self.btc_amount == 0:
            action = 1  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
            print(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–∞ —à–∞–≥–µ {self.current_step}")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        if action == 1 and self.balance > 100:  # Buy
            # –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–∏ —Å–ª–∞–±—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            if signals['combined'] > -0.5 or force_trade:
                position_size = ActiveTradingConfig.RISK_PER_TRADE
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
                if signals['combined'] > 0.2:
                    position_size *= 1.5
                
                position_size = min(position_size, ActiveTradingConfig.MAX_POSITION_SIZE)
                
                investment = self.balance * position_size
                amount = investment / current_price
                commission = investment * 0.001
                
                self.btc_amount += amount
                self.balance -= investment + commission
                self.entry_price = current_price
                self.last_trade_step = self.current_step
                self.steps_without_trade = 0
                
                trade_result.update({
                    'executed': True, 'type': 'BUY',
                    'amount': amount, 'price': current_price,
                    'investment': investment,
                    'datetime': self._get_current_datetime(),
                    'forced': force_trade
                })
                
        elif action == 2 and self.btc_amount > 0:  # Sell
            # –ü—Ä–æ–¥–∞–µ–º –ø—Ä–∏ –ª—é–±–æ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ –∏–ª–∏ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
            current_profit = (current_price - self.entry_price) / self.entry_price
            
            if (signals['combined'] < 0.1 or 
                current_profit > 0.03 or  # 3% –ø—Ä–∏–±—ã–ª—å
                current_profit < -0.04 or  # 4% —É–±—ã—Ç–æ–∫
                self.current_step - self.last_trade_step > 100):  # –î–æ–ª–≥–æ–µ –¥–µ—Ä–∂–∞–Ω–∏–µ
                
                revenue = self.btc_amount * current_price
                commission = revenue * 0.001
                profit = revenue - self.btc_amount * self.entry_price
                
                if profit > 0:
                    self.profitable_trades += 1
                
                self.balance += revenue - commission
                self.btc_amount = 0.0
                self.entry_price = 0.0
                self.last_trade_step = self.current_step
                self.steps_without_trade = 0
                
                trade_result.update({
                    'executed': True, 'type': 'SELL',
                    'profit': profit, 'price': current_price,
                    'datetime': self._get_current_datetime()
                })
        
        if trade_result['executed']:
            self.total_trades += 1
            self.trades_history.append(trade_result)
        else:
            self.steps_without_trade += 1
        
        return trade_result
    
    def _calculate_portfolio_value(self) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        current_price = self._get_current_price()
        return self.balance + self.btc_amount * current_price
    
    def _calculate_active_reward(self) -> float:
        """–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã —Å —Å—Ç–∏–º—É–ª–∞–º–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        current_portfolio = self._calculate_portfolio_value()
        prev_portfolio = self.portfolio_history[-1]
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_change = (current_portfolio - prev_portfolio) / prev_portfolio
        base_reward = portfolio_change * 100
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
        if len(self.trades_history) > 0:
            last_trade = self.trades_history[-1]
            if last_trade.get('executed', False):
                base_reward += ActiveTradingConfig.TRADING_BONUS
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
        if self.steps_without_trade > ActiveTradingConfig.FORCE_TRADE_INTERVAL:
            base_reward += ActiveTradingConfig.INACTIVITY_PENALTY
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏
        if current_portfolio > self.peak_value:
            self.peak_value = current_portfolio
        current_drawdown = (self.peak_value - current_portfolio) / self.peak_value
        self.max_drawdown = max(self.max_drawdown, current_drawdown)
        
        return base_reward
    
    def step(self, action: int) -> Tuple[np.ndarray, float, bool, bool, Dict[str, Any]]:
        """–®–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        current_price = self._get_current_price()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        trade_result = self._execute_active_trade(action, current_price)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_step += 1
        portfolio_value = self._calculate_portfolio_value()
        self.portfolio_history.append(portfolio_value)
        
        # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
        reward = self._calculate_active_reward()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        done = (
            self.current_step >= len(self.df) - 1 or
            portfolio_value <= ActiveTradingConfig.INITIAL_BALANCE * 0.3
        )
        
        info = {
            'portfolio_value': portfolio_value,
            'balance': self.balance,
            'btc_amount': self.btc_amount,
            'total_trades': self.total_trades,
            'profitable_trades': self.profitable_trades,
            'max_drawdown': self.max_drawdown,
            'current_price': current_price,
            'datetime': self._get_current_datetime(),
            'steps_without_trade': self.steps_without_trade,
            'trade_result': trade_result
        }
        
        return self._get_observation(), reward, done, False, info


def load_and_prepare_data() -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv("data/BTC_5_2w.csv")
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df['datetime'] = df['timestamp']
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['datetime'].min()} - {df['datetime'].max()}")
    print(f"üìà –¶–µ–Ω—ã: ${df['close'].min():.2f} - ${df['close'].max():.2f}")
    print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(df)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    analyzer = SimpleTechnicalAnalyzer()
    df = analyzer.add_simple_indicators(df)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    sentiment_gen = ActiveSentimentGenerator()
    df = sentiment_gen.generate_active_sentiment(df)
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = df.fillna(method='ffill').fillna(method='bfill')
    df = df.replace([np.inf, -np.inf], 0)
    
    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç —Å {len(df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
    return df


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã V3.5"""
    print("üöÄ –ó–ê–ü–£–°–ö SENTIMENT –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ V3.5 - ACTIVE TRADING EDITION")
    print("=" * 80)
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ô –¢–û–†–ì–û–í–õ–ò")
    print("-" * 60)
    combined_df = load_and_prepare_data()
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüéÆ –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ê–ö–¢–ò–í–ù–û–ì–û –¢–û–†–ì–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("-" * 60)
    env = ActiveTradingEnv(combined_df)
    vec_env = DummyVecEnv([lambda: env])
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å {len(env.feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    print("\nüß† –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –ú–û–î–ï–õ–ò –î–õ–Ø –ê–ö–¢–ò–í–ù–û–ô –¢–û–†–ì–û–í–õ–ò")
    print("-" * 60)
    
    policy_kwargs = dict(
        features_extractor_class=ActiveFeatureExtractor,
        features_extractor_kwargs=dict(features_dim=128),
        net_arch=[128, 64],
        activation_fn=torch.nn.ReLU
    )
    
    model = PPO(
        'MlpPolicy',
        vec_env,
        learning_rate=ActiveTradingConfig.LEARNING_RATE,
        n_steps=512,
        batch_size=64,
        n_epochs=3,
        gamma=0.95,
        gae_lambda=0.9,
        clip_range=0.2,
        ent_coef=0.02,  # –ë–æ–ª—å—à–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        vf_coef=0.5,
        max_grad_norm=0.5,
        policy_kwargs=policy_kwargs,
        verbose=1
    )
    
    print("‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–æ–∑–¥–∞–Ω–∞")
    
    # 4. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\nüéì –≠–¢–ê–ü 4: –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –ù–ê –ê–ö–¢–ò–í–ù–£–Æ –¢–û–†–ì–û–í–õ–Æ")
    print("-" * 60)
    model.learn(total_timesteps=ActiveTradingConfig.TOTAL_TIMESTEPS)
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # 5. –ê–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüß™ –≠–¢–ê–ü 5: –ê–ö–¢–ò–í–ù–û–ï BACKTESTING")
    print("-" * 60)
    
    obs, _ = env.reset()
    results = []
    trades_log = []
    
    print("üíº –ù–∞—á–∏–Ω–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é...")
    
    for step in range(min(1500, len(combined_df) - env.window_size - 1)):
        action, _ = model.predict(obs, deterministic=True)
        obs, reward, done, truncated, info = env.step(int(action))
        
        results.append({
            'step': step,
            'datetime': info['datetime'],
            'portfolio_value': info['portfolio_value'],
            'current_price': info['current_price'],
            'balance': info['balance'],
            'btc_amount': info['btc_amount'],
            'total_trades': info['total_trades'],
            'profitable_trades': info['profitable_trades'],
            'steps_without_trade': info['steps_without_trade']
        })
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
        if info['trade_result']['executed']:
            trades_log.append(info['trade_result'])
            trade_type = info['trade_result']['type']
            price = info['trade_result']['price']
            datetime = info['trade_result']['datetime']
            forced = info['trade_result'].get('forced', False)
            force_msg = " (–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û)" if forced else ""
            print(f"üîÑ {trade_type} –ø–æ —Ü–µ–Ω–µ ${price:.2f} –≤ {datetime}{force_msg}")
        
        if done:
            break
    
    # 6. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    print("\nüìä –≠–¢–ê–ü 6: –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–ô –¢–û–†–ì–û–í–õ–ò")
    print("-" * 60)
    
    if results:
        final_result = results[-1]
        start_date = results[0]['datetime']
        end_date = final_result['datetime']
        
        initial_value = ActiveTradingConfig.INITIAL_BALANCE
        final_value = final_result['portfolio_value']
        total_return = (final_value - initial_value) / initial_value * 100
        
        total_trades = final_result['total_trades']
        profitable_trades = final_result['profitable_trades']
        win_rate = (profitable_trades / max(total_trades, 1)) * 100
        
        # Buy & Hold —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        start_price = results[0]['current_price']
        end_price = final_result['current_price']
        bnh_return = (end_price - start_price) / start_price * 100
        
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ö–¢–ò–í–ù–û–ô –¢–û–†–ì–û–í–õ–ò V3.5")
        print("=" * 65)
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {start_date} - {end_date}")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_value:,.2f}")
        print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${final_value:,.2f}")
        print(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: {total_return:+.2f}%")
        print(f"üìà Buy & Hold Bitcoin: {bnh_return:+.2f}%")
        print(f"üéØ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –Ω–∞–¥ B&H: {total_return - bnh_return:+.2f}%")
        print(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profitable_trades} ({win_rate:.1f}%)")
        print(f"‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_trades / len(results) * 100:.1f} —Å–¥–µ–ª–æ–∫ –Ω–∞ 100 —à–∞–≥–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫
        if trades_log:
            buy_trades = [t for t in trades_log if t['type'] == 'BUY']
            sell_trades = [t for t in trades_log if t['type'] == 'SELL' and 'profit' in t]
            forced_trades = [t for t in trades_log if t.get('forced', False)]
            
            print(f"üîÑ –ü–æ–∫—É–ø–æ–∫: {len(buy_trades)}")
            print(f"üîÑ –ü—Ä–æ–¥–∞–∂: {len(sell_trades)}")
            print(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(forced_trades)}")
            
            if sell_trades:
                profits = [t['profit'] for t in sell_trades]
                avg_profit = np.mean(profits)
                print(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å —Å–¥–µ–ª–∫–∏: ${avg_profit:.2f}")
                print(f"üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${max(profits):.2f}")
                print(f"üòû –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${min(profits):.2f}")
        
        print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û–ô –¢–û–†–ì–û–í–õ–ò V3.5")
        print("=" * 65)
        
        if total_trades > 5:
            if total_return > bnh_return and win_rate > 45:
                print("üü¢ –£–°–ü–ï–•: –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –ø–∞—Å—Å–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é!")
            elif total_trades > 10 and win_rate > 40:
                print("üü° –ü–†–û–ì–†–ï–°–°: –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ —Ç–æ—Ä–≥—É–µ—Ç, –µ—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!")
            else:
                print("üî∂ –†–ê–ó–í–ò–¢–ò–ï: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—Å—Ç—å, –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏")
        else:
            print("üî¥ –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        
        print(f"\nüí° –°–∏—Å—Ç–µ–º–∞ —Å–æ–≤–µ—Ä—à–∏–ª–∞ {total_trades} —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥")
        print(f"üìà –ü–æ–∫–∞–∑–∞–ª–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {total_return:+.2f}% –ø—Ä–æ—Ç–∏–≤ {bnh_return:+.2f}% B&H")
        print("üéâ –ê–ö–¢–ò–í–ù–û–ï BACKTESTING V3.5 –ó–ê–í–ï–†–®–ï–ù–û!")
    
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


if __name__ == "__main__":
    main() 