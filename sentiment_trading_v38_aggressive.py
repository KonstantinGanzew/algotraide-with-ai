"""
üöÄ AGGRESSIVE SENTIMENT –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V3.8
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π –¥–ª—è 20% –≥–æ–¥–æ–≤—ã—Ö
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
import gymnasium as gym
from gymnasium import spaces
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple, Any
from datetime import datetime
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')


class AggressiveConfig:
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 20% –≥–æ–¥–æ–≤—ã—Ö"""
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    INITIAL_BALANCE = 10000
    RISK_PER_TRADE = 0.15  # –û—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    MAX_POSITION_SIZE = 0.8  # –ü–æ—á—Ç–∏ –≤–µ—Å—å –∫–∞–ø–∏—Ç–∞–ª
    STOP_LOSS = 0.08  # –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π —Å—Ç–æ–ø
    TAKE_PROFIT = 0.25  # –ë–æ–ª—å—à–æ–π –ø—Ä–æ—Ñ–∏—Ç
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Å–∞
    TECHNICAL_WEIGHT = 0.8
    SENTIMENT_WEIGHT = 0.2
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    WINDOW_SIZE = 48
    TOTAL_TIMESTEPS = 15000
    LEARNING_RATE = 1e-4
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    MIN_SIGNAL_STRENGTH = 0.2  # –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥
    MAX_DAILY_TRADES = 8  # –ë–æ–ª—å—à–µ —Å–¥–µ–ª–æ–∫
    FORCE_TRADE_PROBABILITY = 0.1  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏


class SimpleDataLoader:
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    
    def __init__(self, data_path: str):
        self.data_path = data_path
    
    def load_and_prepare_data(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.data_path}...")
        df = pd.read_csv(self.data_path)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df['datetime'] = df['timestamp']
        
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['datetime'].min()} - {df['datetime'].max()}")
        print(f"üìà –¶–µ–Ω—ã: ${df['close'].min():.2f} - ${df['close'].max():.2f}")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(df)}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        print("üîß –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # –ë–∞–∑–æ–≤—ã–µ
        df['returns'] = df['close'].pct_change()
        df['volatility'] = df['returns'].rolling(24).std()
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        df['sma_10'] = df['close'].rolling(10).mean()
        df['sma_20'] = df['close'].rolling(20).mean()
        df['sma_50'] = df['close'].rolling(50).mean()
        df['ema_12'] = df['close'].ewm(span=12).mean()
        df['ema_26'] = df['close'].ewm(span=26).mean()
        
        # RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # MACD
        df['macd'] = df['ema_12'] - df['ema_26']
        df['macd_signal'] = df['macd'].ewm(span=9).mean()
        df['macd_histogram'] = df['macd'] - df['macd_signal']
        
        # Bollinger Bands
        df['bb_middle'] = df['close'].rolling(20).mean()
        bb_std = df['close'].rolling(20).std()
        df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
        df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
        df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'])
        
        # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['volume_sma'] = df['volume'].rolling(20).mean()
        df['volume_ratio'] = df['volume'] / df['volume_sma']
        
        # –ú–æ–º–µ–Ω—Ç—É–º
        df['momentum_5'] = df['close'] / df['close'].shift(5) - 1
        df['momentum_10'] = df['close'] / df['close'].shift(10) - 1
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        np.random.seed(42)
        n = len(df)
        
        # –ë–∞–∑–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –º–æ–º–µ–Ω—Ç—É–º–æ–º –∏ RSI
        momentum_signal = df['momentum_10'].fillna(0)
        rsi_signal = (df['rsi'].fillna(50) - 50) / 50  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è RSI
        
        base_sentiment = (momentum_signal * 0.6 + rsi_signal * 0.4) + np.random.normal(0, 0.1, n)
        base_sentiment = np.clip(base_sentiment, -1, 1)
        
        df['sentiment_twitter'] = base_sentiment + np.random.normal(0, 0.05, n)
        df['sentiment_reddit'] = base_sentiment + np.random.normal(0, 0.08, n)
        df['sentiment_news'] = base_sentiment + np.random.normal(0, 0.06, n)
        
        df['overall_sentiment'] = (
            df['sentiment_twitter'] * 0.5 +
            df['sentiment_reddit'] * 0.3 +
            df['sentiment_news'] * 0.2
        )
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        df = df.fillna(method='ffill').fillna(method='bfill').fillna(0)
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len([col for col in df.columns if col not in ['timestamp', 'datetime', 'open', 'high', 'low', 'close', 'volume']])} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        return df


class AggressiveFeatureExtractor(BaseFeaturesExtractor):
    """–ü—Ä–æ—Å—Ç–æ–π Feature Extractor"""
    
    def __init__(self, observation_space: gym.Space, features_dim: int = 256):
        super().__init__(observation_space, features_dim)
        
        self.input_features = observation_space.shape[1] if observation_space.shape else 20
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Ç—å
        self.net = nn.Sequential(
            nn.Linear(self.input_features, 128),
            nn.ReLU(),
            nn.Dropout(0.1),
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, features_dim),
            nn.Tanh()
        )
    
    def forward(self, observations: torch.Tensor) -> torch.Tensor:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        last_obs = observations[:, -1, :]
        return self.net(last_obs)


class AggressiveTradingEnv(gym.Env):
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    
    def __init__(self, df: pd.DataFrame):
        super().__init__()
        
        self.df = df.reset_index(drop=True)
        self.window_size = AggressiveConfig.WINDOW_SIZE
        
        # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        important_features = [
            'returns', 'volatility', 'rsi', 'macd', 'macd_histogram', 
            'bb_position', 'volume_ratio', 'momentum_5', 'momentum_10', 'overall_sentiment'
        ]
        
        self.feature_columns = [col for col in important_features if col in df.columns]
        
        self.action_space = spaces.Discrete(3)  # Hold, Buy, Sell
        
        n_features = len(self.feature_columns)
        self.observation_space = spaces.Box(
            low=-np.inf, high=np.inf,
            shape=(self.window_size, n_features),
            dtype=np.float32
        )
        
        self._prepare_data()
        self._reset_state()
    
    def _prepare_data(self):
        """–ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        feature_data = self.df[self.feature_columns].fillna(0)
        feature_data = feature_data.replace([np.inf, -np.inf], 0)
        
        # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        scaler = StandardScaler()
        normalized_data = scaler.fit_transform(feature_data)
        normalized_data = np.clip(normalized_data, -3, 3)
        
        self.normalized_df = pd.DataFrame(normalized_data, columns=self.feature_columns, index=feature_data.index)
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(self.feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    def _reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.current_step = self.window_size
        self.balance = AggressiveConfig.INITIAL_BALANCE
        self.btc_amount = 0.0
        self.entry_price = 0.0
        
        self.total_trades = 0
        self.profitable_trades = 0
        self.portfolio_history = [float(AggressiveConfig.INITIAL_BALANCE)]
        self.trades_history = []
        
        self.max_drawdown = 0.0
        self.peak_value = AggressiveConfig.INITIAL_BALANCE
        self.last_action = 0
        self.steps_since_last_trade = 0
    
    def reset(self, seed=None, options=None):
        self._reset_state()
        return self._get_observation(), {}
    
    def _get_observation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        start_idx = max(0, self.current_step - self.window_size)
        end_idx = self.current_step
        
        obs = self.normalized_df.iloc[start_idx:end_idx].values
        
        if len(obs) < self.window_size:
            padding = np.tile(obs[0] if len(obs) > 0 else np.zeros(len(self.feature_columns)), 
                            (self.window_size - len(obs), 1))
            obs = np.vstack([padding, obs])
        
        return obs.astype(np.float32)
    
    def _get_current_price(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        if self.current_step >= len(self.df):
            return self.df.iloc[-1]['close']
        return self.df.iloc[self.current_step]['close']
    
    def _get_current_datetime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        if self.current_step >= len(self.df):
            return str(self.df.iloc[-1]['datetime'])
        return str(self.df.iloc[self.current_step]['datetime'])
    
    def _calculate_simple_signal(self) -> float:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if self.current_step >= len(self.df):
            return 0.0
        
        current_data = self.df.iloc[self.current_step]
        
        # RSI —Å–∏–≥–Ω–∞–ª
        rsi = current_data.get('rsi', 50)
        if rsi < 30:
            rsi_signal = 0.5  # Oversold
        elif rsi > 70:
            rsi_signal = -0.5  # Overbought
        else:
            rsi_signal = (50 - rsi) / 50 * 0.3
        
        # MACD —Å–∏–≥–Ω–∞–ª
        macd_hist = current_data.get('macd_histogram', 0)
        macd_signal = np.tanh(macd_hist * 20) * 0.3
        
        # Bollinger —Å–∏–≥–Ω–∞–ª
        bb_pos = current_data.get('bb_position', 0.5)
        if bb_pos < 0.2:
            bb_signal = 0.4
        elif bb_pos > 0.8:
            bb_signal = -0.4
        else:
            bb_signal = 0
        
        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        sentiment = current_data.get('overall_sentiment', 0)
        sentiment_signal = sentiment * 0.3
        
        # –ú–æ–º–µ–Ω—Ç—É–º
        momentum = current_data.get('momentum_10', 0)
        momentum_signal = np.tanh(momentum * 5) * 0.2
        
        total_signal = rsi_signal + macd_signal + bb_signal + sentiment_signal + momentum_signal
        return np.clip(total_signal, -1, 1)
    
    def _execute_trade(self, action: int, current_price: float) -> Dict[str, Any]:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        signal_strength = self._calculate_simple_signal()
        trade_result = {'executed': False, 'type': None, 'signal_strength': signal_strength}
        
        self.steps_since_last_trade += 1
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –µ—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫
        force_trade = (self.steps_since_last_trade > 100 and 
                      np.random.random() < AggressiveConfig.FORCE_TRADE_PROBABILITY)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        if self.btc_amount > 0 and self.entry_price > 0:
            price_change = (current_price - self.entry_price) / self.entry_price
            
            if price_change <= -AggressiveConfig.STOP_LOSS or price_change >= AggressiveConfig.TAKE_PROFIT:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
                revenue = self.btc_amount * current_price
                commission = revenue * 0.001
                profit = revenue - self.btc_amount * self.entry_price - commission
                
                if profit > 0:
                    self.profitable_trades += 1
                
                self.balance += revenue - commission
                self.btc_amount = 0.0
                self.entry_price = 0.0
                self.steps_since_last_trade = 0
                
                exit_type = 'TAKE_PROFIT' if price_change >= AggressiveConfig.TAKE_PROFIT else 'STOP_LOSS'
                trade_result.update({
                    'executed': True, 'type': f'SELL_{exit_type}',
                    'profit': profit, 'price': current_price,
                    'datetime': self._get_current_datetime()
                })
                self.total_trades += 1
                self.trades_history.append(trade_result)
                
                return trade_result
        
        # –û–±—ã—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è
        if (action == 1 or force_trade) and self.balance > 100:  # Buy
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
            if signal_strength > AggressiveConfig.MIN_SIGNAL_STRENGTH or force_trade:
                position_size = AggressiveConfig.RISK_PER_TRADE
                if signal_strength > 0.5:
                    position_size = min(position_size * 1.5, AggressiveConfig.MAX_POSITION_SIZE)
                
                investment = self.balance * position_size
                amount = investment / current_price
                commission = investment * 0.001
                
                if investment + commission <= self.balance:
                    self.btc_amount += amount
                    self.balance -= investment + commission
                    self.entry_price = current_price
                    self.steps_since_last_trade = 0
                    
                    trade_result.update({
                        'executed': True, 'type': 'BUY',
                        'amount': amount, 'price': current_price,
                        'investment': investment, 'force_trade': force_trade,
                        'datetime': self._get_current_datetime()
                    })
                    
        elif action == 2 and self.btc_amount > 0:  # Sell
            # –ü—Ä–æ–¥–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –∏ —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            if signal_strength < -AggressiveConfig.MIN_SIGNAL_STRENGTH or force_trade:
                revenue = self.btc_amount * current_price
                commission = revenue * 0.001
                profit = revenue - self.btc_amount * self.entry_price - commission
                
                if profit > 0:
                    self.profitable_trades += 1
                
                self.balance += revenue - commission
                self.btc_amount = 0.0
                self.entry_price = 0.0
                self.steps_since_last_trade = 0
                
                trade_result.update({
                    'executed': True, 'type': 'SELL_MANUAL',
                    'profit': profit, 'price': current_price,
                    'force_trade': force_trade,
                    'datetime': self._get_current_datetime()
                })
        
        if trade_result['executed']:
            self.total_trades += 1
            self.trades_history.append(trade_result)
        
        return trade_result
    
    def _calculate_portfolio_value(self) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        current_price = self._get_current_price()
        return self.balance + self.btc_amount * current_price
    
    def _calculate_reward(self) -> float:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã"""
        current_portfolio = self._calculate_portfolio_value()
        prev_portfolio = self.portfolio_history[-1]
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        portfolio_change = (current_portfolio - prev_portfolio) / prev_portfolio
        base_reward = portfolio_change * 500  # –í—ã—Å–æ–∫–∏–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
        if current_portfolio > self.peak_value:
            self.peak_value = current_portfolio
        current_drawdown = (self.peak_value - current_portfolio) / self.peak_value
        self.max_drawdown = max(self.max_drawdown, current_drawdown)
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if self.total_trades > 0:
            activity_bonus = min(self.total_trades * 0.1, 10)
            base_reward += activity_bonus
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if self.steps_since_last_trade > 200:
            base_reward -= 5
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
        if portfolio_change > 0.005:
            base_reward += 20
        
        return base_reward
    
    def step(self, action: int) -> Tuple[np.ndarray, float, bool, bool, Dict[str, Any]]:
        """–®–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        current_price = self._get_current_price()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        trade_result = self._execute_trade(action, current_price)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_step += 1
        portfolio_value = self._calculate_portfolio_value()
        self.portfolio_history.append(portfolio_value)
        
        # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
        reward = self._calculate_reward()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        done = (
            self.current_step >= len(self.df) - 1 or
            portfolio_value <= AggressiveConfig.INITIAL_BALANCE * 0.2 or
            self.max_drawdown > 0.7
        )
        
        info = {
            'portfolio_value': portfolio_value,
            'balance': self.balance,
            'btc_amount': self.btc_amount,
            'total_trades': self.total_trades,
            'profitable_trades': self.profitable_trades,
            'max_drawdown': self.max_drawdown,
            'signal_strength': trade_result.get('signal_strength', 0),
            'current_price': current_price,
            'datetime': self._get_current_datetime(),
            'trade_result': trade_result,
            'steps_since_last_trade': self.steps_since_last_trade
        }
        
        return self._get_observation(), reward, done, False, info


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ AGGRESSIVE SENTIMENT –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V3.8")
    print("üéØ –¶–ï–õ–¨: 20% –ì–û–î–û–í–´–• –° –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ô –¢–û–†–ì–û–í–õ–ï–ô")
    print("=" * 75)
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –≠–¢–ê–ü 1: –ë–´–°–¢–†–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    data_loader = SimpleDataLoader("data/BTC_5_2w.csv")
    combined_df = data_loader.load_and_prepare_data()
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüéÆ –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ê–ì–†–ï–°–°–ò–í–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("-" * 50)
    env = AggressiveTradingEnv(combined_df)
    vec_env = DummyVecEnv([lambda: env])
    print(f"‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏
    print("\nüß† –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –ü–†–û–°–¢–û–ô –ú–û–î–ï–õ–ò")
    print("-" * 50)
    
    policy_kwargs = dict(
        features_extractor_class=AggressiveFeatureExtractor,
        features_extractor_kwargs=dict(features_dim=256),
        net_arch=[256, 128],
        activation_fn=torch.nn.ReLU
    )
    
    model = PPO(
        'MlpPolicy',
        vec_env,
        learning_rate=AggressiveConfig.LEARNING_RATE,
        n_steps=1024,
        batch_size=32,
        n_epochs=4,
        gamma=0.99,
        gae_lambda=0.95,
        clip_range=0.2,
        ent_coef=0.01,
        vf_coef=0.5,
        max_grad_norm=0.5,
        policy_kwargs=policy_kwargs,
        verbose=1
    )
    
    print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
    
    # 4. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print("\nüéì –≠–¢–ê–ü 4: –ò–ù–¢–ï–ù–°–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï")
    print("-" * 50)
    model.learn(total_timesteps=AggressiveConfig.TOTAL_TIMESTEPS)
    print("‚úÖ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # 5. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüí∞ –≠–¢–ê–ü 5: –ê–ì–†–ï–°–°–ò–í–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("-" * 50)
    
    obs, _ = env.reset()
    results = []
    trades_log = []
    
    print("üíº –ù–∞—á–∏–Ω–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é...")
    
    for step in range(min(4000, len(combined_df) - env.window_size - 1)):
        action, _ = model.predict(obs, deterministic=True)
        obs, reward, done, truncated, info = env.step(int(action))
        
        results.append({
            'step': step,
            'datetime': info['datetime'],
            'portfolio_value': info['portfolio_value'],
            'current_price': info['current_price'],
            'balance': info['balance'],
            'btc_amount': info['btc_amount'],
            'total_trades': info['total_trades'],
            'profitable_trades': info['profitable_trades'],
            'max_drawdown': info['max_drawdown'],
            'signal_strength': info['signal_strength'],
            'steps_since_last_trade': info['steps_since_last_trade']
        })
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
        if info['trade_result']['executed']:
            trades_log.append(info['trade_result'])
            trade_type = info['trade_result']['type']
            price = info['trade_result']['price']
            datetime = info['trade_result']['datetime']
            signal = info['signal_strength']
            force = info['trade_result'].get('force_trade', False)
            force_str = " [–ü–†–ò–ù–£–î]" if force else ""
            print(f"‚ö° {trade_type} ${price:.2f} —Å–∏–≥–Ω–∞–ª:{signal:.2f}{force_str} {datetime}")
        
        if done:
            break
    
    # 6. –ê–Ω–∞–ª–∏–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –≠–¢–ê–ü 6: –ê–ù–ê–õ–ò–ó –ê–ì–†–ï–°–°–ò–í–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("-" * 50)
    
    if results:
        final_result = results[-1]
        
        initial_value = AggressiveConfig.INITIAL_BALANCE
        final_value = final_result['portfolio_value']
        total_return = (final_value - initial_value) / initial_value * 100
        
        # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –Ω–∞ 2 –≥–æ–¥–∞
        days_tested = len(results) / 12  # 5-–º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        years_tested = days_tested / 365
        annualized_return = (final_value / initial_value) ** (1 / years_tested) - 1 if years_tested > 0 else 0
        two_year_projection = initial_value * ((1 + annualized_return) ** 2)
        two_year_profit = two_year_projection - initial_value
        
        total_trades = final_result['total_trades']
        profitable_trades = final_result['profitable_trades']
        win_rate = (profitable_trades / max(total_trades, 1)) * 100
        max_drawdown = final_result['max_drawdown'] * 100
        
        # Buy & Hold —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        start_price = results[0]['current_price']
        end_price = final_result['current_price']
        bnh_return = (end_price - start_price) / start_price * 100
        
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ì–†–ï–°–°–ò–í–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
        print("=" * 70)
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initial_value:,.2f}")
        print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${final_value:,.2f}")
        print(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_return:+.2f}%")
        print(f"üìà –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {annualized_return*100:+.2f}%")
        print(f"üéØ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞ 2 –≥–æ–¥–∞: ${two_year_projection:,.2f}")
        print(f"üíé –ü—Ä–∏–±—ã–ª—å –∑–∞ 2 –≥–æ–¥–∞: ${two_year_profit:,.2f}")
        print(f"üèÜ –¶–µ–ª—å 14400: {'‚úÖ –î–û–°–¢–ò–ì–ù–£–¢–ê' if two_year_profit >= 14400 else '‚ùå –ù–ï –î–û–°–¢–ò–ì–ù–£–¢–ê'}")
        print(f"üìä Buy & Hold: {bnh_return:+.2f}%")
        print(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades} ({win_rate:.1f}%)")
        print(f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫
        if trades_log:
            buy_trades = [t for t in trades_log if t['type'] == 'BUY']
            sell_trades = [t for t in trades_log if 'profit' in t]
            force_trades = [t for t in trades_log if t.get('force_trade', False)]
            
            print(f"üìä –ü–æ–∫—É–ø–æ–∫: {len(buy_trades)}")
            print(f"üìä –ü—Ä–æ–¥–∞–∂: {len(sell_trades)}")
            print(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö: {len(force_trades)}")
            
            if sell_trades:
                profits = [t['profit'] for t in sell_trades]
                avg_profit = np.mean(profits)
                print(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_profit:.2f}")
                print(f"üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${max(profits):.2f}")
                print(f"üòû –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${min(profits):.2f}")
        
        print("\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ê–ì–†–ï–°–°–ò–í–ù–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò")
        print("=" * 60)
        
        if two_year_profit >= 14400 and total_trades > 10:
            print("üü¢ –û–¢–õ–ò–ß–ù–û! –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –î–û–°–¢–ò–ì–õ–ê —Ü–µ–ª–∏ 20% –≥–æ–¥–æ–≤—ã—Ö!")
            print(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ 2 –≥–æ–¥–∞: ${two_year_profit:,.2f}")
        elif total_return > 10 and total_trades > 5:
            print("üü° –•–û–†–û–®–û! –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            print(f"üöÄ –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 20% –≥–æ–¥–æ–≤—ã—Ö")
        elif total_trades > 0:
            print("üî∂ –ü–†–û–ì–†–ï–°–°! –ï—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            print(f"üîß –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}%, —Å–¥–µ–ª–æ–∫: {total_trades}")
        else:
            print("üî¥ –ù–ï–¢ –ê–ö–¢–ò–í–ù–û–°–¢–ò! –¢—Ä–µ–±—É–µ—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        print(f"\nüöÄ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {annualized_return*100:+.2f}% –≥–æ–¥–æ–≤—ã—Ö")
        print(f"‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_trades} —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥")
        print("‚ú® –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


if __name__ == "__main__":
    main() 