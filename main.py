import numpy as np
import pandas as pd
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
import gymnasium as gym
from gymnasium import spaces
import matplotlib.pyplot as plt
from stable_baselines3.common.callbacks import BaseCallback
from typing import Tuple, Dict, Any
import torch


# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
class Config:
    # –§–∞–π–ª—ã –∏ –ø—É—Ç–∏
    DATA_FOLDER = "data/"
    DATA_FILE = "BTC_5_96w.csv"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
    WINDOW_SIZE = 50
    INITIAL_BALANCE = 10000
    POSITIONS_LIMIT = 3
    PASSIVITY_THRESHOLD = 100
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    AUTO_DEVICE = True        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    FORCE_CPU = False         # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
    DEVICE = "cpu"            # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
    BUY_REWARD = 0.1
    SELL_PENALTY = 0.05
    INVALID_ACTION_PENALTY = 0.5
    PROFIT_BONUS = 2.0
    UNREALIZED_PROFIT_MULTIPLIER = 0.05
    REPETITIVE_ACTION_PENALTY = 0.01
    PASSIVITY_PENALTY = 0.1
    FINAL_PROFIT_MULTIPLIER = 0.01
    LOSS_PENALTY = 50
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    EMA_FAST_SPAN = 12
    EMA_SLOW_SPAN = 26
    RSI_WINDOW = 14
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
    TOTAL_TIMESTEPS = 50000
    PPO_ENT_COEF = 0.05
    EARLY_STOPPING_THRESHOLD = -0.001
    EARLY_STOPPING_PATIENCE = 5
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    FIGURE_SIZE = (14, 6)


def setup_device():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (CPU/GPU)"""
    if Config.FORCE_CPU:
        device = "cpu"
        print("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
    elif Config.AUTO_DEVICE:
        if torch.cuda.is_available():
            device = "cuda"
            try:
                gpu_name = torch.cuda.get_device_name(0)
                gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
                print(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU: {gpu_name}")
                print(f"üíæ –ü–∞–º—è—Ç—å GPU: {gpu_memory:.1f} GB")
            except:
                print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU")
        else:
            device = "cpu"
            print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
    else:
        device = Config.DEVICE
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    Config.DEVICE = device
    return device


def check_gpu_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è GPU"""
    info = {
        "torch_version": torch.__version__,
        "cuda_available": torch.cuda.is_available(),
        "device_count": torch.cuda.device_count() if torch.cuda.is_available() else 0,
        "current_device": None,
        "gpu_memory": None
    }
    
    if torch.cuda.is_available():
        try:
            info["current_device"] = torch.cuda.current_device()
            info["gpu_memory"] = torch.cuda.get_device_properties(0).total_memory / 1024**3
        except:
            pass
        
    return info


class EarlyStoppingCallback(BaseCallback):
    """Callback –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, threshold=-0.001, patience=5, verbose=1):
        super().__init__(verbose)
        self.threshold = threshold
        self.patience = patience
        self.counter = 0

    def _on_step(self) -> bool:
        return True  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è


class TradingEnv(gym.Env):
    """–¢–æ—Ä–≥–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º"""
    
    def __init__(self, df, window_size=50, initial_balance=10000):
        super().__init__()
        self.df = df.reset_index(drop=True)
        self.window_size = window_size
        self.initial_balance = initial_balance

        # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        self.action_space = spaces.Discrete(3)  # 0: Hold, 1: Buy, 2: Sell
        self.observation_space = spaces.Box(
            low=-np.inf, high=np.inf, shape=(window_size, df.shape[1]), dtype=np.float32
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._reset_state()

    def _reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.balance = self.initial_balance
        self.entry_price = 0.0
        self.position = 0
        self.position_size = 0
        self.current_step = self.window_size
        self.trades = []
        self.last_action = None
        self.order_size_usd = self.initial_balance / Config.POSITIONS_LIMIT
        self.wait_counter = 0

    def reset(self, seed=None, options=None):
        """–°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self._reset_state()
        return self._get_observation(), {}

    def _get_observation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        obs = self.df.iloc[self.current_step - self.window_size:self.current_step].values
        return obs.astype(np.float32)

    def _calculate_profit(self, current_price):
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏"""
        if self.position_size == 0 or self.entry_price == 0:
            return 0.0
        
        profit_per_coin = current_price - self.entry_price
        return (profit_per_coin * self.order_size_usd * self.position_size) / self.entry_price

    def step(self, action):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        reward = 0.0
        done = False

        current_price = self.df.iloc[self.current_step]['close']

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        if action == 1:  # –ü–æ–∫—É–ø–∫–∞
            if self.position_size < Config.POSITIONS_LIMIT:
                if self.position_size > 0:
                    self.entry_price = ((self.entry_price * self.position_size + current_price) 
                                      / (self.position_size + 1))
                else:
                    self.entry_price = current_price
                self.position_size += 1
                self.position = 1
                reward += Config.BUY_REWARD
                
        elif action == 2:  # –ü—Ä–æ–¥–∞–∂–∞
            if self.position_size > 0:
                profit_total = self._calculate_profit(current_price)
                self.balance += profit_total
                reward += profit_total
                if profit_total > 0:
                    reward += Config.PROFIT_BONUS
                self.trades.append(profit_total)
                self.position_size = 0
                self.position = 0
                self.entry_price = 0.0

        self.last_action = action
        self.current_step += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —ç–ø–∏–∑–æ–¥–∞
        if self.current_step >= len(self.df) - 1:
            done = True
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é
            if self.position_size > 0:
                final_profit = self._calculate_profit(current_price)
                self.balance += final_profit
                reward += final_profit
                self.trades.append(final_profit)

        return self._get_observation(), reward, done, False, {}

    def render(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        print(f"Step: {self.current_step}, Balance: {self.balance:.2f}, Position: {self.position}")


def load_and_prepare_data(file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    df = pd.read_csv(file_path)
    df = df[['open', 'high', 'low', 'close', 'volume']].copy()

    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['ema_fast'] = df['close'].ewm(span=Config.EMA_FAST_SPAN, adjust=False).mean()
    df['ema_slow'] = df['close'].ewm(span=Config.EMA_SLOW_SPAN, adjust=False).mean()

    # RSI
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=Config.RSI_WINDOW).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=Config.RSI_WINDOW).mean()
    rs = gain / loss
    df['rsi'] = 100 - (100 / (1 + rs))

    # –û—á–∏—Å—Ç–∫–∞ NaN
    df.dropna(inplace=True)
    df.reset_index(drop=True, inplace=True)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    cols_to_normalize = ['open', 'high', 'low', 'close', 'volume', 'ema_fast', 'ema_slow']
    for col in cols_to_normalize:
        mean_val = df[col].mean()
        std_val = df[col].std()
        df[col] = (df[col] - mean_val) / std_val

    return df


def train_model(env):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ PPO"""
    device = setup_device()
    vec_env = DummyVecEnv([lambda: env])
    
    print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ PPO –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device}")
    model = PPO("MlpPolicy", env, verbose=1, device=device, ent_coef=Config.PPO_ENT_COEF)
    
    print(f"üéÆ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ {Config.TOTAL_TIMESTEPS} —à–∞–≥–∞—Ö...")
    model.learn(total_timesteps=Config.TOTAL_TIMESTEPS, callback=EarlyStoppingCallback())
    return model


def test_model(model, test_env, df):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è"""
    obs, _ = test_env.reset()
    
    actual_balance = []
    prices = []
    actions = []
    
    max_steps = len(df) - test_env.window_size - 10  # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
    step_count = 0

    print(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º {max_steps} —à–∞–≥–æ–≤)...")
    
    while step_count < max_steps:
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ —Ç–∏–ø–∞
            action_result = model.predict(obs, deterministic=True)
            action = int(action_result[0]) if isinstance(action_result[0], (np.ndarray, list)) else int(action_result[0])
            
            obs, reward, done, truncated, _ = test_env.step(action)
            step_count += 1

            if test_env.current_step >= len(df):
                print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö")
                break

            current_price = df.iloc[test_env.current_step]['close']
            
            # –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞
            if test_env.position_size > 0 and test_env.entry_price > 0:
                unrealized = test_env._calculate_profit(current_price)
                total_balance = test_env.balance + unrealized
            else:
                total_balance = test_env.balance

            actual_balance.append(total_balance)
            prices.append(current_price)
            actions.append(action)

            if done:
                print("–≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                break
                
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if step_count % 5000 == 0:
                print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {step_count}/{max_steps} —à–∞–≥–æ–≤")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ —à–∞–≥–µ {step_count}: {e}")
            break

    print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {step_count} —à–∞–≥–æ–≤")
    return actual_balance, prices, actions


def visualize_results(actual_balance, prices, actions):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if not actual_balance:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
        
    plt.figure(figsize=Config.FIGURE_SIZE)

    # –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
    plt.subplot(2, 1, 1)
    plt.plot(actual_balance, label='Agent Balance', linewidth=2)
    plt.title("–ë–∞–ª–∞–Ω—Å –∞–≥–µ–Ω—Ç–∞", fontsize=14)
    plt.xlabel("–®–∞–≥")
    plt.ylabel("–ë–∞–ª–∞–Ω—Å (USDT)")
    plt.legend()
    plt.grid(True, alpha=0.3)

    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏–π
    plt.subplot(2, 1, 2)
    plt.plot(prices, label='BTC Price', alpha=0.7, linewidth=1)
    
    buy_signals = [i for i, a in enumerate(actions) if a == 1]
    sell_signals = [i for i, a in enumerate(actions) if a == 2]
    
    if buy_signals:
        plt.scatter(buy_signals, [prices[i] for i in buy_signals], 
                   marker='^', color='green', label='Buy', s=50, alpha=0.8)
    if sell_signals:
        plt.scatter(sell_signals, [prices[i] for i in sell_signals], 
                   marker='v', color='red', label='Sell', s=50, alpha=0.8)

    plt.title("–¶–µ–Ω–∞ BTC –∏ –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞", fontsize=14)
    plt.xlabel("–®–∞–≥")
    plt.ylabel("–¶–µ–Ω–∞ BTC")
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –±–∞–∑–µ RL")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        gpu_info = check_gpu_requirements()
        print(f"üìä PyTorch –≤–µ—Ä—Å–∏—è: {gpu_info['torch_version']}")
        print(f"üîß –£—Å—Ç—Ä–æ–π—Å—Ç–≤ GPU: {gpu_info['device_count']}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        file_path = Config.DATA_FOLDER + Config.DATA_FILE
        print(f"\nüìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {file_path}")
        df = load_and_prepare_data(file_path)
        
        print(f"üìà –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ
        print("\nüéì –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
        env = TradingEnv(df, initial_balance=Config.INITIAL_BALANCE)
        model = train_model(env)
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        test_env = TradingEnv(df, initial_balance=Config.INITIAL_BALANCE)
        actual_balance, prices, actions = test_model(model, test_env, df)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if actual_balance:
            initial_balance = Config.INITIAL_BALANCE
            final_balance = actual_balance[-1]
            profit_percentage = ((final_balance - initial_balance) / initial_balance) * 100
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {initial_balance}")
            print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {final_balance:.2f}")
            print(f"–ü—Ä–∏–±—ã–ª—å: {final_balance - initial_balance:.2f} ({profit_percentage:.2f}%)")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(test_env.trades)}")
            
            if test_env.trades:
                profitable_trades = sum(1 for trade in test_env.trades if trade > 0)
                win_rate = (profitable_trades / len(test_env.trades)) * 100
                print(f"–í–∏–Ω—Ä–µ–π—Ç: {win_rate:.2f}%")

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
            visualize_results(actual_balance, prices, actions)
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()