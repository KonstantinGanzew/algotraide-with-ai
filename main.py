"""
üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ô –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò

–ü–†–û–ë–õ–ï–ú–ê: –°–∏—Å—Ç–µ–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –Ω–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–ª–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å—é
–†–ï–®–ï–ù–ò–ï: –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏

–ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è _calculate_profit() - —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å
2. ‚úÖ –£–ü–†–û–©–ï–ù–ê —Ñ—É–Ω–∫—Ü–∏—è _calculate_dynamic_order_size() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
3. ‚úÖ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ê —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π - –æ—Å–Ω–æ–≤–∞–Ω–∞ –¢–û–õ–¨–ö–û –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
4. ‚úÖ –£–ë–†–ê–ù–´ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
5. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–ø–∏—Å—ã–≤–∞–µ—Ç/–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞
6. ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´ —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
7. ‚úÖ –£–õ–£–ß–®–ï–ù–û —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ (2% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É)
8. ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å (1:3)

–°–¢–ê–†–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: 
- –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—ã ~32000, –Ω–æ –±–∞–ª–∞–Ω—Å –æ—Å—Ç–∞–≤–∞–ª—Å—è 10000 USDT
- 841 —Å–¥–µ–ª–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- –ù–∞–≥—Ä–∞–¥—ã –Ω–∞–ø—Ä—è–º—É—é –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç —Å —Ä–æ—Å—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞
- –ê–ª–≥–æ—Ä–∏—Ç–º —É—á–∏—Ç—Å—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
- –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏

–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¢–û–†–ì–û–í–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –î–õ–Ø –ü–û–í–´–®–ï–ù–ò–Ø –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò

–ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
1. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç (2% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É –≤–º–µ—Å—Ç–æ 15%)
2. –£–õ–£–ß–®–ï–ù–ù–û–ï —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (2% –∫ 6% –≤–º–µ—Å—Ç–æ 3% –∫ 10%)
3. –£–ë–†–ê–ù–ê —Å–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
4. –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (0.1%)
5. –£–õ–£–ß–®–ï–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è PPO
6. –£–°–ò–õ–ï–ù–ù–ê–Ø –º–æ–¥–µ–ª—å —Å LSTM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

–≠—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ.
"""

import numpy as np
import pandas as pd
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
import gymnasium as gym
from gymnasium import spaces
import matplotlib.pyplot as plt
from stable_baselines3.common.callbacks import BaseCallback
from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
from typing import Tuple, Dict, Any
import torch
import torch.nn as nn


# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
class Config:
    # –§–∞–π–ª—ã –∏ –ø—É—Ç–∏
    DATA_FOLDER = "data/"
    DATA_FILE = "BTC_5_96w.csv"  # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
    WINDOW_SIZE = 50
    INITIAL_BALANCE = 10000
    POSITIONS_LIMIT = 1.0
    PASSIVITY_THRESHOLD = 100
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    AUTO_DEVICE = True
    FORCE_CPU = False
    DEVICE = "cpu"
    
    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    BASE_RISK_PER_TRADE = 0.03         # –£–≤–µ–ª–∏—á–µ–Ω –±–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ –¥–æ 3%
    DYNAMIC_RISK_MULTIPLIER = 1.5      # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∏—Å–∫–∞
    STOP_LOSS_PERCENTAGE = 0.015       # –¢–∞–π—Ç–µ—Ä —Å—Ç–æ–ø-–ª–æ—Å—Å 1.5%
    TAKE_PROFIT_PERCENTAGE = 0.045     # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 4.5% (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:3)
    TRAILING_STOP_PERCENTAGE = 0.01    # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø 1%
    MAX_DRAWDOWN_LIMIT = 0.12          # 12% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
    TRADE_COMMISSION = 0.001           # 0.1% –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É
    
    # –£–°–ò–õ–ï–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Ä–∏–±—ã–ª—å
    BALANCE_CHANGE_MULTIPLIER = 200    # –£–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∏–±—ã–ª—å
    PROFIT_STREAK_BONUS = 50.0         # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    SHARP_RATIO_BONUS = 100.0          # –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–∏–π Sharpe ratio
    
    # –ê–ì–†–ï–°–°–ò–í–ù–´–ï —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
    MIN_POSITION_SIZE = 0.15           # –£–≤–µ–ª–∏—á–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ 15%
    MAX_POSITION_MULTIPLIER = 1.2      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è 120% –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    CONFIDENCE_THRESHOLD = 0.7         # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    EMA_FAST_SPAN = 12
    EMA_SLOW_SPAN = 26
    RSI_WINDOW = 14
    RSI_OVERSOLD = 30
    RSI_OVERBOUGHT = 70
    MACD_FAST = 12
    MACD_SLOW = 26
    BOLLINGER_WINDOW = 20
    MOMENTUM_WINDOW = 10
    
    # –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    TOTAL_TIMESTEPS = 10000           # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
    PPO_ENT_COEF = 0.02                # –ë–æ–ª—å—à–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    LEARNING_RATE = 5e-5               # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    
    # –£–º–Ω–∞—è —Ä–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Ä–∏–±—ã–ª—å
    ENABLE_EARLY_STOPPING = True
    EARLY_STOPPING_PATIENCE = 75       # –ë–æ–ª—å—à–µ —Ç–µ—Ä–ø–µ–ª–∏–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–±—ã–ª–∏
    MIN_EPISODES_BEFORE_STOPPING = 300  # –ë–æ–ª—å—à–µ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    IMPROVEMENT_THRESHOLD = 0.002       # –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
    
    # –ú–û–©–ù–ê–Ø LSTM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    LSTM_HIDDEN_SIZE = 512             # –£–≤–µ–ª–∏—á–µ–Ω–∞ –º–æ—â–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    LSTM_NUM_LAYERS = 3                # –ë–æ–ª—å—à–µ —Å–ª–æ—ë–≤ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    FIGURE_SIZE = (16, 10)


def setup_device():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (CPU/GPU)"""
    if Config.FORCE_CPU:
        device = "cpu"
        print("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
    elif Config.AUTO_DEVICE:
        if torch.cuda.is_available():
            device = "cuda"
            try:
                gpu_name = torch.cuda.get_device_name(0)
                gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
                print(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU: {gpu_name}")
                print(f"üíæ –ü–∞–º—è—Ç—å GPU: {gpu_memory:.1f} GB")
            except:
                print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU")
        else:
            device = "cpu"
            print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
    else:
        device = Config.DEVICE
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    return device


def check_gpu_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è GPU"""
    info = {
        "torch_version": torch.__version__,
        "cuda_available": torch.cuda.is_available(),
        "device_count": torch.cuda.device_count() if torch.cuda.is_available() else 0,
        "current_device": None,
        "gpu_memory": None
    }
    
    if torch.cuda.is_available():
        try:
            info["current_device"] = torch.cuda.current_device()
            info["gpu_memory"] = torch.cuda.get_device_properties(0).total_memory / 1024**3
        except:
            pass
        
    return info


class LSTMFeatureExtractor(BaseFeaturesExtractor):
    """–£–õ–£–ß–®–ï–ù–ù–´–ô LSTM Feature Extractor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"""
    
    def __init__(self, observation_space: gym.Space, features_dim: int = 256):
        super().__init__(observation_space, features_dim)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤—Ö–æ–¥–∞
        if observation_space.shape is not None:
            n_input_features = observation_space.shape[-1]
            sequence_length = observation_space.shape[0]
        else:
            # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
            n_input_features = 20
            sequence_length = 50
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ï LSTM —Å–ª–æ–∏
        self.lstm = nn.LSTM(
            input_size=n_input_features,
            hidden_size=Config.LSTM_HIDDEN_SIZE,
            num_layers=Config.LSTM_NUM_LAYERS,
            batch_first=True,
            dropout=0.2 if Config.LSTM_NUM_LAYERS > 1 else 0
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–∏
        self.feature_net = nn.Sequential(
            nn.Linear(Config.LSTM_HIDDEN_SIZE, features_dim),
            nn.ReLU(),
            nn.Dropout(0.1),
            nn.Linear(features_dim, features_dim),
            nn.ReLU()
        )

    def forward(self, observations: torch.Tensor) -> torch.Tensor:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ LSTM
        lstm_out, _ = self.lstm(observations)
        # –ë–µ—Ä–µ–º –≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
        features = lstm_out[:, -1, :]
        return self.feature_net(features)


class SmartEarlyStoppingCallback(BaseCallback):
    """–£–º–Ω—ã–π callback —Å —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π"""
    
    def __init__(self, verbose=1):
        super().__init__(verbose)
        self.step_count = 0
        self.episode_count = 0
        self.best_reward = float('-inf')
        self.episodes_without_improvement = 0
        self.progress_interval = 10000  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10k —à–∞–≥–æ–≤
        self.episode_rewards_history = []
        self.recent_rewards_window = 10  # –û–∫–Ω–æ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ø–∏–∑–æ–¥–æ–≤

    def _on_step(self) -> bool:
        self.step_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã
        if len(self.locals.get('infos', [])) > 0:
            for info in self.locals['infos']:
                if 'episode' in info:
                    episode_reward = info['episode'].get('r', 0)
                    self.episode_count += 1
                    self.episode_rewards_history.append(episode_reward)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
                    if len(self.episode_rewards_history) >= self.recent_rewards_window:
                        recent_avg = np.mean(self.episode_rewards_history[-self.recent_rewards_window:])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
                        if recent_avg > self.best_reward + Config.IMPROVEMENT_THRESHOLD:
                            improvement = recent_avg - self.best_reward
                            self.best_reward = recent_avg
                            self.episodes_without_improvement = 0
                            print(f"üöÄ [–≠–ø–∏–∑–æ–¥ {self.episode_count}] –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: {recent_avg:.3f} (+{improvement:.3f})")
                        else:
                            self.episodes_without_improvement += 1
                            if self.episode_count % 5 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 5 —ç–ø–∏–∑–æ–¥–æ–≤
                                print(f"üìä [–≠–ø–∏–∑–æ–¥ {self.episode_count}] –ù–∞–≥—Ä–∞–¥–∞: {recent_avg:.3f} (–ª—É—á—à–∞—è: {self.best_reward:.3f}, –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è: {self.episodes_without_improvement})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —à–∞–≥–∞–º
        if self.step_count % self.progress_interval == 0:
            print(f"‚è±Ô∏è  [–®–∞–≥ {self.step_count}] –≠–ø–∏–∑–æ–¥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.episode_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if Config.ENABLE_EARLY_STOPPING and self.episode_count >= Config.MIN_EPISODES_BEFORE_STOPPING:
            if self.episodes_without_improvement >= Config.EARLY_STOPPING_PATIENCE:
                print(f"\nüõë –†–ê–ù–ù–Ø–Ø –û–°–¢–ê–ù–û–í–ö–ê!")
                print(f"   –≠–ø–∏–∑–æ–¥–æ–≤ –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è: {self.episodes_without_improvement}")
                print(f"   –õ—É—á—à–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {self.best_reward:.3f}")
                print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {self.episode_count}")
                print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {self.step_count}")
                return False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        
        return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ


class SimplifiedTradingEnv(gym.Env):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
    
    def __init__(self, df, window_size=50, initial_balance=10000):
        super().__init__()
        self.df = df.reset_index(drop=True)
        self.window_size = window_size
        self.initial_balance = initial_balance

        # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: 0-Hold, 1-Buy, 2-Sell
        self.action_space = spaces.Discrete(3)
        self.observation_space = spaces.Box(
            low=-np.inf, high=np.inf, shape=(window_size, df.shape[1]), dtype=np.float32
        )

        # –ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤ –Ω–∞ —ç–ø–∏–∑–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.max_episode_steps = 10000  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        self.episode_steps = 0

        self._reset_state()

    def _reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.balance = float(self.initial_balance)
        self.btc_amount = 0.0        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
        self.entry_price = 0.0
        self.current_step = self.window_size
        self.episode_steps = 0
        self.trades = []
        self.balance_history = [float(self.initial_balance)]
        self.max_balance = float(self.initial_balance)
        self.returns_history = []
        self.profit_streak = 0
        self.loss_streak = 0
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
        self.stop_loss_price = 0.0
        self.take_profit_price = 0.0
        self.trailing_stop_price = 0.0     # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
        self.position_high_price = 0.0     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        self.max_drawdown = 0.0
        
        # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        self.price_history = []

    def reset(self, seed=None, options=None):
        """–°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self._reset_state()
        return self._get_observation(), {}

    def _get_observation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        obs = self.df.iloc[self.current_step - self.window_size:self.current_step].values
        return obs.astype(np.float32)

    def _calculate_dynamic_order_size(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∏—Å–∫–æ–º"""
        available_balance = self.balance
        
        # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        base_risk = Config.BASE_RISK_PER_TRADE
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –ø—Ä–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        dynamic_risk = base_risk
        if len(self.trades) > 0:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∏—Å–∫ –ø—Ä–∏ —Å–µ—Ä–∏–∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            recent_trades = self.trades[-5:] if len(self.trades) >= 5 else self.trades
            profitable_ratio = sum(1 for trade in recent_trades if trade > 0) / len(recent_trades)
            if profitable_ratio >= Config.CONFIDENCE_THRESHOLD:
                dynamic_risk = base_risk * Config.DYNAMIC_RISK_MULTIPLIER
        
        position_value = available_balance * dynamic_risk
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        min_position = available_balance * Config.MIN_POSITION_SIZE
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        max_position = available_balance * Config.MAX_POSITION_MULTIPLIER
        
        position_value = max(min_position, min(position_value, max_position))
        
        return position_value  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    
    def _calculate_profit(self, current_price):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏"""
        if self.btc_amount <= 0 or self.entry_price <= 0:
            return 0.0
        
        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Ñ–æ—Ä–º—É–ª–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC * (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞)
        profit = self.btc_amount * (current_price - self.entry_price)
        return profit

    def _calculate_enhanced_reward(self, current_price, action):
        """–£–°–ò–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
        self.price_history.append(float(current_price))
        if len(self.price_history) > 20:
            self.price_history.pop(0)
        
        # –û–°–ù–û–í–ù–ê–Ø –ù–ê–ì–†–ê–î–ê - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        prev_total_balance = self.balance_history[-1] if self.balance_history else self.initial_balance
        unrealized_profit = self._calculate_profit(current_price) if self.btc_amount > 0 else 0
        current_total_balance = self.balance + unrealized_profit
        
        balance_change = current_total_balance - prev_total_balance
        base_reward = balance_change * Config.BALANCE_CHANGE_MULTIPLIER
        
        # –ë–û–ù–£–°–´ –∑–∞ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∏
        profit_streak_bonus = 0.0
        if len(self.trades) > 0:
            # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            if self.profit_streak >= 3:
                profit_streak_bonus = self.profit_streak * Config.PROFIT_STREAK_BONUS
        
        # –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ Sharpe (–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å/—Ä–∏—Å–∫)
        sharpe_bonus = 0.0
        if len(self.balance_history) > 10:
            returns = np.diff(self.balance_history[-10:]) / np.array(self.balance_history[-10:-1])
            if len(returns) > 1:
                returns_mean = np.mean(returns)
                returns_std = np.std(returns)
                if returns_std > 0 and returns_mean > 0:
                    sharpe_ratio = returns_mean / returns_std
                    sharpe_bonus = sharpe_ratio * Config.SHARP_RATIO_BONUS
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –±–æ–ª—å—à—É—é –ø—Ä–æ—Å–∞–¥–∫—É (—É—Å–∏–ª–µ–Ω–Ω—ã–π)
        drawdown_penalty = 0.0
        self.max_balance = max(self.max_balance, current_total_balance)
        current_drawdown = (self.max_balance - current_total_balance) / self.max_balance if self.max_balance > 0 else 0
        self.max_drawdown = max(self.max_drawdown, current_drawdown)
        
        if current_drawdown > Config.MAX_DRAWDOWN_LIMIT:
            drawdown_penalty = (current_drawdown - Config.MAX_DRAWDOWN_LIMIT) * 1000
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        total_reward = base_reward + profit_streak_bonus + sharpe_bonus - drawdown_penalty
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.balance_history.append(float(current_total_balance))
        if len(self.balance_history) > 100:
            self.balance_history.pop(0)
            
        return total_reward, {
            'base_reward': base_reward,
            'balance_change': balance_change,
            'profit_streak_bonus': profit_streak_bonus,
            'sharpe_bonus': sharpe_bonus,
            'drawdown_penalty': drawdown_penalty,
            'total_balance': current_total_balance,
            'unrealized_profit': unrealized_profit,
            'current_drawdown': current_drawdown
        }

    def _execute_simplified_trade(self, action, current_price):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏"""
        trade_info = {}
        
        if action == 0:  # Hold - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return trade_info
            
        elif action == 1:  # Buy - –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
            if self.btc_amount == 0:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                position_value = self._calculate_dynamic_order_size()
                commission = position_value * Config.TRADE_COMMISSION
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é)
                total_cost = position_value + commission
                if total_cost <= self.balance:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö BTC
                    self.btc_amount = position_value / current_price
                    self.entry_price = current_price
                    self.balance -= total_cost  # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ + –∫–æ–º–∏—Å—Å–∏—é
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∏ —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
                    self.stop_loss_price = current_price * (1 - Config.STOP_LOSS_PERCENTAGE)
                    self.take_profit_price = current_price * (1 + Config.TAKE_PROFIT_PERCENTAGE)
                    self.trailing_stop_price = current_price * (1 - Config.TRAILING_STOP_PERCENTAGE)
                    self.position_high_price = current_price
                    
                    trade_info = {
                        'action': 'BUY',
                        'btc_amount': self.btc_amount,
                        'price': current_price,
                        'cost': total_cost,
                        'commission': commission,
                        'balance_after': self.balance
                    }
        
        elif action == 2:  # Sell - –ø—Ä–æ–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if self.btc_amount > 0:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ä—É—á–∫—É –æ—Ç –ø—Ä–æ–¥–∞–∂–∏
                sale_proceeds = self.btc_amount * current_price
                commission = sale_proceeds * Config.TRADE_COMMISSION
                net_proceeds = sale_proceeds - commission
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                profit = self._calculate_profit(current_price)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å—Ç—É—é –≤—ã—Ä—É—á–∫—É –Ω–∞ –±–∞–ª–∞–Ω—Å
                self.balance += net_proceeds
                self.trades.append(profit)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫–∏ –ø—Ä–∏–±—ã–ª–µ–π/—É–±—ã—Ç–∫–æ–≤
                if profit > 0:
                    self.profit_streak += 1
                    self.loss_streak = 0
                else:
                    self.loss_streak += 1
                    self.profit_streak = 0
                
                trade_info = {
                    'action': 'SELL',
                    'btc_amount': self.btc_amount,
                    'price': current_price,
                    'proceeds': sale_proceeds,
                    'commission': commission,
                    'net_proceeds': net_proceeds,
                    'profit': profit,
                    'balance_after': self.balance,
                    'profit_streak': self.profit_streak,
                    'loss_streak': self.loss_streak
                }
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é
                self.btc_amount = 0
                self.entry_price = 0
                self.stop_loss_price = 0
                self.take_profit_price = 0
        
        return trade_info

    def _check_stop_loss_take_profit(self, current_price):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
        if self.btc_amount <= 0:
            return 0.0, {}
        
        trade_info = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        if current_price <= self.stop_loss_price and self.stop_loss_price > 0:
            sale_proceeds = self.btc_amount * current_price
            commission = sale_proceeds * Config.TRADE_COMMISSION
            net_proceeds = sale_proceeds - commission
            profit = self._calculate_profit(current_price)
            
            self.balance += net_proceeds
            self.trades.append(profit)
            
            trade_info = {
                'action': 'STOP_LOSS',
                'btc_amount': self.btc_amount,
                'price': current_price,
                'profit': profit,
                'commission': commission
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫–∏
            if profit > 0:
                self.profit_streak += 1
                self.loss_streak = 0
            else:
                self.loss_streak += 1
                self.profit_streak = 0
            
            # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏
            self.btc_amount = 0
            self.entry_price = 0
            self.stop_loss_price = 0
            self.take_profit_price = 0
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        elif current_price >= self.take_profit_price and self.take_profit_price > 0:
            sale_proceeds = self.btc_amount * current_price
            commission = sale_proceeds * Config.TRADE_COMMISSION
            net_proceeds = sale_proceeds - commission
            profit = self._calculate_profit(current_price)
            
            self.balance += net_proceeds
            self.trades.append(profit)
            
            trade_info = {
                'action': 'TAKE_PROFIT',
                'btc_amount': self.btc_amount,
                'price': current_price,
                'profit': profit,
                'commission': commission
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫–∏
            if profit > 0:
                self.profit_streak += 1
                self.loss_streak = 0
            else:
                self.loss_streak += 1
                self.profit_streak = 0
            
            # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏
            self.btc_amount = 0
            self.entry_price = 0
            self.stop_loss_price = 0
            self.take_profit_price = 0
        
        return 0.0, trade_info  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –Ω–∞–≥—Ä–∞–¥—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–≥—Ä–∞–¥–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ

    def step(self, action):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —à–∞–≥ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
        current_price = self.df.iloc[self.current_step]['close']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        sl_tp_reward, sl_tp_info = self._check_stop_loss_take_profit(current_price)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        trade_info = self._execute_simplified_trade(action, current_price)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–∏–ª–µ–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É (–æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º PnL + –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–±—ã–ª—å)
        total_reward, reward_info = self._calculate_enhanced_reward(current_price, action)
        
        self.current_step += 1
        self.episode_steps += 1
        
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞
        current_total = self.balance + (self._calculate_profit(current_price) if self.btc_amount > 0 else 0)
        done = (self.current_step >= len(self.df) - 1 or 
                current_total <= 0.5 * self.initial_balance or  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ —É—Å–ª–æ–≤–∏–µ
                self.episode_steps >= self.max_episode_steps)
        
        truncated = self.episode_steps >= self.max_episode_steps
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = {
            'balance': self.balance,
            'btc_amount': self.btc_amount,
            'total_trades': len(self.trades),
            'profit_streak': self.profit_streak,
            'loss_streak': self.loss_streak,
            'max_drawdown': self.max_drawdown,
            'reward_info': reward_info,
            'trade_info': trade_info,
            'sl_tp_info': sl_tp_info
        }
        
        return self._get_observation(), total_reward, done, truncated, info

    def render(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        unrealized = self._calculate_profit(self.df.iloc[self.current_step-1]['close']) if self.btc_amount > 0 else 0
        total_balance = self.balance + unrealized
        print(f"Step: {self.current_step}, Balance: {total_balance:.2f}, BTC: {self.btc_amount:.6f}, Drawdown: {self.max_drawdown:.2%}")


def load_and_prepare_data(file_path):
    """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∏—á–∞–º–∏"""
    df = pd.read_csv(file_path)
    df = df[['open', 'high', 'low', 'close', 'volume']].copy()

    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['ema_fast'] = df['close'].ewm(span=Config.EMA_FAST_SPAN, adjust=False).mean()
    df['ema_slow'] = df['close'].ewm(span=Config.EMA_SLOW_SPAN, adjust=False).mean()

    # RSI
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=Config.RSI_WINDOW).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=Config.RSI_WINDOW).mean()
    rs = gain / loss
    df['rsi'] = 100 - (100 / (1 + rs))

    # MACD
    ema_12 = df['close'].ewm(span=Config.MACD_FAST).mean()
    ema_26 = df['close'].ewm(span=Config.MACD_SLOW).mean()
    df['macd'] = ema_12 - ema_26
    df['macd_signal'] = df['macd'].ewm(span=9).mean()
    df['macd_histogram'] = df['macd'] - df['macd_signal']

    # OBV (On-Balance Volume)
    df['price_change'] = df['close'].diff()
    df['obv_raw'] = np.where(df['price_change'] > 0, df['volume'], 
                        np.where(df['price_change'] < 0, -df['volume'], 0))
    df['obv'] = df['obv_raw'].cumsum()

    # VWAP (Volume Weighted Average Price)
    df['typical_price'] = (df['high'] + df['low'] + df['close']) / 3
    df['vwap_numerator'] = (df['typical_price'] * df['volume']).cumsum()
    df['vwap_denominator'] = df['volume'].cumsum()
    df['vwap'] = df['vwap_numerator'] / df['vwap_denominator']

    # Bollinger Bands
    df['bb_middle'] = df['close'].rolling(window=Config.BOLLINGER_WINDOW).mean()
    bb_std = df['close'].rolling(window=Config.BOLLINGER_WINDOW).std()
    df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
    df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
    df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / df['bb_middle']
    df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'])

    # –ù–û–í–´–ï –£–õ–£–ß–®–ï–ù–ù–´–ï –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    close_series = df['close']
    df['log_return'] = np.log(close_series / close_series.shift(1))
    df['volatility'] = df['log_return'].rolling(window=20).std()
    df['price_trend'] = close_series.pct_change(periods=5)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['price_change_pct'] = df['close'].pct_change()
    df['volume_sma'] = df['volume'].rolling(window=20).mean()
    df['volume_ratio'] = df['volume'] / df['volume_sma']
    
    # ATR (Average True Range)
    df['tr1'] = df['high'] - df['low']
    df['tr2'] = abs(df['high'] - df['close'].shift())
    df['tr3'] = abs(df['low'] - df['close'].shift())
    df['tr'] = df[['tr1', 'tr2', 'tr3']].max(axis=1)
    df['atr'] = df['tr'].rolling(window=14).mean()

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    df.drop(['price_change', 'obv_raw', 'vwap_numerator', 'vwap_denominator', 
             'typical_price', 'tr1', 'tr2', 'tr3', 'tr'], axis=1, inplace=True)

    # –û—á–∏—Å—Ç–∫–∞ NaN
    df.dropna(inplace=True)
    df.reset_index(drop=True, inplace=True)

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è - –ù–ï –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—ã, —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    print("üîç –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –î–û –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    print(df[['close', 'ema_fast', 'macd', 'rsi']].mean())
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –ù–ï –¶–ï–ù–´!
    price_cols = ['open', 'high', 'low', 'close']  # –¶–µ–Ω—ã –ù–ï –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º!
    indicator_cols = ['ema_fast', 'ema_slow', 'macd', 'macd_signal', 'macd_histogram', 
                     'obv', 'vwap', 'bb_middle', 'bb_upper', 'bb_lower', 'volume_sma', 'atr']
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—ë–º –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    cols_to_normalize = ['volume'] + indicator_cols
    
    for col in cols_to_normalize:
        if col in df.columns:
            mean_val = df[col].mean()
            std_val = df[col].std()
            if std_val > 0:
                df[col] = (df[col] - mean_val) / std_val
    
    print("üîç –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ü–û–°–õ–ï –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    print(df[['close', 'ema_fast', 'macd', 'rsi']].mean())
    print("üí° –¶–µ–Ω—ã –ù–ï –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–æ–¥–µ–ª–∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã!")

    print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {list(df.columns)}")
    return df


def train_model(env):
    """–£–õ–£–ß–®–ï–ù–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ PPO —Å LSTM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    device = setup_device()
    
    print(f"\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –£–õ–£–ß–®–ï–ù–ù–û–ô –º–æ–¥–µ–ª–∏ PPO —Å LSTM –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device}")
    if Config.ENABLE_EARLY_STOPPING:
        print(f"üß† –£–ú–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï: –¥–æ {Config.TOTAL_TIMESTEPS:,} —à–∞–≥–æ–≤ —Å —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π")
        print(f"   üìä –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ {Config.EARLY_STOPPING_PATIENCE} —ç–ø–∏–∑–æ–¥–æ–≤ –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è")
        print(f"   üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {Config.IMPROVEMENT_THRESHOLD}")
    else:
        print(f"üî• –ü–û–õ–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï: {Config.TOTAL_TIMESTEPS:,} —à–∞–≥–æ–≤ –ë–ï–ó —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –£–õ–£–ß–®–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å LSTM
    policy_kwargs = {
        "features_extractor_class": LSTMFeatureExtractor,
        "features_extractor_kwargs": {"features_dim": Config.LSTM_HIDDEN_SIZE},
        "net_arch": [dict(pi=[512, 256], vf=[512, 256])],  # –ë–æ–ª–µ–µ –º–æ—â–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        "activation_fn": nn.ReLU
    }
    
    model = PPO(
        "MlpPolicy",
        env,
        policy_kwargs=policy_kwargs,
        learning_rate=Config.LEARNING_RATE,
        n_steps=4096,        # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        batch_size=128,      # –£–≤–µ–ª–∏—á–µ–Ω batch size –¥–ª—è –ª—É—á—à–µ–π –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
        n_epochs=10,         # –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
        gamma=0.99,          # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π discount factor
        gae_lambda=0.95,     # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π GAE lambda
        clip_range=0.2,      # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π clip range
        clip_range_vf=None,
        ent_coef=Config.PPO_ENT_COEF,
        vf_coef=0.5,         # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π value function coefficient
        max_grad_norm=0.5,   # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π gradient clipping
        device=device,
        verbose=1
    )
    
    print(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï...")
    print("üí° –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ —ç–ø–∏–∑–æ–¥–∞–º –∏ —à–∞–≥–∞–º")
    print("üéØ –§–æ–∫—É—Å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π callback
    callback = SmartEarlyStoppingCallback()
    
    try:
        model.learn(
            total_timesteps=Config.TOTAL_TIMESTEPS, 
            callback=callback
        )
        print("üéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –ü–û–õ–ù–û–°–¢–¨–Æ!")
    except KeyboardInterrupt:
        print("‚ö†Ô∏è –û–ë–£–ß–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú!")
    
    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if hasattr(callback, 'episode_count'):
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤: {callback.episode_count}")
        print(f"   –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {callback.step_count}")
        print(f"   –õ—É—á—à–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {callback.best_reward:.3f}")
        print(f"   –≠–ø–∏–∑–æ–¥–æ–≤ –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è: {callback.episodes_without_improvement}")
    
    return model


def test_model(model, test_env, df):
    """–†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π"""
    obs, _ = test_env.reset()
    
    results = {
        'balance_history': [],
        'prices': [],
        'actions': [],
        'trades': [],
        'drawdowns': [],
        'positions': [],
        'trade_details': [],
        'commissions_paid': []
    }
    
    max_steps = len(df) - test_env.window_size - 10
    step_count = 0
    total_commissions = 0.0

    print(f"üöÄ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º {max_steps} —à–∞–≥–æ–≤)...")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –°–¢–û–•–ê–°–¢–ò–ß–ï–°–ö–ê–Ø –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏!")
    print(f"üè¶ –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏: {Config.TRADE_COMMISSION:.1%}")
    
    while step_count < max_steps:
        try:
            # –°–¢–û–•–ê–°–¢–ò–ß–ï–°–ö–ê–Ø –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            action_result = model.predict(obs, deterministic=False)
            action = int(action_result[0]) if isinstance(action_result[0], (np.ndarray, list)) else int(action_result[0])
            
            obs, reward, done, truncated, info = test_env.step(action)
            step_count += 1

            if test_env.current_step >= len(df):
                break

            current_price = df.iloc[test_env.current_step]['close']
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            unrealized = test_env._calculate_profit(current_price) if test_env.btc_amount > 0 else 0
            total_balance = test_env.balance + unrealized
            
            results['balance_history'].append(total_balance)
            results['prices'].append(current_price)
            results['actions'].append(action)
            results['drawdowns'].append(info.get('max_drawdown', 0))
            results['positions'].append(test_env.btc_amount)
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
            if info.get('trade_info') and 'commission' in info['trade_info']:
                commission = info['trade_info']['commission']
                total_commissions += commission
                results['commissions_paid'].append(commission)
            
            if info.get('trade_info'):
                results['trade_details'].append({
                    'step': step_count,
                    'info': info['trade_info']
                })

            # –°–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            if done:
                print(f"üìä –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ —à–∞–≥–µ {step_count}, –±–∞–ª–∞–Ω—Å: {total_balance:.2f}")
                obs, _ = test_env.reset()
                
            if step_count % 5000 == 0:
                print(f"üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {step_count}/{max_steps} —à–∞–≥–æ–≤, –±–∞–ª–∞–Ω—Å: {total_balance:.2f}, –∫–æ–º–∏—Å—Å–∏–∏: {total_commissions:.2f}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ —à–∞–≥–µ {step_count}: {e}")
            break

    results['trades'] = test_env.trades
    results['total_commissions'] = total_commissions
    print(f"‚úÖ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {step_count} —à–∞–≥–æ–≤")
    print(f"üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {total_commissions:.2f} USDT")
    return results


def analyze_results(results, initial_balance):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    if not results['balance_history']:
        return {}
    
    balance_history = np.array(results['balance_history'])
    final_balance = balance_history[-1]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_return = (final_balance - initial_balance) / initial_balance
    max_balance = np.max(balance_history)
    max_drawdown = np.max(results['drawdowns'])
    
    # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
    returns = np.diff(balance_history) / balance_history[:-1]
    
    # Sharpe Ratio (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 252 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è –≤ –≥–æ–¥—É)
    if len(returns) > 1:
        annual_return = np.mean(returns) * 252
        annual_volatility = np.std(returns) * np.sqrt(252)
        sharpe_ratio = annual_return / annual_volatility if annual_volatility > 0 else 0
    else:
        sharpe_ratio = 0
    
    # –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫
    trades = results['trades']
    profitable_trades = [t for t in trades if t > 0]
    losing_trades = [t for t in trades if t < 0]
    
    win_rate = len(profitable_trades) / len(trades) * 100 if trades else 0
    avg_profit = np.mean(profitable_trades) if profitable_trades else 0
    avg_loss = np.mean(losing_trades) if losing_trades else 0
    profit_factor = abs(sum(profitable_trades) / sum(losing_trades)) if losing_trades else float('inf')
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π
    win_streak = 0
    loss_streak = 0
    current_win_streak = 0
    current_loss_streak = 0
    
    for trade in trades:
        if trade > 0:
            current_win_streak += 1
            current_loss_streak = 0
            win_streak = max(win_streak, current_win_streak)
        else:
            current_loss_streak += 1
            current_win_streak = 0
            loss_streak = max(loss_streak, current_loss_streak)
    
    analysis = {
        'total_return': total_return,
        'final_balance': final_balance,
        'max_drawdown': max_drawdown,
        'sharpe_ratio': sharpe_ratio,
        'total_trades': len(trades),
        'win_rate': win_rate,
        'avg_profit': avg_profit,
        'avg_loss': avg_loss,
        'profit_factor': profit_factor,
        'win_streak': win_streak,
        'loss_streak': loss_streak,
        'volatility': np.std(returns) if len(returns) > 1 else 0
    }
    
    return analysis


def visualize_results(results, analysis):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if not results['balance_history']:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    fig, axes = plt.subplots(2, 2, figsize=Config.FIGURE_SIZE)
    
    # –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
    axes[0, 0].plot(results['balance_history'], label='Balance', linewidth=2, color='blue')
    axes[0, 0].set_title("–ë–∞–ª–∞–Ω—Å –∞–≥–µ–Ω—Ç–∞", fontsize=14)
    axes[0, 0].set_ylabel("–ë–∞–ª–∞–Ω—Å (USDT)")
    axes[0, 0].legend()
    axes[0, 0].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ –ø–æ–∑–∏—Ü–∏–π
    axes[0, 1].plot(results['prices'], label='BTC Price', alpha=0.7, linewidth=1, color='orange')
    ax2 = axes[0, 1].twinx()
    ax2.plot(results['positions'], label='Position Size', alpha=0.7, linewidth=1, color='green')
    axes[0, 1].set_title("–¶–µ–Ω–∞ BTC –∏ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏", fontsize=14)
    axes[0, 1].set_ylabel("–¶–µ–Ω–∞ BTC")
    ax2.set_ylabel("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
    axes[0, 1].legend(loc='upper left')
    ax2.legend(loc='upper right')
    axes[0, 1].grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–∞–¥–∫–∏
    axes[1, 0].fill_between(range(len(results['drawdowns'])), results['drawdowns'], 
                           alpha=0.7, color='red', label='Drawdown')
    axes[1, 0].set_title("–ü—Ä–æ—Å–∞–¥–∫–∞", fontsize=14)
    axes[1, 0].set_ylabel("–ü—Ä–æ—Å–∞–¥–∫–∞ (%)")
    axes[1, 0].legend()
    axes[1, 0].grid(True, alpha=0.3)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
    if results['trades']:
        axes[1, 1].hist(results['trades'], bins=30, alpha=0.7, color='purple', edgecolor='black')
        axes[1, 1].axvline(x=0, color='red', linestyle='--', linewidth=2)
        axes[1, 1].set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º", fontsize=14)
        axes[1, 1].set_xlabel("–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫")
        axes[1, 1].set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫")
        axes[1, 1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ —Å—Ä–µ–¥–∞–º–∏)
    filename = "trading_results.png"
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
    plt.close()  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –±–∞–∑–µ RL")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        gpu_info = check_gpu_requirements()
        print(f"üìä PyTorch –≤–µ—Ä—Å–∏—è: {gpu_info['torch_version']}")
        print(f"üîß –£—Å—Ç—Ä–æ–π—Å—Ç–≤ GPU: {gpu_info['device_count']}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        file_path = Config.DATA_FOLDER + Config.DATA_FILE
        print(f"\nüìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {file_path}")
        df = load_and_prepare_data(file_path)
        
        print(f"üìà –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üéØ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {Config.WINDOW_SIZE}")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {Config.INITIAL_BALANCE}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ
        print("\nüéì –£–õ–£–ß–®–ï–ù–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ —Å 3 –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ LSTM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...")
        if Config.ENABLE_EARLY_STOPPING:
            print(f"üß† –†–µ–∂–∏–º: –£–ú–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ —Å —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π (–¥–æ {Config.TOTAL_TIMESTEPS:,} —à–∞–≥–æ–≤)")
            print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ {Config.EARLY_STOPPING_PATIENCE} —ç–ø–∏–∑–æ–¥–æ–≤ –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            print(f"üî• –†–µ–∂–∏–º: –ü–û–õ–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ, {Config.TOTAL_TIMESTEPS:,} —à–∞–≥–æ–≤")
        print("üéØ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: 0-Hold, 1-Buy, 2-Sell")
        env = SimplifiedTradingEnv(df, 
                                  window_size=Config.WINDOW_SIZE,
                                  initial_balance=Config.INITIAL_BALANCE)
        
        model = train_model(env)
        print("‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
        test_env = SimplifiedTradingEnv(df, 
                                       window_size=Config.WINDOW_SIZE,
                                       initial_balance=Config.INITIAL_BALANCE)
        
        results = test_model(model, test_env, df)

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results['balance_history']:
            analysis = analyze_results(results, Config.INITIAL_BALANCE)
            
            print(f"\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"{'='*50}")
            print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {analysis['final_balance']:.2f} USDT")
            print(f"–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {analysis['total_return']:.2%}")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {analysis['max_drawdown']:.2%}")
            print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {analysis['sharpe_ratio']:.3f}")
            print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {analysis['volatility']:.4f}")
            print(f"\nüìà –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"{'='*50}")
            print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {analysis['total_trades']}")
            print(f"–í–∏–Ω—Ä–µ–π—Ç: {analysis['win_rate']:.2f}%")
            print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {analysis['avg_profit']:.2f}")
            print(f"–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {analysis['avg_loss']:.2f}")
            print(f"–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏: {analysis['profit_factor']:.2f}")
            print(f"–ú–∞–∫—Å. —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {analysis['win_streak']}")
            print(f"–ú–∞–∫—Å. —Å–µ—Ä–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {analysis['loss_streak']}")

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
            visualize_results(results, analysis)
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()