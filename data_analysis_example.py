"""
üìä –ü–†–ò–ú–ï–† –ê–ù–ê–õ–ò–ó–ê –ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú –î–ê–ù–ù–´–•
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å Binance
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from pathlib import Path


class MultiTimeframeAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, data_folder: str = "data"):
        self.data_folder = Path(data_folder)
        self.timeframes = ['5m', '1h', '4h', '1d']
        self.data = {}
        
    def load_all_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö...")
        
        for tf in self.timeframes:
            filename = f"BTCUSDT_{tf}_2y.csv"
            filepath = self.data_folder / filename
            
            if filepath.exists():
                df = pd.read_csv(filepath)
                df['datetime'] = pd.to_datetime(df['timestamp'], unit='ms')
                self.data[tf] = df
                print(f"‚úÖ {tf:>3}: {len(df):>7,} –∑–∞–ø–∏—Å–µ–π | "
                      f"{df['datetime'].min().strftime('%Y-%m-%d')} - "
                      f"{df['datetime'].max().strftime('%Y-%m-%d')}")
            else:
                print(f"‚ùå {tf}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
        
    def analyze_price_statistics(self):
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\n" + "="*60)
        print("üìà –¶–ï–ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ê–ô–ú–§–†–ï–ô–ú–ê–ú")
        print("="*60)
        
        for tf, df in self.data.items():
            volatility = ((df['high'] - df['low']) / df['close'] * 100).mean()
            price_change = ((df['close'].iloc[-1] - df['close'].iloc[0]) / df['close'].iloc[0] * 100)
            
            print(f"\nüî∏ {tf.upper()} –¢–ê–ô–ú–§–†–ï–ô–ú:")
            print(f"   üí∞ –¶–µ–Ω–∞: ${df['close'].iloc[0]:.2f} ‚Üí ${df['close'].iloc[-1]:.2f}")
            print(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change:+.2f}%")
            print(f"   üìä –ú–∏–Ω/–ú–∞–∫—Å: ${df['low'].min():.2f} / ${df['high'].max():.2f}")
            print(f"   ‚ö° –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2f}%")
            print(f"   üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {df['volume'].mean():.2f}")
            
    def calculate_technical_indicators(self, timeframe: str = '1h'):
        """–†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if timeframe not in self.data:
            print(f"‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è {timeframe} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
            
        print(f"\nüìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ({timeframe.upper()})")
        print("-" * 50)
        
        df = self.data[timeframe].copy()
        
        # RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # MACD
        ema12 = df['close'].ewm(span=12).mean()
        ema26 = df['close'].ewm(span=26).mean()
        df['macd'] = ema12 - ema26
        df['macd_signal'] = df['macd'].ewm(span=9).mean()
        
        # Bollinger Bands
        sma20 = df['close'].rolling(20).mean()
        std20 = df['close'].rolling(20).std()
        df['bb_upper'] = sma20 + (std20 * 2)
        df['bb_lower'] = sma20 - (std20 * 2)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        latest = df.iloc[-1]
        print(f"üîπ RSI: {latest['rsi']:.2f}")
        print(f"üîπ MACD: {latest['macd']:.2f}")
        print(f"üîπ MACD Signal: {latest['macd_signal']:.2f}")
        print(f"üîπ BB Upper: ${latest['bb_upper']:.2f}")
        print(f"üîπ BB Lower: ${latest['bb_lower']:.2f}")
        
        return df
        
    def compare_timeframes(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏"""
        print("\nüìä –ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó")
        print("-" * 30)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è)
        daily_closes = {}
        
        for tf, df in self.data.items():
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–Ω—è
            df_daily = df.set_index('datetime').resample('D')['close'].last().dropna()
            daily_closes[tf] = df_daily
            
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π DataFrame
        correlation_data = pd.DataFrame(daily_closes)
        correlation_data = correlation_data.dropna()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        correlation_matrix = correlation_data.corr()
        
        print("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π:")
        print(correlation_matrix.round(4))
        
        return correlation_matrix
        
    def detect_trading_opportunities(self, timeframe: str = '1h'):
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        if timeframe not in self.data:
            return
            
        print(f"\nüéØ –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ ({timeframe.upper()})")
        print("-" * 40)
        
        df = self.calculate_technical_indicators(timeframe)
        if df is None:
            return
            
        latest = df.iloc[-1]
        signals = []
        
        # RSI —Å–∏–≥–Ω–∞–ª—ã
        if latest['rsi'] < 30:
            signals.append("üü¢ RSI OVERSOLD - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏")
        elif latest['rsi'] > 70:
            signals.append("üî¥ RSI OVERBOUGHT - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏")
            
        # MACD —Å–∏–≥–Ω–∞–ª—ã
        if latest['macd'] > latest['macd_signal']:
            signals.append("üü¢ MACD BULLISH - –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
        else:
            signals.append("üî¥ MACD BEARISH - –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            
        # Bollinger Bands —Å–∏–≥–Ω–∞–ª—ã
        if latest['close'] < latest['bb_lower']:
            signals.append("üü¢ PRICE BELOW BB LOWER - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏")
        elif latest['close'] > latest['bb_upper']:
            signals.append("üî¥ PRICE ABOVE BB UPPER - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏")
            
        if signals:
            for signal in signals:
                print(f"   {signal}")
        else:
            print("   üìä –ù–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            
    def export_summary(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–¥–∫–∏ –≤ —Ñ–∞–π–ª"""
        summary_path = self.data_folder / "data_summary.txt"
        
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write("üìä –°–í–û–î–ö–ê –ü–û –ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú –î–ê–ù–ù–´–ú BTC/USDT\n")
            f.write("=" * 60 + "\n\n")
            
            f.write(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            for tf, df in self.data.items():
                f.write(f"üî∏ {tf.upper()} –¢–ê–ô–ú–§–†–ï–ô–ú:\n")
                f.write(f"   üìä –ó–∞–ø–∏—Å–µ–π: {len(df):,}\n")
                f.write(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {df['datetime'].min()} - {df['datetime'].max()}\n")
                f.write(f"   üí∞ –¶–µ–Ω–∞: ${df['close'].iloc[0]:.2f} ‚Üí ${df['close'].iloc[-1]:.2f}\n")
                
                volatility = ((df['high'] - df['low']) / df['close'] * 100).mean()
                f.write(f"   ‚ö° –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2f}%\n\n")
                
        print(f"\nüìÑ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {summary_path}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ê–ù–ê–õ–ò–ó –ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú –î–ê–ù–ù–´–• BTC/USDT")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = MultiTimeframeAnalyzer()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    analyzer.load_all_data()
    
    if not analyzer.data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
        
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    analyzer.analyze_price_statistics()
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    analyzer.calculate_technical_indicators('1h')
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analyzer.compare_timeframes()
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    analyzer.detect_trading_opportunities('1h')
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–¥–∫–∏
    analyzer.export_summary()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("   - 5m –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤")
    print("   - 1h/4h –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞")  
    print("   - 1d –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


if __name__ == "__main__":
    main() 