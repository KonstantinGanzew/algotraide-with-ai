"""
üöÄ SENTIMENT –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V3.3 - OPTIMIZED EDITION
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
import gymnasium as gym
from gymnasium import spaces
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple, Any
import re
import requests
from datetime import datetime, timedelta
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')


class OptimizedSentimentConfig:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã V3.3"""
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    INITIAL_BALANCE = 10000
    RISK_PER_TRADE = 0.015  # –°–Ω–∏–∂–µ–Ω —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
    MAX_POSITION_SIZE = 0.3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    STOP_LOSS = 0.05  # 5% —Å—Ç–æ–ø-–ª–æ—Å—Å
    TAKE_PROFIT = 0.15  # 15% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    TECHNICAL_WEIGHT = 0.5      # –£–≤–µ–ª–∏—á–µ–Ω –≤–µ—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    SENTIMENT_WEIGHT = 0.25     # –£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    ON_CHAIN_WEIGHT = 0.15      # –°–Ω–∏–∂–µ–Ω –≤–µ—Å on-chain –¥–∞–Ω–Ω—ã—Ö
    MACRO_WEIGHT = 0.1          # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –º–∞–∫—Ä–æ
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    SENTIMENT_THRESHOLD = 0.15   # –ü–æ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
    SENTIMENT_MULTIPLIER = 1.2   # –°–Ω–∏–∂–µ–Ω –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä
    SENTIMENT_WINDOW = 24
    NEWS_IMPACT_DECAY = 0.85
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    WINDOW_SIZE = 48
    TOTAL_TIMESTEPS = 15000
    LEARNING_RATE = 2e-4
    
    # –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    MIN_TRADES_THRESHOLD = 5     # –ú–∏–Ω–∏–º—É–º —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    PROFIT_THRESHOLD = 0.02      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    VOLATILITY_ADJUSTMENT = True # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ V3.2 —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
class SentimentAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.positive_words = [
            'bullish', 'moon', 'pump', 'buy', 'hold', 'diamond', 'hands',
            'rocket', 'green', 'profit', 'gains', 'up', 'rise', 'surge',
            'breakout', 'bull', 'strong', 'support', 'resistance', 'btfd'
        ]
        
        self.negative_words = [
            'bearish', 'dump', 'sell', 'crash', 'down', 'red', 'loss',
            'fear', 'panic', 'drop', 'fall', 'weak', 'breakdown', 'bear',
            'correction', 'dip', 'liquidation', 'fud', 'rekt', 'bag'
        ]
        
        self.crypto_keywords = [
            'bitcoin', 'btc', 'ethereum', 'eth', 'crypto', 'blockchain',
            'defi', 'nft', 'altcoin', 'hodl', 'satoshi', 'whale'
        ]
    
    def analyze_text_sentiment(self, text: str) -> float:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return 0.0
        
        text = text.lower()
        crypto_relevance = sum(1 for word in self.crypto_keywords if word in text)
        if crypto_relevance == 0:
            return 0.0
        
        positive_count = sum(1 for word in self.positive_words if word in text)
        negative_count = sum(1 for word in self.negative_words if word in text)
        
        text_length = len(text.split())
        if text_length == 0:
            return 0.0
        
        sentiment_score = (positive_count - negative_count) / max(text_length, 1)
        sentiment_score *= min(crypto_relevance / 3, 1.0)
        
        return np.clip(sentiment_score, -1.0, 1.0)
    
    def generate_social_sentiment_data(self, n_points: int) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        print("üì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π...")
        
        np.random.seed(42)
        timestamps = pd.date_range(start='2023-01-01', periods=n_points, freq='1H')
        
        # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        base_sentiment = np.random.normal(0, 0.2, n_points)
        
        # –°–æ–±—ã—Ç–∏—è —Å –º–µ–Ω—å—à–µ–π —á–∞—Å—Ç–æ—Ç–æ–π, –Ω–æ –±–æ–ª—å—à–∏–º –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ–º
        events = np.random.choice([0, 1], size=n_points, p=[0.97, 0.03])
        event_impact = np.random.normal(0, 0.6, n_points) * events
        
        # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        for i in range(1, len(event_impact)):
            if events[i-1] == 1:
                event_impact[i] += event_impact[i-1] * OptimizedSentimentConfig.NEWS_IMPACT_DECAY
        
        total_sentiment = base_sentiment + event_impact
        total_sentiment = np.clip(total_sentiment, -1, 1)
        
        df = pd.DataFrame({
            'timestamp': timestamps,
            'twitter_sentiment': total_sentiment + np.random.normal(0, 0.05, n_points),
            'reddit_sentiment': total_sentiment + np.random.normal(0, 0.08, n_points),
            'news_sentiment': total_sentiment + np.random.normal(0, 0.1, n_points),
            'social_volume': np.abs(total_sentiment) * 800 + np.random.exponential(400, n_points),
            'mentions_count': np.abs(total_sentiment) * 80 + np.random.poisson(40, n_points),
            'influencer_sentiment': total_sentiment * 1.1 + np.random.normal(0, 0.15, n_points)
        })
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        for col in ['twitter_sentiment', 'reddit_sentiment', 'news_sentiment', 'influencer_sentiment']:
            df[col] = np.clip(df[col], -1, 1)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return df


class OnChainAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä on-chain –º–µ—Ç—Ä–∏–∫"""
    
    def generate_onchain_data(self, n_points: int) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è on-chain –¥–∞–Ω–Ω—ã—Ö"""
        print("‚õìÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö on-chain –¥–∞–Ω–Ω—ã—Ö...")
        
        np.random.seed(43)
        timestamps = pd.date_range(start='2023-01-01', periods=n_points, freq='1H')
        
        price_trend = np.linspace(45000, 65000, n_points) + np.random.normal(0, 1500, n_points)
        
        df = pd.DataFrame({
            'timestamp': timestamps,
            'active_addresses': 750000 + price_trend / 120 + np.random.normal(0, 40000, n_points),
            'transaction_count': 230000 + price_trend / 250 + np.random.normal(0, 25000, n_points),
            'hash_rate': 180e18 + price_trend * 0.8e15 + np.random.normal(0, 8e18, n_points),
            'difficulty': 22e12 + price_trend * 0.8e9 + np.random.normal(0, 0.8e12, n_points),
            'exchange_inflow': np.random.exponential(800, n_points),
            'exchange_outflow': np.random.exponential(950, n_points),
            'whale_transactions': np.random.poisson(40, n_points),
            'new_addresses': 320000 + price_trend / 350 + np.random.normal(0, 15000, n_points)
        })
        
        df['net_exchange_flow'] = df['exchange_inflow'] - df['exchange_outflow']
        df['address_growth_rate'] = df['new_addresses'].pct_change().rolling(24).mean()
        df['network_value'] = df['active_addresses'] * price_trend / 1200000
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö on-chain –¥–∞–Ω–Ω—ã—Ö")
        return df


class MacroEconomicAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def generate_macro_data(self, n_points: int) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üåç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        np.random.seed(44)
        timestamps = pd.date_range(start='2023-01-01', periods=n_points, freq='1H')
        
        df = pd.DataFrame({
            'timestamp': timestamps,
            'dxy_index': 103 + np.cumsum(np.random.normal(0, 0.05, n_points)),
            'vix_index': 20 + np.abs(np.cumsum(np.random.normal(0, 0.3, n_points))),
            'gold_price': 1900 + np.cumsum(np.random.normal(0, 3, n_points)),
            'sp500_index': 4000 + np.cumsum(np.random.normal(0, 8, n_points)),
            'fed_rate': 5.25 + np.cumsum(np.random.normal(0, 0.005, n_points)) / 100,
            'inflation_rate': 3.2 + np.cumsum(np.random.normal(0, 0.02, n_points)) / 100,
            'unemployment_rate': 3.7 + np.cumsum(np.random.normal(0, 0.01, n_points)) / 100
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        df['vix_index'] = np.clip(df['vix_index'], 12, 70)
        df['fed_rate'] = np.clip(df['fed_rate'], 0, 8)
        df['inflation_rate'] = np.clip(df['inflation_rate'], -1, 12)
        df['unemployment_rate'] = np.clip(df['unemployment_rate'], 2.5, 12)
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        df['risk_appetite'] = (80 - df['vix_index']) / 80
        df['dollar_strength'] = (df['dxy_index'] - 100) / 8
        df['macro_sentiment'] = (df['risk_appetite'] - df['dollar_strength']) / 2
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–∫—Ä–æ –¥–∞–Ω–Ω—ã—Ö")
        return df


class OptimizedFeatureExtractor(BaseFeaturesExtractor):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Feature Extractor"""
    
    def __init__(self, observation_space: gym.Space, features_dim: int = 256):
        super().__init__(observation_space, features_dim)
        
        if observation_space.shape is not None:
            self.seq_len = observation_space.shape[0]
            self.input_features = observation_space.shape[1]
        else:
            self.seq_len = OptimizedSentimentConfig.WINDOW_SIZE
            self.input_features = 50
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        self.feature_net = nn.Sequential(
            nn.Linear(self.input_features, 128),
            nn.ReLU(),
            nn.BatchNorm1d(128),
            nn.Dropout(0.15),
            nn.Linear(128, 64),
            nn.ReLU()
        )
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π LSTM
        self.lstm = nn.LSTM(
            input_size=self.input_features,
            hidden_size=96,
            num_layers=1,
            batch_first=True,
            dropout=0.0
        )
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–µ—Ç—å
        self.fusion_net = nn.Sequential(
            nn.Linear(96 + 64, 192),
            nn.ReLU(),
            nn.BatchNorm1d(192),
            nn.Dropout(0.2),
            nn.Linear(192, features_dim),
            nn.ReLU()
        )
    
    def forward(self, observations: torch.Tensor) -> torch.Tensor:
        batch_size, seq_len, features = observations.shape
        
        last_obs = observations[:, -1, :]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_out = self.feature_net(last_obs)
        
        # LSTM
        lstm_out, _ = self.lstm(observations)
        lstm_features = lstm_out[:, -1, :]
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        combined = torch.cat([lstm_features, feature_out], dim=1)
        output = self.fusion_net(combined)
        
        return output


def combine_optimized_data_sources(price_data: pd.DataFrame, 
                                 sentiment_data: pd.DataFrame,
                                 onchain_data: pd.DataFrame, 
                                 macro_data: pd.DataFrame) -> pd.DataFrame:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    combined = price_data.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–µ—Å–∞–º–∏
    for col in sentiment_data.columns:
        if col != 'timestamp':
            combined[f'sentiment_{col}'] = sentiment_data[col].values * OptimizedSentimentConfig.SENTIMENT_WEIGHT
    
    for col in onchain_data.columns:
        if col != 'timestamp':
            combined[f'onchain_{col}'] = onchain_data[col].values * OptimizedSentimentConfig.ON_CHAIN_WEIGHT
    
    for col in macro_data.columns:
        if col != 'timestamp':
            combined[f'macro_{col}'] = macro_data[col].values * OptimizedSentimentConfig.MACRO_WEIGHT
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    combined['overall_sentiment'] = (
        combined['sentiment_twitter_sentiment'] * 0.4 +
        combined['sentiment_reddit_sentiment'] * 0.3 +
        combined['sentiment_news_sentiment'] * 0.2 +
        combined['sentiment_influencer_sentiment'] * 0.1
    )
    
    combined['network_strength'] = (
        combined['onchain_active_addresses'] / combined['onchain_active_addresses'].mean() * 0.4 +
        combined['onchain_transaction_count'] / combined['onchain_transaction_count'].mean() * 0.3 +
        combined['onchain_hash_rate'] / combined['onchain_hash_rate'].mean() * 0.3
    ) / 3
    
    combined['market_risk'] = (
        combined['macro_vix_index'] / 40 * 0.6 +
        (1 - combined['macro_risk_appetite']) * 0.4
    )
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –≤–µ—Å–∞–º–∏
    for col in ['sma_20', 'ema_12', 'rsi', 'volatility']:
        if col in combined.columns:
            combined[col] = combined[col] * OptimizedSentimentConfig.TECHNICAL_WEIGHT
    
    # –£–¥–∞–ª—è–µ–º timestamp
    if 'timestamp' in combined.columns:
        combined = combined.drop(['timestamp'], axis=1)
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    combined = combined.fillna(method='ffill').fillna(method='bfill')
    combined = combined.replace([np.inf, -np.inf], 0)
    
    print("üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...")
    scaler = StandardScaler()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ log returns
    price_cols = ['open', 'high', 'low', 'close']
    for col in price_cols:
        if col in combined.columns:
            combined[f'{col}_returns'] = np.log(combined[col] / combined[col].shift(1)).fillna(0)
            combined[f'{col}_returns'] = np.clip(combined[f'{col}_returns'], -0.08, 0.08)
            combined[col] = combined[f'{col}_returns']
            combined = combined.drop([f'{col}_returns'], axis=1)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    other_cols = [col for col in combined.columns if col not in price_cols]
    if other_cols:
        combined[other_cols] = scaler.fit_transform(combined[other_cols])
        for col in other_cols:
            combined[col] = np.clip(combined[col], -4, 4)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    combined = combined.fillna(0)
    combined = combined.replace([np.inf, -np.inf], 0)
    
    print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(combined.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    return combined


def generate_optimized_crypto_data(n_points: int = 6000) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    np.random.seed(40)
    timestamps = pd.date_range(start='2023-01-01', periods=n_points, freq='1H')
    
    # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
    trend = np.linspace(45000, 58000, n_points)
    seasonal = 2000 * np.sin(2 * np.pi * np.arange(n_points) / 168)
    volatility_events = np.random.normal(0, 800, n_points)
    
    # –ú–µ–Ω—å—à–µ –∫—Ä—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    major_events = np.random.choice([0, 1], size=n_points, p=[0.985, 0.015])
    event_impact = np.random.normal(0, 3000, n_points) * major_events
    
    close_price = trend + seasonal + volatility_events + event_impact
    close_price = np.maximum(close_price, 25000)
    
    df = pd.DataFrame({
        'timestamp': timestamps,
        'open': close_price + np.random.normal(0, 80, n_points),
        'high': close_price * (1 + np.abs(np.random.normal(0, 0.006, n_points))),
        'low': close_price * (1 - np.abs(np.random.normal(0, 0.006, n_points))),
        'close': close_price,
        'volume': np.random.exponential(1200000, n_points)
    })
    
    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è OHLC
    df['high'] = np.maximum(df['high'], df[['open', 'close']].max(axis=1))
    df['low'] = np.minimum(df['low'], df[['open', 'close']].min(axis=1))
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['returns'] = df['close'].pct_change()
    df['sma_20'] = df['close'].rolling(20).mean()
    df['ema_12'] = df['close'].ewm(span=12).mean()
    df['volatility'] = df['returns'].rolling(24).std()
    
    # RSI
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    df['rsi'] = 100 - (100 / (1 + rs))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['macd'] = df['ema_12'] - df['close'].ewm(span=26).mean()
    df['bb_upper'] = df['sma_20'] + (df['close'].rolling(20).std() * 2)
    df['bb_lower'] = df['sma_20'] - (df['close'].rolling(20).std() * 2)
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    return df


class OptimizedSentimentTradingEnv(gym.Env):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    
    def __init__(self, combined_df: pd.DataFrame):
        super().__init__()
        
        self.df = combined_df.reset_index(drop=True)
        self.window_size = OptimizedSentimentConfig.WINDOW_SIZE
        
        self.action_space = spaces.Discrete(3)
        
        n_features = len(combined_df.columns)
        self.observation_space = spaces.Box(
            low=-np.inf, high=np.inf,
            shape=(self.window_size, n_features),
            dtype=np.float32
        )
        
        self._reset_state()
    
    def _reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.current_step = self.window_size
        self.balance = OptimizedSentimentConfig.INITIAL_BALANCE
        self.btc_amount = 0.0
        self.entry_price = 0.0
        self.entry_step = 0
        
        self.total_trades = 0
        self.profitable_trades = 0
        self.portfolio_history = [float(OptimizedSentimentConfig.INITIAL_BALANCE)]
        self.trades_history = []
        
        # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.sentiment_signals = []
        self.max_drawdown = 0.0
        self.peak_value = OptimizedSentimentConfig.INITIAL_BALANCE
    
    def reset(self, seed=None, options=None):
        self._reset_state()
        return self._get_observation(), {}
    
    def _get_observation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        start_idx = max(0, self.current_step - self.window_size)
        end_idx = self.current_step
        
        obs = self.df.iloc[start_idx:end_idx].values
        
        if len(obs) < self.window_size:
            padding = np.tile(obs[0], (self.window_size - len(obs), 1))
            obs = np.vstack([padding, obs])
        
        return obs.astype(np.float32)
    
    def _get_current_price(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        if self.current_step >= len(self.df):
            return self.df.iloc[-1]['close']
        return self.df.iloc[self.current_step]['close']
    
    def _get_sentiment_signal(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        if self.current_step >= len(self.df):
            return 0.0
        
        current_data = self.df.iloc[self.current_step]
        
        if 'overall_sentiment' in current_data.index:
            sentiment = current_data['overall_sentiment']
        else:
            sentiment = 0.0
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        if abs(sentiment) < OptimizedSentimentConfig.SENTIMENT_THRESHOLD:
            return 0.0
        
        # –£–º–µ—Ä–µ–Ω–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ
        sentiment *= OptimizedSentimentConfig.SENTIMENT_MULTIPLIER
        
        return np.clip(sentiment, -1, 1)
    
    def _calculate_position_size(self, sentiment_signal: float) -> float:
        """–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        base_risk = OptimizedSentimentConfig.RISK_PER_TRADE
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
        sentiment_multiplier = 1.0 + abs(sentiment_signal) * 0.3
        adjusted_risk = base_risk * sentiment_multiplier
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        adjusted_risk = min(adjusted_risk, OptimizedSentimentConfig.MAX_POSITION_SIZE)
        
        return adjusted_risk
    
    def _check_stop_loss_take_profit(self, current_price: float) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
        if self.btc_amount <= 0 or self.entry_price <= 0:
            return 'none'
        
        price_change = (current_price - self.entry_price) / self.entry_price
        
        if price_change <= -OptimizedSentimentConfig.STOP_LOSS:
            return 'stop_loss'
        elif price_change >= OptimizedSentimentConfig.TAKE_PROFIT:
            return 'take_profit'
        
        return 'none'
    
    def _execute_optimized_trade(self, action: int, current_price: float) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        sentiment_signal = self._get_sentiment_signal()
        trade_result = {'executed': False, 'type': None, 'sentiment_signal': sentiment_signal}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        sl_tp_action = self._check_stop_loss_take_profit(current_price)
        if sl_tp_action != 'none' and self.btc_amount > 0:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
            revenue = self.btc_amount * current_price
            commission = revenue * 0.001
            profit = revenue - self.btc_amount * self.entry_price
            
            if profit > 0:
                self.profitable_trades += 1
            
            self.balance += revenue - commission
            self.btc_amount = 0.0
            self.entry_price = 0.0
            
            trade_result.update({
                'executed': True, 'type': f'SELL_{sl_tp_action.upper()}',
                'profit': profit, 'reason': sl_tp_action
            })
            self.total_trades += 1
            self.trades_history.append(trade_result)
            
            return trade_result
        
        # –û–±—ã—á–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if action == 1 and self.balance > 100:  # Buy
            if sentiment_signal > 0 or len(self.sentiment_signals) < OptimizedSentimentConfig.MIN_TRADES_THRESHOLD:
                position_size = self._calculate_position_size(sentiment_signal)
                investment = self.balance * position_size
                amount = investment / current_price
                commission = investment * 0.001
                
                self.btc_amount += amount
                self.balance -= investment + commission
                self.entry_price = current_price
                self.entry_step = self.current_step
                
                trade_result.update({
                    'executed': True, 'type': 'BUY',
                    'amount': amount, 'price': current_price,
                    'investment': investment
                })
                
        elif action == 2 and self.btc_amount > 0:  # Sell
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
            potential_profit = (current_price - self.entry_price) / self.entry_price
            
            if (potential_profit >= OptimizedSentimentConfig.PROFIT_THRESHOLD or 
                sentiment_signal < -0.1 or 
                self.current_step - self.entry_step > 48):  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤
                
                revenue = self.btc_amount * current_price
                commission = revenue * 0.001
                profit = revenue - self.btc_amount * self.entry_price
                
                if profit > 0:
                    self.profitable_trades += 1
                
                self.balance += revenue - commission
                self.btc_amount = 0.0
                self.entry_price = 0.0
                
                trade_result.update({
                    'executed': True, 'type': 'SELL',
                    'profit': profit, 'revenue': revenue
                })
        
        if trade_result['executed']:
            self.total_trades += 1
            self.trades_history.append(trade_result)
            self.sentiment_signals.append(sentiment_signal)
        
        return trade_result
    
    def _calculate_portfolio_value(self) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        current_price = self._get_current_price()
        return self.balance + self.btc_amount * current_price
    
    def _calculate_optimized_reward(self) -> float:
        """–†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""
        current_portfolio = self._calculate_portfolio_value()
        prev_portfolio = self.portfolio_history[-1]
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        portfolio_change = (current_portfolio - prev_portfolio) / prev_portfolio
        base_reward = portfolio_change * 100
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
        if current_portfolio > self.peak_value:
            self.peak_value = current_portfolio
        current_drawdown = (self.peak_value - current_portfolio) / self.peak_value
        self.max_drawdown = max(self.max_drawdown, current_drawdown)
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –±–æ–ª—å—à—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        if current_drawdown > 0.1:  # 10% –ø—Ä–æ—Å–∞–¥–∫–∞
            base_reward -= current_drawdown * 50
        
        # –ë–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        sentiment_signal = self._get_sentiment_signal()
        if abs(sentiment_signal) > OptimizedSentimentConfig.SENTIMENT_THRESHOLD:
            if (sentiment_signal > 0 and portfolio_change > 0) or (sentiment_signal < 0 and portfolio_change < 0):
                base_reward += abs(sentiment_signal) * 10
        
        return base_reward
    
    def step(self, action: int) -> Tuple[np.ndarray, float, bool, bool, Dict[str, Any]]:
        """–®–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        current_price = self._get_current_price()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        trade_result = self._execute_optimized_trade(action, current_price)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_step += 1
        portfolio_value = self._calculate_portfolio_value()
        self.portfolio_history.append(portfolio_value)
        
        # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
        reward = self._calculate_optimized_reward()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        done = (
            self.current_step >= len(self.df) - 1 or
            portfolio_value <= OptimizedSentimentConfig.INITIAL_BALANCE * 0.2 or
            self.max_drawdown > 0.5
        )
        
        info = {
            'portfolio_value': portfolio_value,
            'balance': self.balance,
            'btc_amount': self.btc_amount,
            'total_trades': self.total_trades,
            'profitable_trades': self.profitable_trades,
            'max_drawdown': self.max_drawdown,
            'sentiment_signal': trade_result.get('sentiment_signal', 0),
            'trade_result': trade_result
        }
        
        return self._get_observation(), reward, done, False, info


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã V3.3"""
    print("üöÄ –ó–ê–ü–£–°–ö SENTIMENT –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ V3.3 - OPTIMIZED EDITION")
    print("=" * 70)
    
    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –≠–¢–ê–ü 1: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    n_points = 6000
    price_data = generate_optimized_crypto_data(n_points)
    
    sentiment_analyzer = SentimentAnalyzer()
    sentiment_data = sentiment_analyzer.generate_social_sentiment_data(n_points)
    
    onchain_analyzer = OnChainAnalyzer()
    onchain_data = onchain_analyzer.generate_onchain_data(n_points)
    
    macro_analyzer = MacroEconomicAnalyzer()
    macro_data = macro_analyzer.generate_macro_data(n_points)
    
    # 2. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("\nüîÑ –≠–¢–ê–ü 2: –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("-" * 50)
    combined_df = combine_optimized_data_sources(price_data, sentiment_data, onchain_data, macro_data)
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüéÆ –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("-" * 50)
    env = OptimizedSentimentTradingEnv(combined_df)
    vec_env = DummyVecEnv([lambda: env])
    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å {len(combined_df.columns)} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    print("\nüß† –≠–¢–ê–ü 4: –°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ú–û–î–ï–õ–ò")
    print("-" * 50)
    
    policy_kwargs = dict(
        features_extractor_class=OptimizedFeatureExtractor,
        features_extractor_kwargs=dict(features_dim=256),
        net_arch=[256, 128, 64],
        activation_fn=torch.nn.ReLU
    )
    
    model = PPO(
        'MlpPolicy',
        vec_env,
        learning_rate=OptimizedSentimentConfig.LEARNING_RATE,
        n_steps=1024,
        batch_size=32,
        n_epochs=4,
        gamma=0.99,
        gae_lambda=0.95,
        clip_range=0.2,
        ent_coef=0.005,
        vf_coef=0.5,
        max_grad_norm=0.5,
        policy_kwargs=policy_kwargs,
        verbose=1
    )
    
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
    
    # 5. –û–±—É—á–µ–Ω–∏–µ
    print("\nüéì –≠–¢–ê–ü 5: –û–ë–£–ß–ï–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ú–û–î–ï–õ–ò")
    print("-" * 50)
    model.learn(total_timesteps=OptimizedSentimentConfig.TOTAL_TIMESTEPS)
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüß™ –≠–¢–ê–ü 6: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("-" * 50)
    
    obs, _ = env.reset()
    results = []
    sentiment_history = []
    
    for step in range(2000):
        action, _ = model.predict(obs, deterministic=True)
        obs, reward, done, truncated, info = env.step(int(action))
        
        results.append({
            'step': step,
            'portfolio_value': info['portfolio_value'],
            'balance': info['balance'],
            'total_trades': info['total_trades'],
            'profitable_trades': info['profitable_trades'],
            'max_drawdown': info['max_drawdown'],
            'sentiment_signal': info['sentiment_signal'],
            'reward': reward
        })
        
        sentiment_history.append(info['sentiment_signal'])
        
        if done:
            break
    
    # 7. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –≠–¢–ê–ü 7: –ê–ù–ê–õ–ò–ó –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("-" * 50)
    
    final_value = results[-1]['portfolio_value']
    total_return = (final_value - OptimizedSentimentConfig.INITIAL_BALANCE) / OptimizedSentimentConfig.INITIAL_BALANCE * 100
    total_trades = results[-1]['total_trades']
    profitable_trades = results[-1]['profitable_trades']
    win_rate = (profitable_trades / max(total_trades, 1)) * 100
    max_drawdown = results[-1]['max_drawdown'] * 100
    avg_sentiment = np.mean([abs(s) for s in sentiment_history if s != 0])
    
    print("üìä –ê–ù–ê–õ–ò–ó SENTIMENT –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ V3.3 - OPTIMIZED")
    print("=" * 65)
    print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {OptimizedSentimentConfig.INITIAL_BALANCE:,.2f} USDT")
    print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_value:,.2f} USDT")
    print(f"üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}%")
    print(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
    print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profitable_trades} ({win_rate:.1f}%)")
    print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
    print(f"üì± –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {avg_sentiment:.3f}")
    print(f"üõ°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∏—Å–∫-–ª–∏–º–∏—Ç—ã: –°—Ç–æ–ø-–ª–æ—Å—Å {OptimizedSentimentConfig.STOP_LOSS*100:.0f}% | –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç {OptimizedSentimentConfig.TAKE_PROFIT*100:.0f}%")
    
    # 8. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï V3.3 - OPTIMIZED EDITION")
    print("=" * 60)
    print("üöÄ Sentiment —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ V3.3 Optimized –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
    print(f"üí° –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}%")
    print(f"üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {win_rate:.1f}%")
    print(f"üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
    
    print("\n‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ V3.3:")
    print("  ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Å–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞–º–∏")
    print("  ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π")
    print("  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
    print("  ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏")
    print("  ‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if total_return > 5 and win_rate > 55 and max_drawdown < 20:
        print("\nüü¢ –û–¶–ï–ù–ö–ê: –û—Ç–ª–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è!")
    elif total_return > 0 and win_rate > 50:
        print("\nüü° –û–¶–ï–ù–ö–ê: –•–æ—Ä–æ—à–∞—è –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º")
    else:
        print("\nüî∂ –û–¶–ï–ù–ö–ê: –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    print("\nüéâ –ê–ù–ê–õ–ò–ó V3.3 OPTIMIZED –ó–ê–í–ï–†–®–ï–ù!")


if __name__ == "__main__":
    main() 