"""
üöÄ DATA LOADER V3.0 - –ú—É–ª—å—Ç–∏-–∞–∫—Ç–∏–≤—ã —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
"""

import pandas as pd
import numpy as np
import yfinance as yf
import requests
import time
from typing import Dict, List, Tuple
from datetime import datetime, timedelta
import os


class MultiAssetDataLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã
    SUPPORTED_ASSETS = {
        'BTC': 'BTC-USD',
        'ETH': 'ETH-USD', 
        'BNB': 'BNB-USD',
        'ADA': 'ADA-USD',
        'SOL': 'SOL-USD',
        'MATIC': 'MATIC-USD',
        'DOT': 'DOT-USD',
        'AVAX': 'AVAX-USD'
    }
    
    def __init__(self, data_folder: str = "data/"):
        self.data_folder = data_folder
        self.ensure_data_folder()
    
    def ensure_data_folder(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not os.path.exists(self.data_folder):
            os.makedirs(self.data_folder)
    
    def download_crypto_data(self, symbol: str, period: str = "2y", interval: str = "5m") -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ Yahoo Finance
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (BTC, ETH, etc.)
            period: –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö (1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max)
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª (1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h, 1d, 5d, 1wk, 1mo, 3mo)
        """
        if symbol not in self.SUPPORTED_ASSETS:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞–∫—Ç–∏–≤: {symbol}")
        
        ticker = self.SUPPORTED_ASSETS[symbol]
        print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ {symbol} ({ticker})...")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ yfinance
            crypto = yf.Ticker(ticker)
            data = crypto.history(period=period, interval=interval)
            
            if data.empty:
                raise Exception(f"–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫
            data = data.rename(columns={
                'Open': 'open',
                'High': 'high', 
                'Low': 'low',
                'Close': 'close',
                'Volume': 'volume'
            })
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
            data['symbol'] = symbol
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
            return data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
            return pd.DataFrame()
    
    def download_all_assets(self, period: str = "2y", interval: str = "5m") -> Dict[str, pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"""
        all_data = {}
        
        for symbol in self.SUPPORTED_ASSETS.keys():
            data = self.download_crypto_data(symbol, period, interval)
            if not data.empty:
                all_data[symbol] = data
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
                filename = f"{symbol}_{interval}_{period}.csv"
                filepath = os.path.join(self.data_folder, filename)
                data.to_csv(filepath)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
        return all_data
    
    def load_existing_data(self, symbols: List[str] = None) -> Dict[str, pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        if symbols is None:
            symbols = list(self.SUPPORTED_ASSETS.keys())
        
        data = {}
        for symbol in symbols:
            # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            files = [f for f in os.listdir(self.data_folder) if f.startswith(symbol)]
            
            if files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                latest_file = max(files, key=lambda x: os.path.getctime(os.path.join(self.data_folder, x)))
                filepath = os.path.join(self.data_folder, latest_file)
                
                try:
                    df = pd.read_csv(filepath, index_col=0, parse_dates=True)
                    data[symbol] = df
                    print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω {symbol}: {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {latest_file}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {symbol}: {e}")
        
        return data
    
    def calculate_correlations(self, data: Dict[str, pd.DataFrame], window: int = 24*7) -> pd.DataFrame:
        """
        –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–æ–≤
            window: –û–∫–Ω–æ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–≤ –ø–µ—Ä–∏–æ–¥–∞—Ö)
        """
        if len(data) < 2:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            return pd.DataFrame()
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        price_data = pd.DataFrame()
        for symbol, df in data.items():
            if 'close' in df.columns:
                price_data[symbol] = df['close']
        
        # –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        correlations = price_data.corr()
        
        # –°–∫–æ–ª—å–∑—è—â–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        rolling_corr = {}
        symbols = list(price_data.columns)
        
        for i, sym1 in enumerate(symbols):
            for j, sym2 in enumerate(symbols[i+1:], i+1):
                pair = f"{sym1}-{sym2}"
                rolling_corr[pair] = price_data[sym1].rolling(window).corr(price_data[sym2])
        
        rolling_corr_df = pd.DataFrame(rolling_corr)
        
        print("üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
        print(correlations.round(3))
        
        return correlations, rolling_corr_df
    
    def prepare_multi_asset_features(self, data: Dict[str, pd.DataFrame]) -> pd.DataFrame:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
        """
        combined_features = pd.DataFrame()
        
        for symbol, df in data.items():
            if df.empty:
                continue
                
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = pd.DataFrame(index=df.index)
            features[f'{symbol}_close'] = df['close']
            features[f'{symbol}_volume'] = df['volume']
            features[f'{symbol}_high'] = df['high']
            features[f'{symbol}_low'] = df['low']
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            features[f'{symbol}_returns'] = df['close'].pct_change()
            features[f'{symbol}_volatility'] = features[f'{symbol}_returns'].rolling(24).std()
            
            # EMA
            features[f'{symbol}_ema_12'] = df['close'].ewm(span=12).mean()
            features[f'{symbol}_ema_26'] = df['close'].ewm(span=26).mean()
            
            # RSI
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            features[f'{symbol}_rsi'] = 100 - (100 / (1 + rs))
            
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            if combined_features.empty:
                combined_features = features
            else:
                combined_features = combined_features.join(features, how='outer')
        
        # –ú–µ–∂–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        symbols = list(data.keys())
        if len(symbols) >= 2:
            # –°–ø—Ä–µ–¥—ã –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏
            for i, sym1 in enumerate(symbols):
                for j, sym2 in enumerate(symbols[i+1:], i+1):
                    if f'{sym1}_close' in combined_features.columns and f'{sym2}_close' in combined_features.columns:
                        spread = combined_features[f'{sym1}_close'] / combined_features[f'{sym2}_close']
                        combined_features[f'{sym1}_{sym2}_spread'] = spread
                        combined_features[f'{sym1}_{sym2}_spread_ma'] = spread.rolling(24).mean()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ NaN
        combined_features = combined_features.dropna()
        
        print(f"üîß –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(combined_features.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {len(symbols)} –∞–∫—Ç–∏–≤–æ–≤")
        print(f"üìà –î–∞–Ω–Ω—ã–µ: {len(combined_features)} –∑–∞–ø–∏—Å–µ–π")
        
        return combined_features


def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
    print("üß™ –¢–µ—Å—Ç Multi-Asset Data Loader V3.0")
    print("=" * 50)
    
    loader = MultiAssetDataLoader()
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ BTC...")
    btc_data = loader.download_crypto_data('BTC', period='5d', interval='1h')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(btc_data)} –∑–∞–ø–∏—Å–µ–π")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ ETH –∏ BNB...")
    multi_data = {}
    for symbol in ['ETH', 'BNB']:
        data = loader.download_crypto_data(symbol, period='5d', interval='1h')
        if not data.empty:
            multi_data[symbol] = data
    
    # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    if len(multi_data) >= 2:
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        correlations, rolling_corr = loader.calculate_correlations(multi_data)
    
    # –¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    if multi_data:
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        features = loader.prepare_multi_asset_features(multi_data)
        print(f"–ü—Ä–∏–∑–Ω–∞–∫–∏: {list(features.columns[:10])}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    quick_test() 