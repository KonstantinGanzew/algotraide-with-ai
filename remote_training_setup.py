"""
üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –£–î–ê–õ–ï–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø –ù–ê GPU –°–ï–†–í–ï–†–ï
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
–°–µ—Ä–≤–µ—Ä: 192.168.88.218 (NVIDIA GPU + CUDA 12.8)
"""

import os
import subprocess
import json
import time
from pathlib import Path
from typing import Optional, Dict, Any
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class RemoteTrainingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ"""
    
    def __init__(self, 
                 server_ip: str = "192.168.88.218",
                 username: str = "kureed",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username
                 remote_path: str = "/home/kureed/training",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å
                 ssh_key_path: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            server_ip: IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ  
            remote_path: –ü—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            ssh_key_path: –ü—É—Ç—å –∫ SSH –∫–ª—é—á—É (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        """
        self.server_ip = server_ip
        self.username = username
        self.remote_path = remote_path
        self.ssh_key_path = ssh_key_path
        self.connection_string = f"{username}@{server_ip}"
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.sync_files = [
            "sentiment_trading_v69.py",
            "data/BTCUSDT_5m_2y.csv",
            "data/BTCUSDT_1h_2y.csv", 
            "data/BTCUSDT_4h_2y.csv",
            "data/BTCUSDT_1d_2y.csv",
            "requirements-gpu.txt"
        ]
        
    def _run_ssh_command(self, command: str, capture_output: bool = True) -> subprocess.CompletedProcess:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ SSH"""
        ssh_cmd = ["ssh"]
        
        if self.ssh_key_path:
            ssh_cmd.extend(["-i", self.ssh_key_path])
            
        ssh_cmd.extend([self.connection_string, command])
        
        logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SSH –∫–æ–º–∞–Ω–¥—ã: {' '.join(ssh_cmd[2:])}")
        
        try:
            result = subprocess.run(ssh_cmd, capture_output=capture_output, text=True, timeout=300)
            return result
        except subprocess.TimeoutExpired:
            logger.error("‚è∞ –¢–∞–π–º-–∞—É—Ç SSH –∫–æ–º–∞–Ω–¥—ã")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SSH: {e}")
            raise
    
    def _run_scp_command(self, source: str, destination: str) -> bool:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ SCP"""
        scp_cmd = ["scp"]
        
        if self.ssh_key_path:
            scp_cmd.extend(["-i", self.ssh_key_path])
            
        scp_cmd.extend(["-r", source, destination])
        
        logger.info(f"üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {source} -> {destination}")
        
        try:
            result = subprocess.run(scp_cmd, capture_output=True, text=True, timeout=600)
            if result.returncode == 0:
                logger.info("‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {result.stderr}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SCP: {e}")
            return False
    
    def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        logger.info(f"üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.server_ip}...")
        
        try:
            result = self._run_ssh_command("echo 'Connected successfully'")
            if result.returncode == 0:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {result.stderr}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")
            return False
    
    def check_gpu_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ GPU –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        logger.info("üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU —Å—Ç–∞—Ç—É—Å–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ NVIDIA-SMI
            result = self._run_ssh_command("nvidia-smi --query-gpu=name,memory.total,memory.free,temperature.gpu --format=csv,noheader,nounits")
            
            if result.returncode == 0:
                gpu_info = result.stdout.strip().split('\n')
                gpu_data = []
                
                for i, gpu_line in enumerate(gpu_info):
                    parts = gpu_line.split(', ')
                    if len(parts) >= 4:
                        gpu_data.append({
                            'id': i,
                            'name': parts[0],
                            'memory_total': int(parts[1]),
                            'memory_free': int(parts[2]),
                            'temperature': int(parts[3])
                        })
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA –≤–µ—Ä—Å–∏–∏
                cuda_result = self._run_ssh_command("nvcc --version | grep 'release' | awk '{print $6}' | cut -c2-")
                cuda_version = cuda_result.stdout.strip() if cuda_result.returncode == 0 else "Unknown"
                
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(gpu_data)} GPU(s)")
                logger.info(f"üîß CUDA –≤–µ—Ä—Å–∏—è: {cuda_version}")
                
                return {
                    'available': True,
                    'cuda_version': cuda_version,
                    'gpus': gpu_data
                }
            else:
                logger.warning("‚ö†Ô∏è NVIDIA-SMI –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return {'available': False, 'error': result.stderr}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
            return {'available': False, 'error': str(e)}
    
    def setup_remote_environment(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã...")
        
        commands = [
            f"mkdir -p {self.remote_path}",
            f"mkdir -p {self.remote_path}/data",
            f"mkdir -p {self.remote_path}/logs",
            f"mkdir -p {self.remote_path}/models",
        ]
        
        for cmd in commands:
            result = self._run_ssh_command(cmd)
            if result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {cmd}")
                return False
        
        logger.info("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return True
    
    def sync_files(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        logger.info("üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...")
        
        success = True
        
        for file_path in self.sync_files:
            local_path = Path(file_path)
            
            if not local_path.exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                continue
            
            if local_path.is_file():
                # –î–ª—è —Ñ–∞–π–ª–æ–≤
                remote_file_path = f"{self.connection_string}:{self.remote_path}/{file_path}"
                if not self._run_scp_command(str(local_path), remote_file_path):
                    success = False
            else:
                # –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                remote_dir_path = f"{self.connection_string}:{self.remote_path}/"
                if not self._run_scp_command(str(local_path), remote_dir_path):
                    success = False
        
        if success:
            logger.info("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            
        return success
    
    def install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        commands = [
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
            "python3 --version",
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            f"cd {self.remote_path} && python3 -m venv venv || true",
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            f"cd {self.remote_path} && source venv/bin/activate && pip install --upgrade pip",
            f"cd {self.remote_path} && source venv/bin/activate && pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121",
            f"cd {self.remote_path} && source venv/bin/activate && pip install -r requirements-gpu.txt",
        ]
        
        for cmd in commands:
            logger.info(f"üîß {cmd.split('&&')[-1].strip()}")
            result = self._run_ssh_command(cmd, capture_output=False)
            
            if result.returncode != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {cmd}")
                return False
                
        logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    def start_training(self, script_name: str = "sentiment_trading_v69.py", 
                      background: bool = True) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ...")
        
        if background:
            # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            cmd = (f"cd {self.remote_path} && "
                   f"source venv/bin/activate && "
                   f"nohup python {script_name} > logs/training_$(date +%Y%m%d_%H%M%S).log 2>&1 & "
                   f"echo $!")
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
            cmd = (f"cd {self.remote_path} && "
                   f"source venv/bin/activate && "
                   f"python {script_name}")
        
        try:
            result = self._run_ssh_command(cmd, capture_output=background)
            
            if background and result.returncode == 0:
                process_id = result.stdout.strip()
                logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ (PID: {process_id})")
                logger.info(f"üìã –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ssh {self.connection_string} 'tail -f {self.remote_path}/logs/training_*.log'")
                return True
            elif not background:
                return result.returncode == 0
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def monitor_training(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info("üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è...")
        
        try:
            # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª
            find_cmd = f"ls -t {self.remote_path}/logs/training_*.log | head -1"
            result = self._run_ssh_command(find_cmd)
            
            if result.returncode == 0 and result.stdout.strip():
                log_file = result.stdout.strip()
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                monitor_cmd = f"tail -f {log_file}"
                logger.info(f"üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {log_file}")
                
                self._run_ssh_command(monitor_cmd, capture_output=False)
            else:
                logger.error("‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def get_training_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
            result = self._run_ssh_command("pgrep -f 'python.*sentiment_trading' || echo 'No processes found'")
            
            processes = []
            if result.returncode == 0 and result.stdout.strip() != "No processes found":
                pids = result.stdout.strip().split('\n')
                processes = [{'pid': pid.strip()} for pid in pids if pid.strip()]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
            log_result = self._run_ssh_command(f"ls -t {self.remote_path}/logs/training_*.log 2>/dev/null | head -1 | xargs tail -5 2>/dev/null || echo 'No logs'")
            latest_logs = log_result.stdout.strip() if log_result.returncode == 0 else "No logs available"
            
            return {
                'processes': processes,
                'latest_logs': latest_logs,
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
            }
            
        except Exception as e:
            return {'error': str(e)}


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"""
    print("üöÄ –ú–ï–ù–ï–î–ñ–ï–† –£–î–ê–õ–ï–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ò–ó–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò –î–ê–ù–ù–´–ï)
    config = {
        'server_ip': '192.168.88.218',
        'username': 'user',  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® USERNAME
        'remote_path': '/home/user/training',  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –ü–£–¢–¨
        'ssh_key_path': None  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ SSH –∫–ª—é—á—É –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    }
    
    print("üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"   üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: {config['server_ip']}")
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config['username']}")
    print(f"   üìÅ –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å: {config['remote_path']}")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = RemoteTrainingManager(**config)
    
    # –ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    steps = [
        ("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", manager.check_connection),
        ("üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU", lambda: print(json.dumps(manager.check_gpu_status(), indent=2)) or True),
        ("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã", manager.setup_remote_environment),
        ("üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤", manager.sync_files),
        ("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", manager.install_dependencies),
    ]
    
    for step_name, step_func in steps:
        print(f"\n{step_name}...")
        if not step_func():
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
            return False
    
    print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüéØ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("   1. –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è: manager.start_training()")
    print("   2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: manager.monitor_training()")
    print("   3. –°—Ç–∞—Ç—É—Å: manager.get_training_status()")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    while True:
        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("   1 - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
        print("   2 - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è")
        print("   3 - –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è")
        print("   4 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GPU")
        print("   0 - –í—ã—Ö–æ–¥")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == "1":
            print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è...")
            if manager.start_training():
                print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
                
        elif choice == "2":
            print("\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)...")
            manager.monitor_training()
            
        elif choice == "3":
            print("\nüìã –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è...")
            status = manager.get_training_status()
            print(json.dumps(status, indent=2))
            
        elif choice == "4":
            print("\nüéÆ –°—Ç–∞—Ç—É—Å GPU...")
            gpu_status = manager.check_gpu_status()
            print(json.dumps(gpu_status, indent=2))
            
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main() 