"""
üöÄ SENTIMENT –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V3.6 - ULTRA ACTIVE EDITION
–£–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏ –ò –ø—Ä–æ–¥–∞–∂–∞–º–∏
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
from stable_baselines3.common.torch_layers import BaseFeaturesExtractor
import gymnasium as gym
from gymnasium import spaces
from typing import Dict, List, Tuple, Any
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')


class UltraActiveConfig:
    """–£–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    INITIAL_BALANCE = 10000
    RISK_PER_TRADE = 0.15  # 15% —Ä–∏—Å–∫
    MAX_POSITION_SIZE = 0.9  # 90% –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    
    # –ß–∞—Å—Ç–∞—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    FORCE_BUY_INTERVAL = 30   # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∫–∞–∂–¥—ã–µ 30 —à–∞–≥–æ–≤
    FORCE_SELL_INTERVAL = 40  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∫–∞–∂–¥—ã–µ 40 —à–∞–≥–æ–≤ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
    MAX_HOLD_TIME = 60       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    
    # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –ø–æ—Ä–æ–≥–∏
    MIN_SIGNAL_THRESHOLD = 0.01  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    WINDOW_SIZE = 12  # –ï—â–µ –º–µ–Ω—å—à–µ –æ–∫–Ω–æ
    TOTAL_TIMESTEPS = 5000  # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    LEARNING_RATE = 5e-4
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∏–º—É–ª—ã
    TRADING_BONUS = 10.0      # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
    INACTIVITY_PENALTY = -5.0  # –ë–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    COMPLETION_BONUS = 15.0   # –ë–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –ø–æ–∫—É–ø–∫–∞-–ø—Ä–æ–¥–∞–∂–∞


class UltraSimpleAnalyzer:
    """–£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑"""
    
    def add_ultra_simple_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        # –ë–∞–∑–æ–≤—ã–µ
        df['returns'] = df['close'].pct_change()
        df['price_change'] = df['close'].diff()
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        df['sma_3'] = df['close'].rolling(3).mean()
        df['sma_7'] = df['close'].rolling(7).mean()
        
        # –°–∏–≥–Ω–∞–ª —Ç—Ä–µ–Ω–¥–∞
        df['trend_signal'] = np.where(df['close'] > df['sma_7'], 1, -1)
        df['momentum_signal'] = np.where(df['returns'] > 0, 1, -1)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å–∫–æ—Ä
        df['simple_score'] = (df['trend_signal'] + df['momentum_signal']) / 2
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        np.random.seed(42)
        df['random_sentiment'] = np.random.uniform(-0.5, 0.5, len(df))
        df['overall_sentiment'] = df['simple_score'] * 0.7 + df['random_sentiment'] * 0.3
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 8 —É–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        return df


class UltraActiveExtractor(BaseFeaturesExtractor):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Feature Extractor"""
    
    def __init__(self, observation_space: gym.Space, features_dim: int = 64):
        super().__init__(observation_space, features_dim)
        
        if observation_space.shape is not None:
            self.input_features = observation_space.shape[1]
        else:
            self.input_features = 10
        
        # –°—É–ø–µ—Ä –ø—Ä–æ—Å—Ç–∞—è —Å–µ—Ç—å
        self.net = nn.Sequential(
            nn.Linear(self.input_features, 32),
            nn.ReLU(),
            nn.Linear(32, features_dim),
            nn.ReLU()
        )
    
    def forward(self, observations: torch.Tensor) -> torch.Tensor:
        # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
        last_obs = observations[:, -1, :]
        return self.net(last_obs)


class UltraActiveTradingEnv(gym.Env):
    """–£–ª—å—Ç—Ä–∞-–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    
    def __init__(self, df: pd.DataFrame):
        super().__init__()
        
        self.df = df.reset_index(drop=True)
        self.window_size = UltraActiveConfig.WINDOW_SIZE
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
        self.feature_columns = [col for col in numeric_columns if col not in 
                               ['open', 'high', 'low', 'close', 'volume']][:10]  # –ú–∞–∫—Å–∏–º—É–º 10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        
        self.action_space = spaces.Discrete(3)
        
        n_features = len(self.feature_columns)
        self.observation_space = spaces.Box(
            low=-np.inf, high=np.inf,
            shape=(self.window_size, n_features),
            dtype=np.float32
        )
        
        self._prepare_data()
        self._reset_state()
    
    def _prepare_data(self):
        """–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîß –£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        feature_data = self.df[self.feature_columns].fillna(0)
        feature_data = feature_data.replace([np.inf, -np.inf], 0)
        
        # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        normalized_data = (feature_data - feature_data.mean()) / (feature_data.std() + 1e-8)
        normalized_data = np.clip(normalized_data, -2, 2)
        
        self.normalized_df = pd.DataFrame(normalized_data, columns=self.feature_columns)
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(self.feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    
    def _reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.current_step = self.window_size
        self.balance = UltraActiveConfig.INITIAL_BALANCE
        self.btc_amount = 0.0
        self.entry_price = 0.0
        self.entry_step = 0
        
        self.total_trades = 0
        self.profitable_trades = 0
        self.portfolio_history = [float(UltraActiveConfig.INITIAL_BALANCE)]
        self.trades_history = []
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.steps_since_last_buy = 0
        self.steps_since_last_sell = 0
        self.position_hold_time = 0
        
        self.max_drawdown = 0.0
        self.peak_value = UltraActiveConfig.INITIAL_BALANCE
    
    def reset(self, seed=None, options=None):
        self._reset_state()
        return self._get_observation(), {}
    
    def _get_observation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"""
        start_idx = max(0, self.current_step - self.window_size)
        end_idx = self.current_step
        
        obs = self.normalized_df.iloc[start_idx:end_idx].values
        
        if len(obs) < self.window_size:
            padding = np.tile(obs[0], (self.window_size - len(obs), 1))
            obs = np.vstack([padding, obs])
        
        return obs.astype(np.float32)
    
    def _get_current_price(self) -> float:
        if self.current_step >= len(self.df):
            return self.df.iloc[-1]['close']
        return self.df.iloc[self.current_step]['close']
    
    def _get_current_datetime(self) -> str:
        if self.current_step >= len(self.df):
            return str(self.df.iloc[-1]['datetime'])
        return str(self.df.iloc[self.current_step]['datetime'])
    
    def _should_force_buy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏"""
        return (self.steps_since_last_buy >= UltraActiveConfig.FORCE_BUY_INTERVAL and 
                self.btc_amount == 0 and self.balance > 100)
    
    def _should_force_sell(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏"""
        return (self.btc_amount > 0 and (
            self.steps_since_last_sell >= UltraActiveConfig.FORCE_SELL_INTERVAL or
            self.position_hold_time >= UltraActiveConfig.MAX_HOLD_TIME
        ))
    
    def _execute_ultra_trade(self, action: int, current_price: float) -> Dict[str, Any]:
        """–£–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"""
        
        force_buy = self._should_force_buy()
        force_sell = self._should_force_sell()
        
        trade_result = {'executed': False, 'type': None, 'forced': False}
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if force_sell:
            revenue = self.btc_amount * current_price
            commission = revenue * 0.001
            profit = revenue - self.btc_amount * self.entry_price
            
            if profit > 0:
                self.profitable_trades += 1
            
            self.balance += revenue - commission
            self.btc_amount = 0.0
            self.entry_price = 0.0
            self.steps_since_last_sell = 0
            self.position_hold_time = 0
            
            trade_result.update({
                'executed': True, 'type': 'SELL',
                'profit': profit, 'price': current_price,
                'datetime': self._get_current_datetime(),
                'forced': True, 'reason': 'FORCE_SELL'
            })
            
            print(f"üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê –ø–æ ${current_price:.2f}")
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê
        elif force_buy:
            position_size = UltraActiveConfig.RISK_PER_TRADE
            investment = self.balance * position_size
            amount = investment / current_price
            commission = investment * 0.001
            
            self.btc_amount += amount
            self.balance -= investment + commission
            self.entry_price = current_price
            self.entry_step = self.current_step
            self.steps_since_last_buy = 0
            self.position_hold_time = 0
            
            trade_result.update({
                'executed': True, 'type': 'BUY',
                'amount': amount, 'price': current_price,
                'investment': investment,
                'datetime': self._get_current_datetime(),
                'forced': True, 'reason': 'FORCE_BUY'
            })
            
            print(f"üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –ø–æ ${current_price:.2f}")
        
        # –û–ë–´–ß–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø (–æ—á–µ–Ω—å –ª–∏–±–µ—Ä–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è)
        elif action == 1 and self.balance > 100 and self.btc_amount == 0:  # Buy
            # –ü–æ–∫—É–ø–∞–µ–º –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞
            position_size = UltraActiveConfig.RISK_PER_TRADE
            investment = self.balance * position_size
            amount = investment / current_price
            commission = investment * 0.001
            
            self.btc_amount += amount
            self.balance -= investment + commission
            self.entry_price = current_price
            self.entry_step = self.current_step
            self.steps_since_last_buy = 0
            self.position_hold_time = 0
            
            trade_result.update({
                'executed': True, 'type': 'BUY',
                'amount': amount, 'price': current_price,
                'investment': investment,
                'datetime': self._get_current_datetime()
            })
            
        elif action == 2 and self.btc_amount > 0:  # Sell
            # –ü—Ä–æ–¥–∞–µ–º –æ—á–µ–Ω—å –ª–µ–≥–∫–æ
            revenue = self.btc_amount * current_price
            commission = revenue * 0.001
            profit = revenue - self.btc_amount * self.entry_price
            
            if profit > 0:
                self.profitable_trades += 1
            
            self.balance += revenue - commission
            self.btc_amount = 0.0
            self.entry_price = 0.0
            self.steps_since_last_sell = 0
            self.position_hold_time = 0
            
            trade_result.update({
                'executed': True, 'type': 'SELL',
                'profit': profit, 'price': current_price,
                'datetime': self._get_current_datetime()
            })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.steps_since_last_buy += 1
        self.steps_since_last_sell += 1
        if self.btc_amount > 0:
            self.position_hold_time += 1
        
        if trade_result['executed']:
            self.total_trades += 1
            self.trades_history.append(trade_result)
        
        return trade_result
    
    def _calculate_portfolio_value(self) -> float:
        current_price = self._get_current_price()
        return self.balance + self.btc_amount * current_price
    
    def _calculate_ultra_reward(self) -> float:
        """–£–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≥—Ä–∞–¥—ã"""
        current_portfolio = self._calculate_portfolio_value()
        prev_portfolio = self.portfolio_history[-1]
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        portfolio_change = (current_portfolio - prev_portfolio) / prev_portfolio
        base_reward = portfolio_change * 100
        
        # –û–ì–†–û–ú–ù–´–ô –±–æ–Ω—É—Å –∑–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
        if len(self.trades_history) > 0:
            last_trade = self.trades_history[-1]
            if last_trade.get('executed', False):
                base_reward += UltraActiveConfig.TRADING_BONUS
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
                if last_trade['type'] == 'SELL':
                    base_reward += UltraActiveConfig.COMPLETION_BONUS
        
        # –û–ì–†–û–ú–ù–´–ô —à—Ç—Ä–∞—Ñ –∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
        if self.steps_since_last_buy > UltraActiveConfig.FORCE_BUY_INTERVAL:
            base_reward += UltraActiveConfig.INACTIVITY_PENALTY
        
        if self.btc_amount > 0 and self.position_hold_time > UltraActiveConfig.MAX_HOLD_TIME:
            base_reward += UltraActiveConfig.INACTIVITY_PENALTY
        
        return base_reward
    
    def step(self, action: int) -> Tuple[np.ndarray, float, bool, bool, Dict[str, Any]]:
        """–®–∞–≥ —É–ª—å—Ç—Ä–∞-–∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
        current_price = self._get_current_price()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        trade_result = self._execute_ultra_trade(action, current_price)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_step += 1
        portfolio_value = self._calculate_portfolio_value()
        self.portfolio_history.append(portfolio_value)
        
        # –£–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        reward = self._calculate_ultra_reward()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        done = (
            self.current_step >= len(self.df) - 1 or
            portfolio_value <= UltraActiveConfig.INITIAL_BALANCE * 0.2
        )
        
        info = {
            'portfolio_value': portfolio_value,
            'balance': self.balance,
            'btc_amount': self.btc_amount,
            'total_trades': self.total_trades,
            'profitable_trades': self.profitable_trades,
            'current_price': current_price,
            'datetime': self._get_current_datetime(),
            'steps_since_last_buy': self.steps_since_last_buy,
            'steps_since_last_sell': self.steps_since_last_sell,
            'position_hold_time': self.position_hold_time,
            'trade_result': trade_result
        }
        
        return self._get_observation(), reward, done, False, info


def load_and_prepare_ultra_data() -> pd.DataFrame:
    """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    df = pd.read_csv("data/BTC_5_2w.csv")
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df['datetime'] = df['timestamp']
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    analyzer = UltraSimpleAnalyzer()
    df = analyzer.add_ultra_simple_indicators(df)
    
    # –û—á–∏—Å—Ç–∫–∞
    df = df.fillna(method='ffill').fillna(0)
    df = df.replace([np.inf, -np.inf], 0)
    
    print(f"‚úÖ –ì–æ—Ç–æ–≤ —É–ª—å—Ç—Ä–∞-–¥–∞—Ç–∞—Å–µ—Ç —Å {len(df.columns)} –∫–æ–ª–æ–Ω–∫–∞–º–∏")
    return df


def main():
    """–£–ª—å—Ç—Ä–∞-–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ V3.6"""
    print("üöÄ –ó–ê–ü–£–°–ö SENTIMENT –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ V3.6 - ULTRA ACTIVE EDITION")
    print("=" * 85)
    
    # 1. –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    print("\nüìä –≠–¢–ê–ü 1: –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 65)
    combined_df = load_and_prepare_ultra_data()
    
    # 2. –£–ª—å—Ç—Ä–∞-–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    print("\nüéÆ –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –£–õ–¨–¢–†–ê-–ê–ö–¢–ò–í–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("-" * 65)
    env = UltraActiveTradingEnv(combined_df)
    vec_env = DummyVecEnv([lambda: env])
    print(f"‚úÖ –£–ª—å—Ç—Ä–∞-–æ–∫—Ä—É–∂–µ–Ω–∏–µ: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∫–∞–∂–¥—ã–µ {UltraActiveConfig.FORCE_BUY_INTERVAL} —à–∞–≥–æ–≤")
    print(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∫–∞–∂–¥—ã–µ {UltraActiveConfig.FORCE_SELL_INTERVAL} —à–∞–≥–æ–≤")
    
    # 3. –£–ª—å—Ç—Ä–∞-–ø—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å
    print("\nüß† –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–û–ô –ú–û–î–ï–õ–ò")
    print("-" * 65)
    
    policy_kwargs = dict(
        features_extractor_class=UltraActiveExtractor,
        features_extractor_kwargs=dict(features_dim=64),
        net_arch=[64, 32],
        activation_fn=torch.nn.ReLU
    )
    
    model = PPO(
        'MlpPolicy',
        vec_env,
        learning_rate=UltraActiveConfig.LEARNING_RATE,
        n_steps=256,  # –ï—â–µ –º–µ–Ω—å—à–µ —à–∞–≥–æ–≤
        batch_size=32,
        n_epochs=2,   # –ú–µ–Ω—å—à–µ —ç–ø–æ—Ö
        gamma=0.9,    # –ú–µ–Ω—å—à–µ gamma –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        gae_lambda=0.8,
        clip_range=0.3,  # –ë–æ–ª—å—à–µ clip –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
        ent_coef=0.05,   # –ë–æ–ª—å—à–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏
        vf_coef=0.3,
        policy_kwargs=policy_kwargs,
        verbose=1
    )
    
    print("‚úÖ –£–ª—å—Ç—Ä–∞-–º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ")
    
    # 4. –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print("\nüéì –≠–¢–ê–ü 4: –ë–´–°–¢–†–û–ï –ê–ì–†–ï–°–°–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï")
    print("-" * 65)
    model.learn(total_timesteps=UltraActiveConfig.TOTAL_TIMESTEPS)
    print("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # 5. –£–ª—å—Ç—Ä–∞-–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüß™ –≠–¢–ê–ü 5: –£–õ–¨–¢–†–ê-–ê–ö–¢–ò–í–ù–û–ï BACKTESTING")
    print("-" * 65)
    
    obs, _ = env.reset()
    results = []
    trades_log = []
    
    print("üíº –ù–∞—á–∏–Ω–∞–µ–º –£–õ–¨–¢–†–ê-–ê–ö–¢–ò–í–ù–£–Æ —Ç–æ—Ä–≥–æ–≤–ª—é...")
    print(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∫–∞–∂–¥—ã–µ {UltraActiveConfig.FORCE_BUY_INTERVAL} —à–∞–≥–æ–≤")
    print(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∫–∞–∂–¥—ã–µ {UltraActiveConfig.FORCE_SELL_INTERVAL} —à–∞–≥–æ–≤")
    print(f"‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ: {UltraActiveConfig.MAX_HOLD_TIME} —à–∞–≥–æ–≤")
    
    for step in range(min(1000, len(combined_df) - env.window_size - 1)):
        action, _ = model.predict(obs, deterministic=True)
        obs, reward, done, truncated, info = env.step(int(action))
        
        results.append({
            'step': step,
            'datetime': info['datetime'],
            'portfolio_value': info['portfolio_value'],
            'current_price': info['current_price'],
            'balance': info['balance'],
            'btc_amount': info['btc_amount'],
            'total_trades': info['total_trades'],
            'profitable_trades': info['profitable_trades'],
            'steps_since_last_buy': info['steps_since_last_buy'],
            'position_hold_time': info['position_hold_time']
        })
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏
        if info['trade_result']['executed']:
            trades_log.append(info['trade_result'])
            trade = info['trade_result']
            trade_type = trade['type']
            price = trade['price']
            datetime = trade['datetime']
            forced = " (–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û)" if trade.get('forced', False) else ""
            reason = f" - {trade.get('reason', '')}" if trade.get('forced', False) else ""
            print(f"üîÑ {trade_type} –ø–æ ${price:.2f} –≤ {datetime}{forced}{reason}")
        
        if done:
            break
    
    # 6. –ê–Ω–∞–ª–∏–∑ –£–õ–¨–¢–†–ê-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –≠–¢–ê–ü 6: –ê–ù–ê–õ–ò–ó –£–õ–¨–¢–†–ê-–ê–ö–¢–ò–í–ù–û–ô –¢–û–†–ì–û–í–õ–ò")
    print("-" * 65)
    
    if results:
        final_result = results[-1]
        start_date = results[0]['datetime']
        end_date = final_result['datetime']
        
        initial_value = UltraActiveConfig.INITIAL_BALANCE
        final_value = final_result['portfolio_value']
        total_return = (final_value - initial_value) / initial_value * 100
        
        total_trades = final_result['total_trades']
        profitable_trades = final_result['profitable_trades']
        win_rate = (profitable_trades / max(total_trades, 1)) * 100
        
        # Buy & Hold
        start_price = results[0]['current_price']
        end_price = final_result['current_price']
        bnh_return = (end_price - start_price) / start_price * 100
        
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–õ–¨–¢–†–ê-–ê–ö–¢–ò–í–ù–û–ô –¢–û–†–ì–û–í–õ–ò V3.6")
        print("=" * 70)
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_value:,.2f}")
        print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${final_value:,.2f}")
        print(f"üìà –£–õ–¨–¢–†–ê-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}%")
        print(f"üìà Buy & Hold Bitcoin: {bnh_return:+.2f}%")
        print(f"üéØ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ: {total_return - bnh_return:+.2f}%")
        print(f"üîÑ –í–°–ï–ì–û –°–î–ï–õ–û–ö: {total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades} ({win_rate:.1f}%)")
        print(f"‚ö° –£–õ–¨–¢–†–ê-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_trades / len(results) * 100:.1f} —Å–¥–µ–ª–æ–∫/100 —à–∞–≥–æ–≤")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫
        if trades_log:
            buy_trades = [t for t in trades_log if t['type'] == 'BUY']
            sell_trades = [t for t in trades_log if t['type'] == 'SELL']
            forced_trades = [t for t in trades_log if t.get('forced', False)]
            
            print(f"\nüìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –°–î–ï–õ–û–ö:")
            print(f"üõí –ü–æ–∫—É–ø–æ–∫: {len(buy_trades)}")
            print(f"üí∞ –ü—Ä–æ–¥–∞–∂: {len(sell_trades)}")
            print(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö: {len(forced_trades)} ({len(forced_trades)/total_trades*100:.1f}%)")
            
            if sell_trades:
                profits = [t.get('profit', 0) for t in sell_trades if 'profit' in t]
                if profits:
                    avg_profit = np.mean(profits)
                    print(f"üíµ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_profit:.2f}")
                    print(f"üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${max(profits):.2f}")
                    print(f"üòû –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${min(profits):.2f}")
        
        print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –£–õ–¨–¢–†–ê-–ê–ö–¢–ò–í–ù–û–ô –¢–û–†–ì–û–í–õ–ò V3.6")
        print("=" * 70)
        
        if total_trades >= 10:
            if total_return > bnh_return and win_rate > 40:
                print("üü¢ –£–õ–¨–¢–†–ê-–£–°–ü–ï–•: –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è!")
            elif total_trades >= 20:
                print("üü° –£–õ–¨–¢–†–ê-–ü–†–û–ì–†–ï–°–°: –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞!")
            else:
                print("üî∂ –£–õ–¨–¢–†–ê-–†–ê–ó–í–ò–¢–ò–ï: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
        else:
            print("üî¥ –ù–£–ñ–ù–ê –î–û–†–ê–ë–û–¢–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–∂–µ –¥–ª—è —É–ª—å—Ç—Ä–∞-—Ä–µ–∂–∏–º–∞")
        
        print(f"\n‚ö° –£–õ–¨–¢–†–ê-—Å–∏—Å—Ç–µ–º–∞ —Å–æ–≤–µ—Ä—à–∏–ª–∞ {total_trades} —Å–¥–µ–ª–æ–∫")
        print(f"üöÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_trades / len(results) * 100:.1f} —Å–¥–µ–ª–æ–∫ –Ω–∞ 100 —à–∞–≥–æ–≤")
        print(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}% vs {bnh_return:+.2f}% B&H")
        print("üéâ –£–õ–¨–¢–†–ê-–ê–ö–¢–ò–í–ù–û–ï BACKTESTING V3.6 –ó–ê–í–ï–†–®–ï–ù–û!")
    
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")


if __name__ == "__main__":
    main() 