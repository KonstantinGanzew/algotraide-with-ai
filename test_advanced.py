#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å LSTM –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º
"""

print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...")

try:
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞...")
    from main import Config, setup_device, check_gpu_requirements
    from main import AdvancedTradingEnv, LSTMFeatureExtractor
    from main import load_and_prepare_data, analyze_results
    print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    print(f"   - WINDOW_SIZE: {Config.WINDOW_SIZE}")
    print(f"   - POSITIONS_LIMIT: {Config.POSITIONS_LIMIT}")
    print(f"   - RISK_PER_TRADE: {Config.RISK_PER_TRADE}")
    print(f"   - STOP_LOSS_PERCENTAGE: {Config.STOP_LOSS_PERCENTAGE}")
    print(f"   - LSTM_HIDDEN_SIZE: {Config.LSTM_HIDDEN_SIZE}")
    print(f"   üî• TOTAL_TIMESTEPS: {Config.TOTAL_TIMESTEPS:,} (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï!)")
    print(f"   üö´ ENABLE_EARLY_STOPPING: {Config.ENABLE_EARLY_STOPPING}")
    print(f"   ‚ö° LEARNING_RATE: {Config.LEARNING_RATE}")
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OK")
    
    # –¢–µ—Å—Ç GPU —Ñ—É–Ω–∫—Ü–∏–π
    print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU —Ñ—É–Ω–∫—Ü–∏–π...")
    gpu_info = check_gpu_requirements()
    print(f"   - PyTorch –≤–µ—Ä—Å–∏—è: {gpu_info['torch_version']}")
    print(f"   - CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {gpu_info['cuda_available']}")
    print(f"   - GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {gpu_info['device_count']}")
    
    device = setup_device()
    print(f"   - –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    print("‚úÖ GPU —Ñ—É–Ω–∫—Ü–∏–∏ OK")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    import os
    
    data_path = "data/BTC_5_96w.csv"
    if os.path.exists(data_path):
        df = load_and_prepare_data(data_path)
        print(f"   - –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
        print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(df.columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        new_indicators = ['macd', 'obv', 'vwap', 'bb_upper', 'bb_lower', 'atr']
        found_indicators = [ind for ind in new_indicators if ind in df.columns]
        print(f"   - –ù–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã: {found_indicators}")
        print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö OK")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdvancedTradingEnv...")
        env = AdvancedTradingEnv(df, window_size=Config.WINDOW_SIZE)
        print(f"   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {env.action_space}")
        print(f"   - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {env.observation_space.shape}")
        
        # –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤
        obs, _ = env.reset()
        print(f"   - –§–æ—Ä–º–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {obs.shape}")
        
        for i in range(5):
            action = env.action_space.sample()
            obs, reward, done, truncated, info = env.step(action)
            print(f"   - –®–∞–≥ {i+1}: action={action}, reward={reward:.3f}, balance={env.balance:.2f}")
            if done:
                break
        
        print("‚úÖ AdvancedTradingEnv OK")
        
        # –¢–µ—Å—Ç LSTM Feature Extractor
        print("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSTM Feature Extractor...")
        import torch
        import numpy as np
        from gymnasium import spaces
        
        obs_space = spaces.Box(low=-1, high=1, shape=(Config.WINDOW_SIZE, df.shape[1]), dtype=np.float32)
        lstm_extractor = LSTMFeatureExtractor(obs_space, features_dim=64)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–Ω–∑–æ—Ä
        batch_size = 4
        test_input = torch.randn(batch_size, Config.WINDOW_SIZE, df.shape[1])
        
        with torch.no_grad():
            features = lstm_extractor(test_input)
            print(f"   - –í—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞: {test_input.shape}")
            print(f"   - –í—ã—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞: {features.shape}")
            print(f"   - LSTM —Å–∫—Ä—ã—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {Config.LSTM_HIDDEN_SIZE}")
        
        print("‚úÖ LSTM Feature Extractor OK")
        
    else:
        print(f"‚ö†Ô∏è  –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_path}")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ —Å–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–º –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–º")
    print("   ‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π (25%, 50%, 100%)")
    print("   ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞")
    print("   ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (MACD, OBV, VWAP, Bollinger Bands, ATR)")
    print("   ‚Ä¢ LSTM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
    print("   ‚Ä¢ –£—Å–ª–æ–∂–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏")
    print(f"   üî• –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï: {Config.TOTAL_TIMESTEPS:,} —à–∞–≥–æ–≤ –ë–ï–ó —Ä–∞–Ω–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!")
    print("   üö´ –û—Ç–∫–ª—é—á–µ–Ω early stopping –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py")
    print("‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è:")
    print(f"   ‚Ä¢ GPU (RTX 4090): ~30-50 –º–∏–Ω—É—Ç ({Config.TOTAL_TIMESTEPS:,} —à–∞–≥–æ–≤)")
    print(f"   ‚Ä¢ GPU (RTX 3070): ~60-90 –º–∏–Ω—É—Ç ({Config.TOTAL_TIMESTEPS:,} —à–∞–≥–æ–≤)")
    print(f"   ‚Ä¢ CPU: ~2-4 —á–∞—Å–∞ ({Config.TOTAL_TIMESTEPS:,} —à–∞–≥–æ–≤)")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc() 