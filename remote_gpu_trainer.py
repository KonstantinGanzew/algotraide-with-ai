#!/usr/bin/env python3
"""
üöÄ –£–î–ê–õ–ï–ù–ù–´–ô GPU –¢–†–ï–ù–ï–†
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Å NVIDIA GPU
–ü–∞—Ä–æ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
"""

import subprocess
import os
import getpass
import time
import json
from pathlib import Path

print("üöÄ –£–î–ê–õ–ï–ù–ù–´–ô GPU –¢–†–ï–ù–ï–†")
print("=" * 50)

# –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
print("üñ•Ô∏è –í–´–ë–ï–†–ò–¢–ï –°–ï–†–í–ï–†:")
print("   1 - 192.168.88.218 (–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)")
print("   2 - kureed.ml (–æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)")

server_choice = input("–í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ [1]: ").strip() or "1"

if server_choice == "2":
    SERVER_IP = "kureed.ml"
    USERNAME = "kureed"
    PASSWORD = "123qweknz"
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {USERNAME}@{SERVER_IP}")
else:
    SERVER_IP = "192.168.88.218"
    USERNAME = input("üë§ Username: ").strip()
    if not USERNAME:
        print("‚ùå Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        exit(1)
    
    # –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –û–î–ò–ù –†–ê–ó –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    print(f"üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è {USERNAME}@{SERVER_IP}")
    PASSWORD = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
REMOTE_PATH = f"/home/{USERNAME}/gpu_training"
CONNECTION = f"{USERNAME}@{SERVER_IP}"

# –§–∞–π–ª—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
FILES_TO_SYNC = [
    "sentiment_trading_v69_remote.py",
    "requirements-gpu.txt",
    "data/BTCUSDT_5m_2y.csv", 
    "data/BTCUSDT_1h_2y.csv",
    "data/BTCUSDT_4h_2y.csv",
    "data/BTCUSDT_1d_2y.csv"
]

def run_ssh_cmd(command, capture_output=True):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SSH –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—Ä–æ–ª–µ–º –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    cmd = [
        "sshpass", f"-p{PASSWORD}",
        "ssh", 
        "-o", "StrictHostKeyChecking=no",
        "-o", "UserKnownHostsFile=/dev/null",
        "-o", "ControlMaster=no",
        "-o", "LogLevel=ERROR",
        CONNECTION, command
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=capture_output, text=True, timeout=300)
        return {
            'success': result.returncode == 0,
            'stdout': result.stdout if capture_output else '',
            'stderr': result.stderr if capture_output else ''
        }
    except Exception as e:
        return {'success': False, 'error': str(e)}

def run_scp_cmd(source, destination):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
    cmd = [
        "sshpass", f"-p{PASSWORD}",
        "scp", 
        "-o", "StrictHostKeyChecking=no",
        "-o", "UserKnownHostsFile=/dev/null", 
        "-o", "ControlMaster=no",
        "-o", "LogLevel=ERROR",
        source, destination
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        return result.returncode == 0
    except:
        return False

def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    result = run_ssh_cmd("echo '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ'")
    
    if result['success']:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print(f"–û—à–∏–±–∫–∞: {result.get('stderr', result.get('error', 'Unknown'))}")
        return False

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU"""
    print("üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU...")
    result = run_ssh_cmd("nvidia-smi --query-gpu=name,memory.total,memory.free --format=csv,noheader")
    
    if result['success']:
        gpus = []
        for line in result['stdout'].strip().split('\n'):
            if line.strip():
                parts = line.split(', ')
                if len(parts) >= 3:
                    gpus.append({
                        'name': parts[0],
                        'memory_total': parts[1], 
                        'memory_free': parts[2]
                    })
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ GPU: {len(gpus)}")
        for i, gpu in enumerate(gpus):
            print(f"   GPU {i}: {gpu['name']} ({gpu['memory_free']} / {gpu['memory_total']})")
        return True
    else:
        print("‚ö†Ô∏è GPU –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã...")
    
    commands = [
        f"mkdir -p {REMOTE_PATH}",
        f"mkdir -p {REMOTE_PATH}/data",
        f"mkdir -p {REMOTE_PATH}/logs",
        f"mkdir -p {REMOTE_PATH}/models",
        f"mkdir -p {REMOTE_PATH}/results"
    ]
    
    for cmd in commands:
        result = run_ssh_cmd(cmd)
        if not result['success']:
            print(f"‚ùå –û—à–∏–±–∫–∞: {cmd}")
            return False
    
    print("‚úÖ –°—Ä–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    return True

def sync_files():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"""
    print("üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤...")
    
    success = True
    for file_path in FILES_TO_SYNC:
        local_file = Path(file_path)
        
        if not local_file.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
        
        if 'data/' in file_path:
            remote_file = f"{CONNECTION}:{REMOTE_PATH}/data/{local_file.name}"
        else:
            remote_file = f"{CONNECTION}:{REMOTE_PATH}/{local_file.name}"
        
        print(f"üì§ {file_path} -> —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
        if not run_scp_cmd(str(local_file), remote_file):
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {file_path}")
            success = False
        else:
            print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
    
    return success

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    commands = [
        "python3 --version",
        f"cd {REMOTE_PATH} && python3 -m venv venv",
        f"cd {REMOTE_PATH} && source venv/bin/activate && pip install --upgrade pip",
        f"cd {REMOTE_PATH} && source venv/bin/activate && pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121",
        f"cd {REMOTE_PATH} && source venv/bin/activate && pip install stable-baselines3 gymnasium numpy pandas matplotlib ccxt scikit-learn tqdm"
    ]
    
    for i, cmd in enumerate(commands, 1):
        print(f"üì¶ –®–∞–≥ {i}/{len(commands)}...")
        result = run_ssh_cmd(cmd, capture_output=False)
        
        if not result['success']:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {i}")
            return False
    
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def test_gpu_setup():
    """–¢–µ—Å—Ç GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç GPU –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    test_script = '''
import torch
print("üéÆ GPU –¢–ï–°–¢")
print(f"PyTorch: {torch.__version__}")
print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
if torch.cuda.is_available():
    print(f"GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {torch.cuda.device_count()}")
    for i in range(torch.cuda.device_count()):
        props = torch.cuda.get_device_properties(i)
        print(f"GPU {i}: {props.name} ({props.total_memory / 1024**3:.1f}GB)")
    print("‚úÖ GPU –≥–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é!")
else:
    print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    '''
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    with open('temp_gpu_test.py', 'w') as f:
        f.write(test_script)
    
    try:
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
        if run_scp_cmd('temp_gpu_test.py', f'{CONNECTION}:{REMOTE_PATH}/gpu_test.py'):
            result = run_ssh_cmd(f"cd {REMOTE_PATH} && source venv/bin/activate && python gpu_test.py")
            
            if result['success']:
                print("‚úÖ GPU —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω")
                print("\n" + "="*40)
                print("üéÆ –†–ï–ó–£–õ–¨–¢–ê–¢ GPU –¢–ï–°–¢–ê:")
                print("="*40)
                print(result['stdout'])
                return True
            else:
                print("‚ùå GPU —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
                print(result.get('stderr', '–û—à–∏–±–∫–∞'))
                return False
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")
            return False
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists('temp_gpu_test.py'):
            os.remove('temp_gpu_test.py')
    
    return False

def start_training():
    """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è...")
    
    timestamp = time.strftime('%Y%m%d_%H%M%S')
    log_file = f"logs/training_{timestamp}.log"
    
    cmd = (f"cd {REMOTE_PATH} && "
           f"source venv/bin/activate && "
           f"nohup python sentiment_trading_v69_remote.py > {log_file} 2>&1 & "
           f"echo $!")
    
    result = run_ssh_cmd(cmd)
    
    if result['success']:
        pid = result['stdout'].strip()
        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        print(f"üìã PID: {pid}")
        print(f"üìÑ –õ–æ–≥: {log_file}")
        return {'success': True, 'pid': pid, 'log_file': log_file}
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
        print(result.get('stderr', 'Unknown error'))
        return {'success': False}

def monitor_training():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è"""
    print("üìä –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞...")
    
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª
    result = run_ssh_cmd(f"ls -t {REMOTE_PATH}/logs/training_*.log | head -1")
    
    if result['success'] and result['stdout'].strip():
        log_file = result['stdout'].strip()
        print(f"üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {log_file}")
        print("‚èπÔ∏è Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ tail -f
            cmd = [
                "sshpass", f"-p{PASSWORD}",
                "ssh", 
                "-o", "StrictHostKeyChecking=no",
                "-o", "UserKnownHostsFile=/dev/null",
                "-o", "ControlMaster=no",
                "-o", "LogLevel=ERROR",
                CONNECTION, f"tail -f {log_file}"
            ]
            subprocess.run(cmd)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

def get_status():
    """–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è"""
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    result = run_ssh_cmd("pgrep -f 'python.*sentiment_trading' || echo 'No processes'")
    
    processes = []
    if result['success'] and 'No processes' not in result['stdout']:
        processes = result['stdout'].strip().split('\n')
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    log_result = run_ssh_cmd(f"ls -t {REMOTE_PATH}/logs/training_*.log | head -1 | xargs tail -5 || echo 'No logs'")
    logs = log_result['stdout'] if log_result['success'] else 'No logs'
    
    status = {
        'processes': processes,
        'latest_logs': logs,
        'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
    }
    
    print(json.dumps(status, indent=2, ensure_ascii=False))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ sshpass
    try:
        subprocess.run(['which', 'sshpass'], check=True, capture_output=True)
    except:
        print("‚ùå sshpass –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install sshpass")
        return
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not test_connection():
        return
    
    print(f"\nüìã –°–µ—Ä–≤–µ—Ä: {SERVER_IP}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {USERNAME}")
    print(f"üìÅ –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å: {REMOTE_PATH}")
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    while True:
        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï:")
        print("   1 - –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è")
        print("   2 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GPU")
        print("   3 - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–µ–¥—É")
        print("   4 - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã") 
        print("   5 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("   6 - –¢–µ—Å—Ç GPU")
        print("   7 - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
        print("   8 - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("   9 - –°—Ç–∞—Ç—É—Å")
        print("   0 - –í—ã—Ö–æ–¥")
        
        choice = input("–í—ã–±–æ—Ä: ").strip()
        
        if choice == "1":
            print("\nüöÄ –ü–û–õ–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò –ó–ê–ü–£–°–ö...")
            steps = [
                ("üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU", check_gpu),
                ("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã", setup_environment), 
                ("üìÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤", sync_files),
                ("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", install_dependencies),
                ("üß™ –¢–µ—Å—Ç GPU", test_gpu_setup)
            ]
            
            success = True
            for name, func in steps:
                print(f"\n{name}...")
                if not func():
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {name}")
                    success = False
                    break
            
            if success:
                print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è...")
                result = start_training()
                if result['success']:
                    print("üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                    print(f"üîç –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç 8")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
        
        elif choice == "2":
            check_gpu()
        elif choice == "3":
            setup_environment()
        elif choice == "4":
            sync_files()
        elif choice == "5":
            install_dependencies()
        elif choice == "6":
            test_gpu_setup()
        elif choice == "7":
            result = start_training()
            if result['success']:
                print("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        elif choice == "8":
            monitor_training()
        elif choice == "9":
            get_status()
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main() 