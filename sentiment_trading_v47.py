"""
üöÄ –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê V5.2 - –°–ê–ú–û–î–û–°–¢–ê–¢–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø
‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ—Å—Ç–∞—è –æ–±–µ—Ä—Ç–∫–∞ (ChannelFirstWrapper) –≤–º–µ—Å—Ç–æ FrameStack, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫.
‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞. –≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è: CNN, –±–æ–Ω—É—Å –∑–∞ —Ç—Ä–µ–Ω–¥, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ R:P 1:3.
‚úÖ –¶–µ–ª—å: –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏ —É–≤–∏–¥–µ—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
"""

import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import DummyVecEnv
import gymnasium as gym
from gymnasium import spaces
import matplotlib.pyplot as plt
from typing import Dict, Tuple, Any
import warnings
warnings.filterwarnings('ignore')

# –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–∑–¥–∞–µ–º –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–æ–≥ FrameStack(n_stack=1)
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–µ—Ä—Å–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫.
# class ChannelFirstWrapper(gym.ObservationWrapper):
#     def __init__(self, env):
#         super().__init__(env)
#         old_shape = env.observation_space.shape
#         self.observation_space = spaces.Box(
#             low=np.min(env.observation_space.low),
#             high=np.max(env.observation_space.high),
#             shape=(1, old_shape[0], old_shape[1]), # –î–æ–±–∞–≤–ª—è–µ–º "–∫–∞–Ω–∞–ª—å–Ω—É—é" —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
#             dtype=env.observation_space.dtype
#         )
# 
#     def observation(self, observation):
#         # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Å—å –≤ –Ω–∞—á–∞–ª–µ (axis=0)
#         return np.expand_dims(observation, axis=0)


class TrendTraderConfig:
    INITIAL_BALANCE = 10000
    ORDER_SIZE_RATIO = 0.25
    STOP_LOSS = 0.04
    TAKE_PROFIT = 0.12
    TRANSACTION_FEE = 0.001
    WINDOW_SIZE = 64
    TOTAL_TIMESTEPS = 250000
    LEARNING_RATE = 3e-4
    ENTROPY_COEF = 0.01
    GAMMA = 0.99
    TREND_PROFIT_BONUS = 0.5

class SimpleDataLoader:
    def __init__(self, data_path: str):
        self.data_path = data_path

    def load_and_prepare_data(self) -> Tuple[pd.DataFrame, pd.DataFrame]:
        print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.data_path}...")
        df = pd.read_csv(self.data_path)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df['ema_fast'] = df['close'].ewm(span=12, adjust=False).mean()
        df['ema_slow'] = df['close'].ewm(span=26, adjust=False).mean()
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        df['macd'] = df['ema_fast'] - df['ema_slow']
        df['macd_signal'] = df['macd'].ewm(span=9, adjust=False).mean()
        df['sma_long'] = df['close'].rolling(window=200).mean()
        
        df.dropna(inplace=True)
        df.reset_index(drop=True, inplace=True)
        
        features = pd.DataFrame(index=df.index)
        features['price_norm'] = df['close'] / df['sma_long']
        features['ema_spread'] = (df['ema_fast'] - df['ema_slow']) / df['close']
        features['rsi_norm'] = (df['rsi'] - 50) / 50
        features['macd_hist_norm'] = (df['macd'] - df['macd_signal']) / df['close']
        features['trend_signal'] = np.sign(df['close'] - df['sma_long'])
        
        features.replace([np.inf, -np.inf], 0, inplace=True)
        features.dropna(inplace=True)
        prices_df = df.loc[features.index].reset_index(drop=True)
        features.reset_index(drop=True, inplace=True)
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(features)} –∑–∞–ø–∏—Å–µ–π, {len(features.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")
        return features, prices_df[['timestamp', 'open', 'high', 'low', 'close']]

class TradingEnv(gym.Env):
    metadata = {'render_modes': ['human']}
    def __init__(self, features_df: pd.DataFrame, prices_df: pd.DataFrame):
        super().__init__()
        self.features_df = features_df.reset_index(drop=True)
        self.prices_df = prices_df.reset_index(drop=True)
        self.cfg = TrendTraderConfig()
        
        self.action_space = spaces.Discrete(3)
        self.observation_space = spaces.Box(
            low=-np.inf, high=np.inf,
            shape=(self.cfg.WINDOW_SIZE, self.features_df.shape[1]),
            dtype=np.float32
        )
        self._reset_state()
    
    def _reset_state(self):
        self.balance = self.cfg.INITIAL_BALANCE
        self.equity = self.cfg.INITIAL_BALANCE
        self.current_step = self.cfg.WINDOW_SIZE
        self.position_amount = 0.0
        self.entry_price = 0.0
        self.trades = []
        self.entry_step = 0
    
    def reset(self, seed=None, options=None):
        super().reset(seed=seed)
        self._reset_state()
        return self._get_observation(), {}
    
    def _get_observation(self):
        start = self.current_step - self.cfg.WINDOW_SIZE
        return self.features_df.iloc[start:self.current_step].values.astype(np.float32)

    def _get_current_price(self) -> float:
        return self.prices_df.iloc[self.current_step]['close']

    def step(self, action: int) -> Tuple[np.ndarray, float, bool, bool, Dict[str, Any]]:
        current_price = self._get_current_price()
        reward = 0.0
        done = False

        if action == 1 and self.position_amount == 0:
            self._open_position(current_price)
        elif action == 2 and self.position_amount > 0:
            reward = self._close_position(current_price)
        
        if self.position_amount > 0:
            price_change = (current_price - self.entry_price) / self.entry_price
            if price_change <= -self.cfg.STOP_LOSS or price_change >= self.cfg.TAKE_PROFIT:
                reward = self._close_position(current_price)

        unrealized_pnl = (current_price - self.entry_price) * self.position_amount if self.position_amount > 0 else 0
        self.equity = self.balance + unrealized_pnl
        self.current_step += 1
        
        if self.current_step >= len(self.features_df) - 1 or self.equity <= self.cfg.INITIAL_BALANCE * 0.2:
            if self.position_amount > 0: self._close_position(current_price)
            done = True
        
        return self._get_observation(), reward, done, False, {'equity': self.equity}

    def _open_position(self, price: float):
        self.entry_step = self.current_step
        order_size_usd = self.balance * self.cfg.ORDER_SIZE_RATIO
        fee = order_size_usd * self.cfg.TRANSACTION_FEE
        self.balance -= (order_size_usd + fee)
        self.position_amount = order_size_usd / price
        self.entry_price = price

    def _close_position(self, price: float) -> float:
        close_value = self.position_amount * price
        fee = close_value * self.cfg.TRANSACTION_FEE
        self.balance += (close_value - fee)
        realized_pnl = (price - self.entry_price) * self.position_amount - (self.entry_price * self.position_amount * self.cfg.TRANSACTION_FEE) - fee
        self.trades.append(realized_pnl)
        
        reward = realized_pnl / self.cfg.INITIAL_BALANCE
        
        if realized_pnl > 0:
            trend_at_entry = self.features_df.iloc[self.entry_step]['trend_signal']
            if trend_at_entry > 0:
                reward += self.cfg.TREND_PROFIT_BONUS

        self.position_amount = 0.0
        self.entry_price = 0.0
        return reward

def main():
    print("üöÄ –°–ò–°–¢–ï–ú–ê V5.2 (—Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è) - –ó–ê–ü–£–°–ö")
    data_loader = SimpleDataLoader("data/BTC_5_96w.csv")
    features_df, prices_df = data_loader.load_and_prepare_data()

    train_split_idx = int(len(features_df) * 0.8)
    train_features, train_prices = features_df.iloc[:train_split_idx], prices_df.iloc[:train_split_idx]
    test_features, test_prices = features_df.iloc[train_split_idx:], prices_df.iloc[train_split_idx:]
    print(f"\n–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: {len(train_features)} –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, {len(test_features)} –¥–ª—è —Ç–µ—Å—Ç–∞.")
    
    env_fn = lambda: TradingEnv(train_features, train_prices)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º ChannelFirstWrapper, –æ–Ω –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è CNN
    vec_env = DummyVecEnv([env_fn])

    policy_kwargs = dict(net_arch=dict(pi=[128, 64], vf=[128, 64]))

    model = PPO('MlpPolicy', vec_env, policy_kwargs=policy_kwargs,
                learning_rate=TrendTraderConfig.LEARNING_RATE, ent_coef=TrendTraderConfig.ENTROPY_COEF,
                n_steps=2048, batch_size=64, gamma=TrendTraderConfig.GAMMA,
                verbose=1, device="cpu")
    
    print("\nüéì –≠–¢–ê–ü 4: –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –° CNN...")
    model.learn(total_timesteps=TrendTraderConfig.TOTAL_TIMESTEPS)
    
    print("\nüí∞ –≠–¢–ê–ü 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –ù–ï–í–ò–î–ò–ú–´–• –î–ê–ù–ù–´–•...")
    test_env = TradingEnv(test_features, test_prices)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º ChannelFirstWrapper –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∂–µ
    obs, _ = test_env.reset()
    
    equity_history, price_history = [test_env.equity], [test_env._get_current_price()]
    
    while True:
        action, _ = model.predict(obs, deterministic=True)
        obs, _, done, _, info = test_env.step(int(action))
        
        equity_history.append(info['equity']) 
        price_history.append(test_env._get_current_price())
        if done: break
            
    print("\nüìä –≠–¢–ê–ü 6: –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    initial_equity, final_equity = equity_history[0], equity_history[-1]
    total_return = (final_equity - initial_equity) / initial_equity * 100
    start_price, end_price = price_history[0], price_history[-1]
    bnh_return = (end_price - start_price) / start_price * 100
    total_trades = len(test_env.trades)
    win_rate = (len([t for t in test_env.trades if t > 0]) / total_trades) * 100 if total_trades > 0 else 0

    print("=" * 60)
    print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${final_equity:,.2f} (–ù–∞—á–∞–ª—å–Ω—ã–π: ${initial_equity:,.2f})")
    print(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {total_return:+.2f}%")
    print(f"üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å Buy & Hold: {bnh_return:+.2f}%")
    print("-" * 30)
    print(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
    print(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {win_rate:.1f}%")
    
    plt.figure(figsize=(15, 7))
    plt.title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ (V5.2 - –°–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è)')
    ax1 = plt.gca(); ax1.plot(equity_history, label='Equity', color='blue', linewidth=2)
    ax1.set_xlabel('–®–∞–≥–∏'); ax1.set_ylabel('Equity ($)', color='blue'); ax1.grid(True)
    ax2 = ax1.twinx(); ax2.plot(price_history, label='–¶–µ–Ω–∞ BTC', color='orange', alpha=0.6)
    ax2.set_ylabel('–¶–µ–Ω–∞ ($)', color='orange'); ax1.legend(loc='upper left'); ax2.legend(loc='upper right')
    plt.tight_layout(); plt.show()

if __name__ == "__main__":
    main()